// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/collection>
#include <cat/meta>
#include <cat/utility>

namespace cat {

// An `Array` represents an array of `T` with an immutable length. It stores its
// data points within itself, so this array can be constructed on the stack. It
// is random-access iterable.
template <typename T, ssize length>
class Array : public CollectionFacade<Array<T, length>, T> {
    T storage[length.raw];

  public:
    constexpr Array() = default;
    constexpr Array(Array<T, length> const& other_array) = default;
    constexpr Array(Array<T, length>&& other_array) = default;

    // Construct an `Array` from a variadic argument list.
    template <typename... Args>
        requires(ssizeof_pack<Args...>() == length &&
                 (is_convertible<Args, T> && ...))
    constexpr Array(Args&&... arguments)
        // Explicitly converting this type allows the first argument to coerce
        // the type for following arguments.
        // i.e. `cat::Array shorts = {int2{0}, 1, 2};`
        : storage(static_cast<T>(forward<Args>(arguments))...){};

    // Construct from a constant list, such as `value_list` or
    // `integer_sequence`.
    template <typename U, U... initializers>
        requires(ssizeof_pack(initializers...) == length &&
                 is_implicitly_convertible<U, T>)
    constexpr Array(ValueList<U, initializers...>)
        : storage(static_cast<T>(initializers)...){};

    constexpr auto operator=(Array<T, length> const& other_array)
        -> Array& = default;

    // Converting copy assignment operator.
    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    constexpr auto operator=(Array<U, length> const& other_array) -> Array& {
        // TODO: Optimize with `copy_memory()` if T and U are relocatable.
        for (ssize i = 0; i < length; ++i) {
            this->storage[i.raw] = static_cast<T>(other_array[i]);
        }
        return *this;
    }

    constexpr auto operator=(Array<T, length>&& other_array)
        -> Array& = default;

    // Converting move assignment operator.
    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    constexpr auto operator=(Array<U, length>&& other_array) -> Array& {
        // TODO: Optimize with `copy_memory()` if T and U are relocatable.
        for (ssize i = 0; i < length; ++i) {
            this->storage[i.raw] = static_cast<T>(move(other_array[i]));
        }
        return *this;
    }

  private:
    template <ssize index, typename U, U value, U... values>
    constexpr void copy_list(ValueList<U, value, values...> const) {
        this->storage[index.raw] = value;

        if constexpr (index + 1 == length) {
            return;
        } else {
            // Recurse withn one fewer elements in the `ValueList`.
            this->copy_list<index + 1>(ValueList<U, values...>{});
        }
    }

  public:
    template <integral U, U... values>
        requires(is_implicitly_convertible<U, T>&& ssizeof_pack(values...) ==
                 length)
    constexpr auto operator=(ValueList<U, values...> list) {
        this->copy_list<0, U, values...>(list);
    };

    // Get the non-`const` address of this `Array`'s internal array.
    [[nodiscard]] constexpr auto p_data() -> T* {
        return this->storage;
    }

    // Get the `const` address of this `Array`'s internal array.
    [[nodiscard]] constexpr auto p_data() const -> T const* {
        return this->storage;
    }

    // Get the number of elements contained in this `Array`.
    [[nodiscard]] constexpr auto size() const -> ssize {
        return length;
    }
};

// Construct an `Array` as: `Array array = {0, 1, 2};`
template <typename T, typename... Args>
Array(T, Args...) -> Array<T, ssizeof_pack<Args...>() + 1>;

}  // namespace cat

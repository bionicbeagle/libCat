// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/type_list>

namespace cat {
namespace detail {
    // Because one type can only be derived from once, types must be binded to
    // their position in a paremeter pack to guarantee their uniqueness. This is
    // required to support `tuple`s with non-uniquely-typed elements.
    template <iword in_index, typename T>
    struct tuple_element {
        using element = T;

        constexpr tuple_element() = default;

        // conditionally trivial special member functions in C++20 allows these
        // to remain trivial in some cases:

        template <typename U>
            requires(is_implicitly_convertible<U, T>)
        constexpr tuple_element(U const& input)
            : storage(static_cast<T>(input)) {
        }

        template <rvalue U>
            requires(is_implicitly_convertible<U, T>)
        // NOLINTNEXTLINE `rvalue` sufficiently constrains this constructor.
        constexpr tuple_element(U&& input) : storage(forward<U>(input)) {
        }

        // For some reason, this produces ambiguous overload errors if it is
        // implemented as a normal function instead of an operator.
        constexpr auto operator[](constant<in_index>) & -> T& {
            return this->storage;
        }

        constexpr auto operator[](constant<in_index>) const& -> T const& {
            return this->storage;
        }

        constexpr auto operator[](constant<in_index>) && -> T&& {
            return move(this->storage);
        }

        constexpr auto operator[](constant<in_index>) const&& -> T&& {
            return move(this->storage);
        }

        [[no_unique_address]] T storage;
    };

    // Deriving from a variadic list of types allows `tuple` to be an aggregate
    // type.
    template <typename... types>
    struct type_map : types... {
        using types::operator[]...;
    };

    // This partial specialization is required in order to support two parameter
    // packs in the following `tuple_storage` declaration.
    template <typename...>
    struct tuple_storage {};

    // map a list of indices to a list of types.
    template <iword... indices, typename... in_types>
    struct tuple_storage<index_list_type<indices...>, in_types...> {
        using type = type_map<tuple_element<indices, in_types>...>;
    };

}  // namespace detail

template <typename... in_types>
struct tuple : detail::tuple_storage<index_sequence_for<in_types...>,
                                     in_types...>::type {
    using types = type_list<in_types...>;
    using map = detail::tuple_storage<index_sequence_for<in_types...>,
                                      in_types...>::type;

    // clangd 15 produces a false diagnostic if this is declared at the bottom
    // of this struct.
    static constexpr iword size = types::size;

    /*
// Convert each element of this `tuple` into those of another `tuple`.
template <typename T>
constexpr operator T() const {
    using other_types = decay<T>::types;
    // Pass in a `type_list` for its types to be deduced out of.
    return this->template convert_elements(other_types());
}

private:
template <iword in_index, typename U>
constexpr auto convert_next_element(auto const& new_tuple) const {
    U converted_value = static_cast<U>(this->get<in_index>());
    return new_tuple.template concat(cat::tuple<U>{converted_value});
}

template <iword in_index, typename U, typename... Us>
    requires(sizeof...(Us) > 0)
constexpr auto convert_next_element(auto const& new_tuple) const {
    U converted_value = static_cast<U>(this->get<in_index>());
    return this->convert_next_element<in_index + 1, Us...>(
        new_tuple.template concat(cat::tuple<U>{converted_value}));
}

template <typename... Us>
constexpr auto convert_elements(type_list<Us...>) const {
    return this->convert_next_element<0, Us...>(tuple<>{});
}

template <iword in_index>
constexpr auto concat_lhs(auto& other_tuple) const {
    return other_tuple;
}

template <iword in_index>
    requires(in_index < this->size)
constexpr auto concat_lhs(auto& other_tuple) const {
    other_tuple.template get<in_index>() = this->get<in_index>();
    return concat_lhs<in_index + 1>(other_tuple);
}

template <iword in_index>
constexpr auto concat_rhs(auto const& other_tuple, auto&) const {
    return other_tuple;
}

template <iword in_index>
constexpr auto concat_rhs(auto const& other_tuple, auto& rhs_tuple) const
    requires(in_index < rhs_tuple.this->size) {
    other_tuple.template get<in_index +
static_cast<iword>(sizeof...(in_types))>() = rhs_tuple.template get<in_index>();
return concat_rhs<in_index + 1>(other_tuple, rhs_tuple);
}

template <iword in_index>
constexpr auto concat_recurse(tuple<in_types...> const& this_tuple,
                              auto const& other_tuple,
                              auto const& new_tuple) const {
    if constexpr (in_index < this->size) {
        return concat_recurse<in_index + 1>(this_tuple, other_tuple,
                                         new_tuple);
    }
}

public:
// Concatenate this tuple with another tuple.
template <typename... Us>
constexpr auto concat(tuple<Us...> const& other_tuple) const
    -> tuple<in_types..., Us...> {
    // TODO: If these tuples are trivially relocatable, optimize this.
    tuple<in_types..., Us...> new_tuple =
        this->concat_recurse<0>(*this, other_tuple, tuple<>{});
    // this->concat_lhs<0>(new_tuple);
    return new_tuple;
}
    */

    // Get a non-`const` reference to the N'th stored variable.
    template <iword in_index>
        requires(in_index <= size)
    constexpr auto get() & -> auto& {
        return (*this)[constant<in_index>()];
    }

    template <uword in_index>
    constexpr auto get() & -> auto& {
        return (*this)[constant<make_signed(in_index)>()];
    }

    // Get a `const` reference to the N'th stored variable.
    template <iword in_index>
        requires(in_index <= size)
    [[nodiscard]]
    constexpr auto get() const& -> auto const& {
        return (*this)[constant<in_index>()];
    }

    template <uword in_index>
    [[nodiscard]]
    constexpr auto get() const& -> auto const& {
        return (*this)[constant<make_signed(in_index)>()];
    }

    // Move the N'th stored variable.
    template <iword in_index>
        requires(in_index <= size)
    constexpr auto get() && -> auto&& {
        return move(*this)[constant<in_index>()];
    }

    template <uword in_index>
    constexpr auto get() && -> auto&& {
        return move(*this)[constant<make_signed(in_index)>()];
    }

    // Move the N'th stored variable.
    template <iword in_index>
        requires(in_index <= size)
    [[nodiscard]]
    constexpr auto get() const&& -> auto&& {
        return move(*this)[constant<in_index>()];
    }

    template <uword in_index>
    [[nodiscard]]
    constexpr auto get() const&& -> auto&& {
        return move(*this)[constant<make_signed(in_index)>()];
    }

    // Get a non-`const` reference to the first stored variable.
    constexpr auto first() & -> auto&
        requires(size >= 1)
    {
        return this->get<0>();
    }

    // Get a `const` reference to the first stored variable.
    [[nodiscard]]
    constexpr auto first() const& -> auto const&
        requires(size >= 1)
    {
        return this->get<0>();
    }

    // Move the first stored variable.
    constexpr auto first() && -> auto&&
        requires(size >= 1)
    {
        return move(this->get<0>());
    }

    // Move the first stored variable.
    [[nodiscard]]
    constexpr auto first() const&& -> auto&&
        requires(size >= 1)
    {
        return move(this->get<0>());
    }

    // Get a non-`const` reference to the second stored variable.
    constexpr auto second() & -> auto&
        requires(size >= 2)
    {
        return this->get<1>();
    }

    // Get a `const` reference to the second stored variable.
    [[nodiscard]]
    constexpr auto second() const& -> auto const&
        requires(size >= 2)
    {
        return this->get<1>();
    }

    // Move the second stored variable.
    constexpr auto second() && -> auto&&
        requires(size >= 2)
    {
        return move(this->get<1>());
    }

    // Move the second stored variable.
    [[nodiscard]]
    constexpr auto second() const&& -> auto&&
        requires(size >= 2)
    {
        return move(this->get<1>());
    }

    // Get a non-`const` reference to the third stored variable.
    constexpr auto third() & -> auto&
        requires(size >= 3)
    {
        return this->get<2>();
    }

    // Get a `const` reference to the third stored variable.
    [[nodiscard]]
    constexpr auto third() const& -> auto const&
        requires(size >= 3)
    {
        return this->get<2>();
    }

    // Move the third stored variable.
    constexpr auto third() && -> auto&&
        requires(size >= 3)
    {
        return move(this->get<2>());
    }

    // Move the third stored variable.
    [[nodiscard]]
    constexpr auto third() const&& -> auto&&
        requires(size >= 3)
    {
        return move(this->get<2>());
    }

    // Get a non-`const` reference to the fourth stored variable.
    constexpr auto fourth() & -> auto&
        requires(size >= 4)
    {
        return this->get<3>();
    }

    // Get a `const` reference to the fourth stored variable.
    [[nodiscard]]
    constexpr auto fourth() const& -> auto const&
        requires(size >= 4)
    {
        return this->get<3>();
    }

    // Move the fourth stored variable.
    constexpr auto fourth() && -> auto&&
        requires(size >= 4)
    {
        return move(this->get<3>());
    }

    // Move the fourth stored variable.
    [[nodiscard]]
    constexpr auto fourth() const&& -> auto&&
        requires(size >= 4)
    {
        return move(this->get<3>());
    }

    // Get a non-`const` reference to the fifth stored variable.
    constexpr auto fifth() & -> auto&
        requires(size >= 5)
    {
        return this->get<4>();
    }

    // Get a `const` reference to the fifth stored variable.
    [[nodiscard]]
    constexpr auto fifth() const& -> auto const&
        requires(size >= 5)
    {
        return this->get<4>();
    }

    // Move the fifth stored variable.
    constexpr auto fifth() && -> auto&&
        requires(size >= 5)
    {
        return move(this->get<4>());
    }

    // Move the fifth stored variable.
    [[nodiscard]]
    constexpr auto fifth() const&& -> auto&&
        requires(size >= 5)
    {
        return move(this->get<4>());
    }
};

// This deduction guide is required for variadic type deduction.
template <typename... types>
tuple(types...) -> tuple<types...>;

}  // namespace cat

template <typename... types>
constexpr auto tuple_cat(types&&... tuples);

namespace std {

// template <typename...>
// struct tuple_size {};

template <typename>
struct tuple_size;

template <typename... in_types>
struct tuple_size<cat::tuple<in_types...>>
    : cat::constant<sizeof...(in_types)> {};

template <typename T>
inline constexpr __SIZE_TYPE__ tuple_size_v = tuple_size<T>::value;

template <__SIZE_TYPE__, typename>
struct tuple_element;

template <__SIZE_TYPE__ in_index, typename... in_types>
struct tuple_element<in_index, cat::tuple<in_types...>> {
    using type =
        typename cat::type_list<in_types...>::template get<cat::idx(in_index)>;
};

template <__SIZE_TYPE__ in_index, typename T>
using tuple_element_t = tuple_element<in_index, T>::type;

}  // namespace std

#include "implementations/tuple_cat.tpp"

// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/arithmetic>
#include <cat/iterator>

// TODO: Write tests for math functions.

namespace cat {

// TODO: Explicit output type is ambiguous when given 2 function arguments.

template <typename T>
constexpr auto min(T value) -> T {
    return value;
}

// Implicit output type `min()`.
template <typename T, typename U, typename... Remaining>
    requires(is_implicitly_convertible<U, T>)
constexpr auto min(T value_1, U value_2, Remaining... remaining) -> T {
    // Recurse through the list of variadic arguments, discarding the larger
    // element each time.
    return (value_1 < value_2) ? min(value_1, remaining...)
                               : min(value_2, remaining...);
}

// TODO: These should have different names and be in `<cat/algorithms>`.

constexpr auto min(is_iterable auto&& iterable) {
    auto iterator = iterable.begin();
    auto maximum = *iterator;
    ++iterator;

    for (; iterator != iterable.end(); ++iterator) {
        maximum = *iterator < maximum ? *iterator : maximum;
    }
    return maximum;
}

template <typename T>
constexpr auto min(is_iterable auto&& iterable) {
    auto iterator = iterable.begin();
    auto maximum = *iterator;
    ++iterator;

    for (; iterator != iterable.end(); ++iterator) {
        maximum = *iterator < maximum ? *iterator : maximum;
    }
    return static_cast<T>(maximum);
}

template <typename T>
constexpr auto max(T value) -> T {
    return value;
}

// Implicit output type `max()`.
template <typename T, typename U, typename... Remaining>
    requires(is_implicitly_convertible<U, T>)
constexpr auto max(T value_1, U value_2, Remaining... remaining) -> T {
    // Recurse through the list of variadic arguments, discarding the larger
    // element each time.
    return (value_1 > value_2) ? max(value_1, remaining...)
                               : max(value_2, remaining...);
}

// TODO: If an `iterable` has `<` and `>` operators, this has unclear intent.

constexpr auto max(is_iterable auto&& iterable) {
    auto iterator = iterable.begin();
    auto maximum = *iterator;
    ++iterator;

    for (; iterator != iterable.end(); ++iterator) {
        maximum = *iterator > maximum ? *iterator : maximum;
    }
    return maximum;
}

template <typename T>
constexpr auto max(is_iterable auto&& iterable) {
    auto iterator = iterable.begin();
    auto maximum = *iterator;
    ++iterator;

    for (; iterator != iterable.end(); ++iterator) {
        maximum = *iterator > maximum ? *iterator : maximum;
    }
    return static_cast<T>(maximum);
}

template <is_signed_integral T>
constexpr auto abs(T value) -> T {
    // `__builtin_abs()` returns `int`, so its type must be coerced to `T`.
    return T(__builtin_abs(to_raw_numeral(value)));
}

constexpr auto abs(is_unsigned_integral auto value) {
    return value;
}

template <is_floating_point T>
constexpr auto abs(T value) -> T {
    // `__builtin_fabs()` returns `double`, so its type must be coerced to `T`.
    return T(__builtin_fabs(to_raw_numeral(value)));
}

// TODO: Support floating point here.
constexpr auto div_ceil(is_integral auto dividend, is_integral auto divisor) {
    return (dividend + divisor - 1) / divisor;
}

// TODO: `div_floor()`.

namespace detail {
    // TODO: Consider a jump-table implementation.
    template <is_integral T, typename U>
    constexpr auto pow_integral(T base, U exponent) -> T {
        if (exponent < 0) {
            // A negative exponent should always make this floor to 0.
            return 0;
        }

        if constexpr (is_signed<T>) {
            base = abs(base);
        }

        // "Exponentation by squaring" algorithm.
        int result = 1;
        while (exponent) {
            if (exponent & 1) {
                result *= base;
            }
            // Since this is guaranteed positive, it can bitshift.
            exponent >>= 1;
            base *= base;
        }

        return result;
    }
}  // namespace detail

template <is_arithmetic T, is_integral U>
constexpr auto pow(T base, U exponent) -> T {
    // Type-erase `Arithmetic`s to prevent redundant code gen.
    using Raw = ToRawArithmetic<T>;
    Raw raw_base = to_raw_numeral(base);
    Raw raw_exponent = to_raw_numeral(exponent);

    if constexpr (is_integral<Raw>) {
        return detail::pow_integral(raw_base, raw_exponent);
        // TODO: Support float and double `pow()` functions.
    } else if constexpr (is_same<Raw, float>) {
        // return __builtin_powf(raw_base, raw_exponent);
    } else if constexpr (is_same<Raw, double>) {
        // return __builtin_pow(raw_base, raw_exponent);
    }
}

template <is_arithmetic T>
constexpr auto is_power_of_two(T value) -> bool {
    return (value & (value - T(1))) == T(0);
}

namespace detail {
    template <is_unsigned_integral T, usize::Raw shift>
    [[gnu::always_inline]] constexpr auto round_to_pow2_part(T value) {
        value |= (value >> shift);

        // Continually shift right until doing so would shift the entire int.
        // i.e., for `uint4`, shift by 1, then 2, then 4, then 8, then 16, and
        // stop before 32.
        // For `uint8`, shift likewise and stop before 64.
        if constexpr ((shift * 2u) < (sizeof(T) * 8)) {
            return round_to_pow2_part<T, shift * 2u>(value);
        } else {
            return value;
        }
    }
}  // namespace detail

template <is_unsigned_integral T>
constexpr auto round_to_pow2(T value) {
    value -= 1u;
    value = detail::round_to_pow2_part<T, 1u>(value);
    return value + 1;
}

template <is_arithmetic T>
auto clamp(T value, T min, T max) -> T {
    T lower_bound = value < min ? min : value;
    return lower_bound > max ? max : lower_bound;
}

}  // namespace cat

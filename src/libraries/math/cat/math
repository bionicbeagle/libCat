// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/iterator>

namespace cat {

// TODO: Put type conversion constraints on these functions.

template <typename T>
constexpr auto min(T&& value) -> T&& {
    return forward<T>(value);
}

// Implicit output type `min()`.
template <typename T, typename U, typename... Remaining>
constexpr auto min(T&& value_1, U&& value_2, Remaining&&... remaining) {
    // Recurse through the list of variadic arguments, discarding the larger
    // element each time.
    return (value_1 < value_2)
               ? cat::min(value_1, forward<Remaining>(remaining)...)
               : cat::min(value_2, forward<Remaining>(remaining)...);
}

// Explicit output type `min()`.
template <typename Out, typename T, typename U, typename... Remaining>
constexpr auto min(T&& value_1, U&& value_2, Remaining&&... remaining) -> Out {
    return static_cast<Out>(
        (value_1 < value_2)
            // Invoke the implicit output `min()`.
            ? cat::min(value_1, forward<Remaining>(remaining)...)
            : cat::min(value_2, forward<Remaining>(remaining)...));
}

constexpr auto min(iterable auto&& iterable) {
    auto iterator = iterable.begin();
    auto maximum = *iterator;
    ++iterator;

    for (; iterator != iterable.end(); ++iterator) {
        maximum = *iterator < maximum ? *iterator : maximum;
    }
    return maximum;
}

template <typename T>
constexpr auto min(iterable auto&& iterable) -> T {
    auto iterator = iterable.begin();
    auto maximum = *iterator;
    ++iterator;

    for (; iterator != iterable.end(); ++iterator) {
        maximum = *iterator < maximum ? *iterator : maximum;
    }
    return static_cast<T>(maximum);
}

template <typename T>
constexpr auto max(T&& value) -> T&& {
    return forward<T>(value);
}

// Implicit output type `max()`.
template <typename T, typename U, typename... Remaining>
constexpr auto max(T&& value_1, U&& value_2, Remaining&&... remaining) {
    // Recurse through the list of variadic arguments, discarding the larger
    // element each time.
    return (value_1 > value_2)
               ? cat::max(value_1, forward<Remaining>(remaining)...)
               : cat::max(value_2, forward<Remaining>(remaining)...);
}

// Explicit output type `max()`.
template <typename Out, typename T, typename U, typename... Remaining>
constexpr auto max(T&& value_1, U&& value_2, Remaining&&... remaining) -> Out {
    return static_cast<Out>(
        (value_1 > value_2)
            // Invoke the implicit output `max()`.
            ? cat::max(value_1, forward<Remaining>(remaining)...)
            : cat::max(value_2, forward<Remaining>(remaining)...));
}

constexpr auto max(iterable auto&& iterable) {
    auto iterator = iterable.begin();
    auto maximum = *iterator;
    ++iterator;

    for (; iterator != iterable.end(); ++iterator) {
        maximum = *iterator > maximum ? *iterator : maximum;
    }
    return maximum;
}

template <typename T>
constexpr auto max(iterable auto&& iterable) -> T {
    auto iterator = iterable.begin();
    auto maximum = *iterator;
    ++iterator;

    for (; iterator != iterable.end(); ++iterator) {
        maximum = *iterator > maximum ? *iterator : maximum;
    }
    return static_cast<T>(maximum);
}

// TODO: Add a `cat::Numeral` `concept`.
constexpr auto abs(auto&& value) {
    // TODO: Check if the builtin `abs()` function family is optimized better.
    return value < 0 ? value * -1 : value;
}

}  // namespace cat

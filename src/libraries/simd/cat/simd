// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

// The Intel-style SIMD syntax is completely arbitrary in GCC. GNU implemented
// it with wrapper libraries around their own more basic, arguably more
// reasonable, compiler intrinsics which already understand arithmetic
// operators, loads, sets, and many other common operations that Intel's wrap
// inside a cumbersome interface. Then, authors of a SIMD wrapper library wrap
// *those* wrappers with new ones to enhance their quality of life with
// features that the basic compiler intrinsics largely already had. There are
// three layers of technology to this for no reason!

// To streamline this, libCat uses the intrinsics and attributes which GNU
// already provides, and wraps it in one thin layer of technology.

#include <cat/utility>

#include "cat/detail/simd_avx2_fwd.hpp"
#include "cat/detail/simd_sse42.hpp"

namespace cat {

// ABI tags for `Simd`. These are used for providing an extensible API by
// overloading functions for `Simd` objects with different ABI tags, as well as
// providing a type-safe API by requiring compatible ABI tags between `Simd`
// operands.

// `FixedSizeAbi` is a portable SIMD ABI that can be expected to work across
// any supported build target, so long as `in_lanes` does not exceed that
// target's maximum vector size.
template <typename T, ssize in_lanes>
struct FixedSizeAbi {
    using Scalar = T;

    // Produce a similar `FixedSizeAbi` for type `U`.
    template <typename U>
    using MakeAbi = FixedSizeAbi<U, in_lanes * ssizeof(T) / ssizeof(U)>;

    FixedSizeAbi() = delete;

    // TODO: Select `TargetAbi` portably.
    using TargetAbi = Avx2Abi<T>;
    static constexpr ssize lanes = in_lanes;
    static constexpr ssize size = lanes * ssizeof(T);
    // TODO: Make the alignment generally correct and efficient.
    static constexpr usize alignment = 32u;
};

// `NativeAbi` is a portable SIMD ABI that can be expected to work on any
// supported build target.
template <typename T>
struct NativeAbi {
    using Scalar = T;

    // Produce a similar `NativeAbi` for type `U`.
    template <typename U>
    using MakeAbi = NativeAbi<U>;

    NativeAbi() = delete;

    // TODO: Select `TargetAbi` portably.
    using TargetAbi = Avx2Abi<T>;
    static constexpr ssize size = TargetAbi::size;
    static constexpr ssize lanes = TargetAbi::lanes;
    static constexpr usize alignment = TargetAbi::alignment;
};

namespace detail {
    // Cast a `NativeAbi` or `FixedSizeAbi` vector into its underlying
    // representation.
    template <typename Abi, typename T>
    constexpr auto native_cast(Simd<Abi, T> vector) {
        return static_cast<Simd<typename NativeAbi<T>::TargetAbi, T>>(vector);
    }
}  // namespace detail

template <typename InAbi, typename T>
    requires(is_same<typename InAbi::Scalar, T>)
class alignas(InAbi::alignment.raw) Simd {
    using Vector = Simd<InAbi, T>;
    // GCC does not support `bool` vectors, so it is mapped to `unsigned char`.
    using MappedT = Conditional<is_same<T, bool>, unsigned char, T>;

    struct UnalignedAbi {
        using Scalar = T;
        static constexpr ssize size = InAbi::size;
        static constexpr ssize lanes = InAbi::lanes;
        // By setting `alignment` to 1 here, and by extension in the definition
        // of `Simd::Raw` produced by this ABI, GCC produces unaligned SIMD
        // instructions for operations on this ABI.
        static constexpr usize alignment = 1u;
    };
    using UnalignedVector = Simd<UnalignedAbi, T>;

  public:
    using Scalar = T;
    using Abi = InAbi;
    using Mask = SimdMask<Abi, T>;

    // `gnu::vector_size` is a GCC attribute that represents SIMD data-types.
    // `gnu::aligned` is a GCC attribute that guarantees alignment for all
    // instances of a type.
    using Raw [[gnu::vector_size(InAbi::size.raw),
                gnu::aligned(InAbi::alignment.raw)]] = MappedT;

    constexpr Simd() = default;

    constexpr Simd(Vector const& operand) = default;

    constexpr Simd(Vector&& operand) = default;

    // This cannot be passed by reference.
    constexpr Simd(UnalignedVector operand) : raw(operand.raw) {
    }

    constexpr Simd(UnalignedVector&& operand)
        : raw(forward<UnalignedVector>(operand.raw)) {
    }

    constexpr Simd(Raw const& values) : raw(values) {
    }

    constexpr Simd(Raw&& values) : raw(forward<Raw>(values)) {
    }

    // Construct all lanes as `value`.
    template <typename U>
        requires(is_convertible<U, T>)
    constexpr Simd(U value) {
        this->fill(static_cast<T>(value));
    }

    // Construct from a variadic argument list.
    template <typename... Us>
        requires(ssizeof_pack<Us...>() > 1 &&
                 ssizeof_pack<Us...>() == InAbi::lanes)
    constexpr Simd(Us&&... values)
        // GCC 13 requires curly braces here.
        : raw(Raw{static_cast<T>(forward<Us>(values))...}) {
    }

    // Construct from a constant list, such as `value_list` or
    // `integer_sequence`.
    // TODO: Should this be removed, along with `cat::List`'s?
    template <typename U, U... Us>
        requires(ssizeof_pack<U, Us...> == InAbi::lanes)
    constexpr Simd(ValueList<U, Us...>) : raw(Raw(static_cast<T>(Us)...)) {
    }

    // Any ABI for which this `Simd` is equal to in size and overaligned can
    // be explicitly converted to.
    template <typename OtherAbi>
        requires(OtherAbi::size == Abi::size &&
                 OtherAbi::alignment <= Abi::alignment &&
                 OtherAbi::lanes == Abi::lanes)
    explicit constexpr operator Simd<OtherAbi, T>() {
        return this->raw;
    }

    // Any ABI for which this `Simd` is equal to in size and overaligned can
    // be explicitly converted to, and any underlying type for which this
    // `Simd`'s is compatible with, can be converted to.
    template <typename OtherAbi, typename U>
        requires(is_convertible<U, T>&& OtherAbi::size == Abi::size &&
                 OtherAbi::alignment <= Abi::alignment &&
                 OtherAbi::lanes == Abi::lanes)
    explicit constexpr operator Simd<OtherAbi, U>() {
        return __builtin_convertvector(this->raw,
                                       typename Simd<OtherAbi, U>::Raw);
    }

    // Copy-assign the raw value of a `Simd` to this.
    constexpr auto operator=(Vector const& operand) -> Vector& {
        this->raw = operand.raw;
        return *this;
    }

    // Move-assign the raw value of another `Simd` into this.
    constexpr auto operator=(Vector&& operand) -> Vector& {
        this->raw = move(operand).raw;
        return *this;
    }

    // Compare equality for each lane to another `Simd`'s lanes, and store the
    // results in a new `Simd`.
    [[nodiscard]] constexpr auto operator==(Vector const& operand) const
        -> SimdMask<Abi, T> {
        return this->raw == operand.raw;
    }

    // Compare equality for each lane to `value`, and store the results in a new
    // `Simd`.
    [[nodiscard]] constexpr auto operator==(T const& operand) const
        -> SimdMask<Abi, T> {
        return *this == Vector::filled(operand);
    }

    // Compare non-equality for each lane to another `Simd`'s lanes, and store
    // the results in a new `Simd`.
    [[nodiscard]] constexpr auto operator!=(Vector const& operand) const
        -> SimdMask<Abi, T> {
        return this->raw != operand.raw;
    }

    // Compare non-equality for each lane to `value`, and store the results in a
    // new `Simd`.
    [[nodiscard]] constexpr auto operator!=(T const& operand) const
        -> SimdMask<Abi, T> {
        return *this != Vector::filled(operand);
    }

    // Compare greater-than for each lane to another `Simd`'s lanes, and store
    // the results in a new `Simd`.
    [[nodiscard]] constexpr auto operator>(Vector const& operand) const
        -> SimdMask<Abi, T> {
        return this->raw > operand.raw;
    }

    // Compare greater-than for each lane to `value`, and store the results in a
    // new `Simd`.
    [[nodiscard]] constexpr auto operator>(T const& operand) const
        -> SimdMask<Abi, T> {
        return *this > Vector::filled(operand);
    }

    // Compare greater-than-or-equal for each lane to another `Simd`'s lanes,
    // and store the results in a new `Simd`.
    constexpr auto operator>=(Vector const& operand) const -> Vector {
        return this->raw >= operand.raw;
    }

    // Compare greater-than-or-equal for each lane to `value`, and store the
    // results in a new `Simd`.
    [[nodiscard]] constexpr auto operator>=(T const& operand) const
        -> SimdMask<Abi, T> {
        return *this >= Vector::filled(operand);
    }

    // Compare less-than for each lane to another `Simd`'s lanes, and store the
    // results in a new `Simd`.
    [[nodiscard]] constexpr auto operator<(Vector const& operand) const
        -> SimdMask<Abi, T> {
        return this->raw < operand.raw;
    }

    // Compare less-than for each lane to `value`, and store the results in a
    // new `Simd`.
    [[nodiscard]] constexpr auto operator<(T const& operand) const
        -> SimdMask<Abi, T> {
        return *this < Vector::filled(operand);
    }

    // Compare less-than-or-equal for each lane to another `Simd`'s lanes,
    // and store the results in a new `Simd`.
    constexpr auto operator<=(Vector const& operand) const -> Vector {
        return this->raw <= operand.raw;
    }

    // Compare less-than-or-equal for each lane to `value`, and store the
    // results in a new `Simd`.
    [[nodiscard]] constexpr auto operator<=(T const& operand) const
        -> SimdMask<Abi, T> {
        return *this <= Vector::filled(operand);
    }

    // TODO: These should be `friend`.
    // TODO: Add more comments to these operators.
    [[nodiscard]] constexpr auto operator+(Vector const& operand) const
        -> Vector {
        return this->raw + operand.raw;
    }
    constexpr auto operator+=(Vector const& operand) -> Vector& {
        this->raw = this->raw + operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator-(Vector const& operand) const
        -> Vector {
        return this->raw - operand.raw;
    }
    constexpr auto operator-=(Vector const& operand) -> Vector& {
        this->raw = this->raw - operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator*(Vector const& operand) const
        -> Vector {
        return this->raw * operand.raw;
    }
    constexpr auto operator*=(Vector const& operand) -> Vector& {
        this->raw = this->raw * operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator/(Vector const& operand) const
        -> Vector {
        return this->raw * operand.raw;
    }
    constexpr auto operator/=(Vector const& operand) -> Vector& {
        this->raw = this->raw / operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator&(Vector const& operand) const
        -> Vector {
        return this->raw & operand.raw;
    }
    constexpr auto operator&=(Vector const& operand) -> Vector& {
        this->raw = this->raw & operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator|(Vector const& operand) const
        -> Vector {
        return this->raw | operand.raw;
    }
    constexpr auto operator|=(Vector const& operand) -> Vector& {
        this->raw = this->raw | operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator%(Vector const& operand) const
        -> Vector {
        return this->raw % operand.raw;
    }
    constexpr auto operator%=(Vector const& operand) -> Vector& {
        this->raw = this->raw % operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator<<(Vector const& operand) const
        -> Vector {
        return this->raw << operand.raw;
    }
    constexpr auto operator<<=(Vector const& operand) -> Vector& {
        this->raw = this->raw << operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator>>(Vector const& operand) const
        -> Vector {
        return this->raw >> operand.raw;
    }
    constexpr auto operator>>=(Vector const& operand) -> Vector& {
        this->raw = this->raw << operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator^(Vector const& operand) const
        -> Vector {
        return this->raw ^ operand.raw;
    }
    constexpr auto operator^=(Vector const& operand) -> Vector& {
        this->raw = this->raw ^ operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator[](ssize index) -> T& {
        return this[index];
    }

    [[nodiscard]] constexpr auto operator[](ssize index) const -> T& {
        return this[index];
    }

    template <typename U>
    constexpr auto fill(U value)
        -> Vector& requires(is_implicitly_convertible<U, Scalar>) {
        Scalar fill_value = static_cast<Scalar>(value);
        if constexpr (lanes == 2) {
            this->raw = Raw(fill_value, fill_value);
        } else if constexpr (lanes == 4) {
            this->raw = Raw(fill_value, fill_value, fill_value, fill_value);
        } else if constexpr (lanes == 8) {
            this->raw = Raw{fill_value, fill_value, fill_value, fill_value,
                            fill_value, fill_value, fill_value, fill_value};
        } else if constexpr (lanes == 16) {
            this->raw = Raw{fill_value, fill_value, fill_value, fill_value,
                            fill_value, fill_value, fill_value, fill_value,
                            fill_value, fill_value, fill_value, fill_value,
                            fill_value, fill_value, fill_value, fill_value};
        } else if constexpr (lanes == 32) {
            this->raw =
                Raw{fill_value, fill_value, fill_value, fill_value, fill_value,
                    fill_value, fill_value, fill_value, fill_value, fill_value,
                    fill_value, fill_value, fill_value, fill_value, fill_value,
                    fill_value, fill_value, fill_value, fill_value, fill_value,
                    fill_value, fill_value, fill_value, fill_value, fill_value,
                    fill_value, fill_value, fill_value, fill_value, fill_value,
                    fill_value, fill_value};
        }
        return *this;
    }

    // Construct a `Simd` with every lane initialized to `value`.
    template <typename U>
    [[nodiscard]] static constexpr auto filled(U value) -> Vector
        requires(is_convertible<U, T>) {
        return Vector().fill(value);
    }

    // Load a vector from `data`, aligned to `Abi::alignment`.
    constexpr auto load_aligned(T const* p_data) -> Vector& {
        this->raw =
            static_cast<Vector const*>(static_cast<void const*>(p_data))->raw;
        return *this;
    }

    // Load a vector from `data` with any alignment. This may be slower than
    // `.loaded_aligned()`.
    constexpr auto load_unaligned(T const* p_data) -> Vector& {
        this->raw = static_cast<UnalignedVector const*>(
                        static_cast<void const*>(p_data))
                        ->raw;
        return *this;
    }

    // Load a vector from `data`.
    constexpr auto load(T const* p_data) -> Vector& {
        if constexpr (Abi::alignment == alignof(T)) {
            return this->load_aligned(p_data);
        } else {
            return this->load_unaligned(p_data);
        }
    }

    // Construct a `Simd` loaded from the address `data`, aligned to
    // `Abi::alignment`.
    [[nodiscard]] static constexpr auto loaded_aligned(T const* p_data)
        -> Vector {
        return *bit_cast<Vector const*>(p_data);
    }

    // Construct a `Simd` loaded from the address `data` with any alignment.
    // This may be slower than `.loaded_aligned()`.
    // Without this `no_sanitize_address` attribute, Asan reports a false
    // positive when loading a `char const*` from the `.strings` segment,
    // because vector loads potentially index out of bounds.
    [[nodiscard, gnu::no_sanitize_address]] static constexpr auto
    loaded_unaligned(T const* p_data) -> Vector {
        return *bit_cast<UnalignedVector const*>(p_data);
    }

    // Construct a `Simd` loaded from the address `data`.
    [[nodiscard]] static constexpr auto loaded(T const* p_data) {
        if constexpr (Abi::alignment == alignof(T)) {
            return loaded_aligned(p_data);
        } else {
            return loaded_unaligned(p_data);
        }
    }

    static constexpr ssize size = InAbi::size;
    static constexpr ssize lanes = InAbi::lanes;
    static constexpr usize alignment = InAbi::alignment;
    Raw raw;
};

template <typename InAbi, typename T>
class alignas(InAbi::template MakeAbi<bool>::alignment.raw) SimdMask {
  public:
    using Abi = InAbi;
    using Scalar = bool;

    // GCC vectors cannot hold a `bool`, so they must hold `char`.
    using Vector = Simd<typename Abi::template MakeAbi<char>, char>;
    using Raw = typename Vector::Raw;

  private:
    using Mask = SimdMask<Abi, T>;

    // clangd produces a false diagnostic if these are declared at the bottom
    // of this struct.
    static constexpr ssize lanes = Abi::lanes;
    static constexpr usize alignment = Abi::alignment;

  public:
    constexpr SimdMask() = default;

    constexpr SimdMask(SimdMask<InAbi, T> const& operand) = default;

    constexpr SimdMask(SimdMask<InAbi, T>&& operand) = default;

    constexpr SimdMask(Raw const& value) : raw(value) {
    }

    constexpr SimdMask(Raw&& value) : raw(move(value)) {
    }

    // Construct all lanes as `value`.
    constexpr SimdMask(bool value) {
        this->fill(value);
    }

    // Construct from a variadic argument list.
    template <typename... bools>
    constexpr SimdMask(bools&&... values) requires(sizeof...(values) > 1 &&
                                                   sizeof...(values) ==
                                                       this->lanes.raw)
        : raw(static_cast<unsigned char>(forward<bool>(values))...) {
    }

    // Construct from a constant list, such as `value_list` or
    // `integer_sequence`.
    template <bool... bools>
    constexpr SimdMask(ValueList<bool, bools...> const values) requires(
        values.size == this->lanes)
        : raw(static_cast<unsigned char>(bools)...) {
    }

    // Any ABI for which this `Simd` is equal to in size and overaligned can
    // be explicitly converted to.
    template <typename OtherAbi>
    explicit constexpr operator SimdMask<OtherAbi, T>() requires(
        OtherAbi::size == Abi::size && OtherAbi::alignment <= Abi::alignment &&
        OtherAbi::lanes == Abi::lanes) {
        return this->raw;
    }

    // Any ABI for which this `Simd` is equal to in size and overaligned can
    // be explicitly converted to, and any underlying type for which this
    // `Simd`'s is compatible with, can be converted to.
    template <typename OtherAbi, typename U>
    explicit constexpr operator SimdMask<OtherAbi, U>() requires(
        is_convertible<U, T>&& OtherAbi::size == Abi::size &&
        OtherAbi::alignment <= Abi::alignment &&
        OtherAbi::lanes == Abi::lanes) {
        return __builtin_convertvector(this->raw,
                                       typename SimdMask<OtherAbi, U>::Raw);
    }

    // Copy-assign the raw value of a `Simd` to this.
    constexpr auto operator=(Mask const& operand) -> Mask& {
        this->raw = operand.raw;
        return *this;
    }

    // Move-assign the raw value of another `Simd` into this.
    constexpr auto operator=(Mask&& operand) -> Mask& {
        this->raw = move(operand).raw;
        return *this;
    }

    // Compare equality for each lane to another `Simd`'s lanes, and store the
    // results in a new `Simd`.
    [[nodiscard]] constexpr auto operator==(Mask const& operand) const -> Mask {
        return this->raw == operand.raw;
    }

    // Compare non-equality for each lane to another `Simd`'s lanes, and store
    // the results in a new `Simd`.
    [[nodiscard]] constexpr auto operator!=(Mask const& operand) const -> Mask {
        return this->raw != operand.raw;
    }

    [[nodiscard]] constexpr auto operator&(Mask const& operand) const -> Mask {
        return this->raw & operand.raw;
    }
    constexpr auto operator&=(Mask const& operand) -> Mask& {
        this->raw = this->raw & operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator|(Mask const& operand) const -> Mask {
        return this->raw | operand.raw;
    }
    constexpr auto operator|=(Mask const& operand) -> Mask& {
        this->raw = this->raw | operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator%(Mask const& operand) const -> Mask {
        return this->raw % operand.raw;
    }
    constexpr auto operator%=(Mask const& operand) -> Mask& {
        this->raw = this->raw % operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator<<(Mask const& operand) const -> Mask {
        return this->raw << operand.raw;
    }
    constexpr auto operator<<=(Mask const& operand) -> Mask& {
        this->raw = this->raw << operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator>>(Mask const& operand) const -> Mask {
        return this->raw >> operand.raw;
    }
    constexpr auto operator>>=(Mask const& operand) -> Mask& {
        this->raw = this->raw << operand.raw;
        return *this;
    }

    [[nodiscard]] constexpr auto operator[](ssize index) -> bool& {
        return static_cast<bool&>(this[index]);
    }

    [[nodiscard]] constexpr auto operator[](ssize index) const -> T& {
        return static_cast<bool&>(this[index]);
    }

    // Evaluate true if every lane is non-zero.
    constexpr auto all_of() const -> bool {
        return simd_all_of(*this);
    }

    // Evaluate true if any lanes are non-zero.
    constexpr auto any_of() const -> bool {
        return simd_any_of(*this);
    }

    // Evaluate true if every lane is zero.
    constexpr auto none_of() const -> bool {
        return !(this->any_of());
    }

    // Map every lane in this mask to one bit in a bitset.
    constexpr auto bitset() const -> Bitset<Abi::size> {
        return simd_to_bitset(*this);
    }

    constexpr auto fill(bool value) -> Mask {
        if constexpr (lanes == 2) {
            this->raw = Raw(value, value);
        } else if constexpr (lanes == 4) {
            this->raw = Raw(value, value, value, value);
        } else if constexpr (lanes == 8) {
            this->raw =
                Raw(value, value, value, value, value, value, value, value);
        } else if constexpr (lanes == 16) {
            this->raw =
                Raw{value, value, value, value, value, value, value, value,
                    value, value, value, value, value, value, value, value};
        } else if constexpr (lanes == 32) {
            this->raw =
                Raw{value, value, value, value, value, value, value, value,
                    value, value, value, value, value, value, value, value,
                    value, value, value, value, value, value, value, value,
                    value, value, value, value, value, value, value, value};
        }
        return *this;
    }

    // Construct a `Simd` with every lane initialized to `value`.
    [[nodiscard]] static constexpr auto filled(bool const value) -> Mask {
        return Mask().fill(value);
    }

    // Load a vector from `data`, aligned to `Abi<bool>::alignment`.
    constexpr auto load(bool const* p_data) -> Mask& {
        this->raw =
            static_cast<Mask const*>(static_cast<void const*>(p_data))->raw;
        return *this;
    }

    // Construct a `Simd` loaded from the address `data`.
    [[nodiscard]] static constexpr auto loaded(bool const* p_data) {
        return Mask().load(p_data);
    }

    Raw raw;
};

template <typename Abi, typename T>
constexpr auto raw_simd_cast(Simd<Abi, T> const& value) -> T {
    return value.raw;
}

template <typename Abi, typename T>
constexpr auto raw_simd_cast(SimdMask<Abi, T> const& value) -> T {
    return value.raw;
}

template <typename T, ssize lanes>
using FixedSizeSimd = Simd<FixedSizeAbi<T, lanes>, T>;

template <typename T, ssize lanes>
using FixedSizeSimdMask = SimdMask<FixedSizeAbi<T, lanes>, T>;

template <typename T>
using NativeSimd = Simd<NativeAbi<T>, T>;

template <typename T>
using NativeSimdMask = SimdMask<NativeAbi<T>, T>;

// TODO: Add GCC 13 `__bf16` vectors.

using int1x2 = FixedSizeSimd<int1::Raw, 2>;    // NOLINT
using int1x4 = FixedSizeSimd<int1::Raw, 4>;    // NOLINT
using int1x8 = FixedSizeSimd<int1::Raw, 8>;    // NOLINT
using int1x16 = FixedSizeSimd<int1::Raw, 16>;  // NOLINT
using int1x32 = FixedSizeSimd<int1::Raw, 32>;  // NOLINT
using int1x_ = NativeSimd<int1::Raw>;          // NOLINT

using uint1x2 = FixedSizeSimd<uint1::Raw, 2>;    // NOLINT
using uint1x4 = FixedSizeSimd<uint1::Raw, 4>;    // NOLINT
using uint1x8 = FixedSizeSimd<uint1::Raw, 8>;    // NOLINT
using uint1x16 = FixedSizeSimd<uint1::Raw, 16>;  // NOLINT
using uint1x32 = FixedSizeSimd<uint1::Raw, 32>;  // NOLINT
using uint1x_ = NativeSimd<uint1::Raw>;          // NOLINT

// TODO: Think over the string vectorization API.
// TODO: Support `char2x_` vector family.
// Strings need their own vectors.
using char1x16 = Sse42Simd<char>;  // NOLINT
using char1x32 = Avx2Simd<char>;   // NOLINT
using char1x_ = Avx2Simd<char>;    // NOLINT

using int2x2 = FixedSizeSimd<int2::Raw, 2>;    // NOLINT
using int2x4 = FixedSizeSimd<int2::Raw, 4>;    // NOLINT
using int2x8 = FixedSizeSimd<int2::Raw, 8>;    // NOLINT
using int2x16 = FixedSizeSimd<int2::Raw, 16>;  // NOLINT
using int2x_ = NativeSimd<int2::Raw>;          // NOLINT

using uint2x2 = FixedSizeSimd<uint2::Raw, 2>;    // NOLINT
using uint2x4 = FixedSizeSimd<uint2::Raw, 4>;    // NOLINT
using uint2x8 = FixedSizeSimd<uint2::Raw, 8>;    // NOLINT
using uint2x16 = FixedSizeSimd<uint2::Raw, 16>;  // NOLINT
using uint2x_ = NativeSimd<uint2::Raw>;          // NOLINT

using int4x2 = FixedSizeSimd<int4::Raw, 2>;  // NOLINT
using int4x4 = FixedSizeSimd<int4::Raw, 4>;  // NOLINT
using int4x8 = FixedSizeSimd<int4::Raw, 8>;  // NOLINT
using int4x_ = NativeSimd<int4::Raw>;        // NOLINT

using uint4x2 = FixedSizeSimd<uint4::Raw, 2>;  // NOLINT
using uint4x4 = FixedSizeSimd<uint4::Raw, 4>;  // NOLINT
using uint4x8 = FixedSizeSimd<uint4::Raw, 8>;  // NOLINT
using uint4x_ = NativeSimd<uint4::Raw>;        // NOLINT

using int8x2 = FixedSizeSimd<int8::Raw, 2>;  // NOLINT
using int8x4 = FixedSizeSimd<int8::Raw, 4>;  // NOLINT
using int8x_ = NativeSimd<int8::Raw>;        // NOLINT

using uint8x2 = FixedSizeSimd<uint8::Raw, 2>;  // NOLINT
using uint8x4 = FixedSizeSimd<uint8::Raw, 4>;  // NOLINT
using uint8x_ = NativeSimd<uint8::Raw>;        // NOLINT

using float4x2 = FixedSizeSimd<float4::Raw, 2>;  // NOLINT
using float4x4 = FixedSizeSimd<float4::Raw, 4>;  // NOLINT
using float4x8 = FixedSizeSimd<float4::Raw, 8>;  // NOLINT
using float4x_ = NativeSimd<float4::Raw>;        // NOLINT

using float8x2 = FixedSizeSimd<float8::Raw, 2>;  // NOLINT
using float8x4 = FixedSizeSimd<float8::Raw, 4>;  // NOLINT
using float8x_ = NativeSimd<float8::Raw>;        // NOLINT

// TODO: Support `bool` family vectors.

enum class StringControl : unsigned char {
    // Unsigned 1-byte characters.
    unsigned_byte = 0x00,
    // Unsigned 2-byte characters.
    unsigned_word = 0x01,
    // Signed 1-byte characters.
    signed_byte = 0x02,
    // Signed 2-byte characters.
    signed_word = 0x03,
    // Compare if any characters are equal.
    compare_equal_any = 0x00,
    // Compare ranges.
    compare_ranges = 0x04,
    // Compare if every character is equal.
    compare_equal_each = 0x08,
    // Compare equal ordered.
    compare_equal_ordered = 0x0c,
    // Polarity.
    positive_polarity = 0x00,
    // Negate the results.
    negative_polarity = 0x10,
    masked_positive_polarity = 0x20,
    // Negate the results only before the end of the string.
    masked_negative_polarity = 0x30,
    // Return the least significant bit.
    least_significant = 0x00,
    // Return the most significant bit.
    most_significant = 0x40,
    // Return a bit mask.
    bit_mask = 0x00,
    // Return a byte/word mask.
    unit_mask = 0x40,
};

// TODO: Generalize this.
constexpr auto operator|(StringControl flag_1, StringControl flag_2)
    -> StringControl {
    return static_cast<StringControl>(static_cast<unsigned char>(flag_1) |
                                      static_cast<unsigned char>(flag_2));
}

// TODO: Use a vector concept.
auto shuffle(auto in_vector, auto mask);

template <StringControl control_mask>
constexpr auto compare_implicit_length_strings(auto const& vector_1,
                                               auto const& vector_2) -> bool;

template <StringControl control_mask>
constexpr auto compare_implicit_length_strings_return_index(
    auto const& vector_1, auto const& vector_2) -> int4;

// TODO: Add `mfence` and `lfence`.
void sfence();
void zero_avx_registers();
void zero_upper_avx_registers();

// Constants for prefetch.
enum class PrefetchHint : int {
    // Prefetch data into non-temporal cache structure and into a location close
    // to the processor, minimizing cache pollution.
    non_temporal = 0,
    // Prefetch data into level 3 cache and higher, or an
    // implementation-specific choice.
    temporal_2 = 1,
    // Prefetch data into level 2 cache and higher.
    temporal_1 = 2,
    // Prefetch data into all levels of the cache hierarchy.
    temporal_0 = 3,
};

template <PrefetchHint hint>
void prefetch(void const* p_source) {
    __builtin_prefetch(p_source, static_cast<int>(hint) & 0x4 >> 2,
                       static_cast<int>(hint) & 0x3);
}

void prefetch_for_one_read(auto const* p_vector) {
    prefetch<PrefetchHint::non_temporal>(p_vector);
}

void prefetch_close(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_0>(p_vector);
}

void prefetch_mid(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_1>(p_vector);
}

void prefetch_far(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_2>(p_vector);
}
void prefetch_for_modify(auto const* p_vector) {
    prefetch<PrefetchHint::temporal_0>(p_vector);
}

template <typename T>
void stream_in(void* p_destination, T const* p_source);

// Dispatch `any_of()` to the native SIMD ABI.
template <typename T>
[[nodiscard]] auto simd_any_of(SimdMask<NativeAbi<T>, T> mask) -> bool {
    return simd_all_of(detail::native_cast(mask));
}

// Dispatch `all_of()` to the native SIMD ABI.
template <typename T>
[[nodiscard]] auto simd_all_of(SimdMask<NativeAbi<T>, T> mask) -> bool {
    return simd_all_of(detail::native_cast(mask));
}

// TODO: Support all ABIs.
// Dispatch `simd_to_bitset` to the native SIMD ABI.
template <typename T>
[[nodiscard]] auto simd_to_bitset(SimdMask<NativeAbi<T>, T> mask)
    -> Bitset<NativeAbi<T>::size> {
    return simd_to_bitset(detail::native_cast(mask));
}

// TODO: __builtin_cpu_init()
// must be called before these.

auto is_mmx_supported() -> bool;
auto is_sse1_supported() -> bool;
auto is_sse2_supported() -> bool;
auto is_sse3_supported() -> bool;
auto is_ssse3_supported() -> bool;
auto is_sse4_1_supported() -> bool;
auto is_sse4_2_supported() -> bool;
auto is_avx_supported() -> bool;
auto is_avx2_supported() -> bool;
auto is_avx512f_supported() -> bool;
auto is_avx512vl_supported() -> bool;

}  // namespace cat

using cat::char1x16;
using cat::char1x32;
using cat::char1x_;
using cat::float4x2;
using cat::float4x4;
using cat::float4x8;
using cat::float4x_;
using cat::float8x2;
using cat::float8x4;
using cat::float8x_;
using cat::int1x16;
using cat::int1x2;
using cat::int1x32;
using cat::int1x4;
using cat::int1x8;
using cat::int1x_;
using cat::int2x16;
using cat::int2x2;
using cat::int2x4;
using cat::int2x8;
using cat::int2x_;
using cat::int4x2;
using cat::int4x4;
using cat::int4x8;
using cat::int4x_;
using cat::int8x2;
using cat::int8x4;
using cat::int8x_;
using cat::uint1x16;
using cat::uint1x2;
using cat::uint1x32;
using cat::uint1x4;
using cat::uint1x8;
using cat::uint1x_;
using cat::uint2x16;
using cat::uint2x2;
using cat::uint2x4;
using cat::uint2x8;
using cat::uint2x_;
using cat::uint4x2;
using cat::uint4x4;
using cat::uint4x8;
using cat::uint4x_;
using cat::uint8x2;
using cat::uint8x4;
using cat::uint8x_;

#include "./implementations/compare_implicit_length_strings.tpp"
#include "./implementations/compare_implicit_length_strings_return_index.tpp"
#include "./implementations/shuffle.tpp"
#include "./implementations/stream_in.tpp"

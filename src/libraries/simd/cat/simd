// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

// The Intel-style SIMD syntax is completely arbitrary in GCC. GNU implemented
// it with wrapper libraries around their own more basic, arguably more
// reasonable, compiler intrinsics which already understand arithmetic
// operators, loads, sets, and many other common operations that Intel's wrap
// inside a cumbersome interface. Then, authors of a SIMD wrapper library wrap
// *those* wrappers with new ones to enhance their quality of life with
// features that the basic compiler intrinsics largely already had. There are
// three layers of technology to this for no reason!

// To streamline this, libCat uses the intrinsics and attributes which GNU
// already provides, and wraps it in one thin layer of technology.

#include <cat/utility>

#include "cat/detail/simd_avx2_fwd.hpp"
#include "cat/detail/simd_sse42.hpp"

namespace cat {

// ABI tags for `simd`. These are used for providing an extensible API by
// overloading functions for `simd` objects with different ABI tags, as well as
// providing a type-safe API by requiring compatible ABI tags between `simd`
// operands.

// `fixed_size_abi` is a portable SIMD ABI that can be expected to work across
// any supported build target, so long as `in_lanes` does not exceed that
// target's maximum vector size.
template <typename T, uword in_lanes>
struct fixed_size_abi {
    using scalar_type = T;

    // Produce a similar `fixed_size_abi` for type `U`.
    template <typename U>
    using make_abi_type = fixed_size_abi<U, in_lanes * sizeof(T) / sizeof(U)>;

    fixed_size_abi() = delete;

    // TODO: Select `target_abi` portably.
    using target_abi = x64::avx2_abi<T>;
    static constexpr uword lanes = in_lanes;
    // TODO: Make the alignment generally correct and efficient.
    static constexpr uword alignment = 32u;
    static constexpr idx size = static_cast<idx>(lanes * sizeof(T));
};

// `native_abi` is a portable SIMD ABI that can be expected to work on any
// supported build target.
template <typename T>
struct native_abi {
    using scalar_type = T;

    // Produce a similar `native_abi` for type `U`.
    template <typename U>
    using make_abi_type = native_abi<U>;

    native_abi() = delete;

    // TODO: Select `target_abi` portably.
    using target_abi = x64::avx2_abi<T>;
    static constexpr idx size = target_abi::size;
    static constexpr uword lanes = target_abi::lanes;
    static constexpr uword alignment = target_abi::alignment;
};

namespace detail {
    // Cast a `native_abi` or `fixed_size_abi` vector into its underlying
    // representation.
    template <typename abi_type, typename T>
    constexpr auto native_cast(simd<abi_type, T> vector) {
        return static_cast<simd<typename native_abi<T>::target_abi, T>>(vector);
    }
}  // namespace detail

template <typename in_abi, typename T>
    requires(is_same<typename in_abi::scalar_type, T>)
class alignas(in_abi::alignment.raw) simd {
    using type = simd<in_abi, T>;
    // GCC does not support `bool` vectors, so it is mapped to `unsigned char`.
    using mapped_type = conditional<is_same<T, bool>, unsigned char, T>;

    struct unaligned_abi {
        using scalar_type = T;
        static constexpr idx size = in_abi::size;
        static constexpr uword lanes = in_abi::lanes;
        // By setting `alignment` to 1 here, and by extension in the definition
        // of `simd::raw_type` produced by this ABI, GCC produces unaligned SIMD
        // instructions for operations on this ABI.
        static constexpr uword alignment = 1u;
    };

    using unaligned_vector = simd<unaligned_abi, T>;

  public:
    using scalar_type = T;
    using abi_type = in_abi;
    using mask_type = simd_mask<abi_type, T>;

    // `gnu::vector_size` is a GCC attribute that represents SIMD data-types.
    // `gnu::aligned` is a GCC attribute that guarantees alignment for all
    // instances of a type.
    using raw_type [[gnu::vector_size(in_abi::size.raw),
                     gnu::aligned(in_abi::alignment.raw)]] = mapped_type;

    constexpr simd() = default;

    constexpr simd(type const& operand) = default;

    constexpr simd(type&& operand) = default;

    // This cannot be passed by reference.
    constexpr simd(unaligned_vector operand) : raw(operand.raw) {
    }

    constexpr simd(unaligned_vector&& operand)
        : raw(forward<unaligned_vector>(operand.raw)) {
    }

    constexpr simd(raw_type const& values) : raw(values) {
    }

    constexpr simd(raw_type&& values) : raw(forward<raw_type>(values)) {
    }

    // Construct all lanes as `value`.
    template <typename U>
        requires(is_convertible<U, T>)
    constexpr simd(U value) {
        this->fill(static_cast<T>(value));
    }

    // Construct from a variadic argument list.
    template <typename... Us>
        requires(sizeof...(Us) > 1u && sizeof...(Us) == in_abi::lanes)
    constexpr simd(Us&&... values)
        // GCC 13 requires curly braces here.
        : raw(raw_type{static_cast<T>(forward<Us>(values))...}) {
    }

    // Construct from a constant list, such as `value_list` or
    // `integer_sequence`.
    // TODO: Should this be removed, along with `cat::List`'s?
    template <typename U, U... Us>
        requires(ssizeof_pack<U, Us...> == in_abi::lanes)
    constexpr simd(value_type_list<U, Us...>)
        : raw(raw_type(static_cast<T>(Us)...)) {
    }

    // Any ABI for which this `simd` is equal to in size and overaligned can
    // be explicitly converted to.
    template <typename other_abi_type>
        requires(other_abi_type::size == abi_type::size &&
                 other_abi_type::alignment <= abi_type::alignment &&
                 other_abi_type::lanes == abi_type::lanes)
    explicit constexpr operator simd<other_abi_type, T>() {
        return this->raw;
    }

    // Any ABI for which this `simd` is equal to in size and overaligned can
    // be explicitly converted to, and any underlying type for which this
    // `simd`'s is compatible with, can be converted to.
    template <typename other_abi_type, typename U>
        requires(is_convertible<U, T> &&
                 other_abi_type::size == abi_type::size &&
                 other_abi_type::alignment <= abi_type::alignment &&
                 other_abi_type::lanes == abi_type::lanes)
    explicit constexpr operator simd<other_abi_type, U>() {
        return __builtin_convertvector(
            this->raw, typename simd<other_abi_type, U>::raw_type);
    }

    // Copy-assign the raw value of a `simd` to this.
    constexpr auto operator=(type const& operand) -> type& {
        this->raw = operand.raw;
        return *this;
    }

    // Move-assign the raw value of another `simd` into this.
    constexpr auto operator=(type&& operand) -> type& {
        this->raw = move(operand).raw;
        return *this;
    }

    // Compare equality for each lane to another `simd`'s lanes, and store the
    // results in a new `simd`.
    [[nodiscard]]
    constexpr auto
    operator==(type const& operand) const -> simd_mask<abi_type, T> {
        return this->raw == operand.raw;
    }

    // Compare equality for each lane to `value`, and store the results in a new
    // `simd`.
    [[nodiscard]]
    constexpr auto
    operator==(T const& operand) const -> simd_mask<abi_type, T> {
        return *this == type::filled(operand);
    }

    // Compare non-equality for each lane to another `simd`'s lanes, and store
    // the results in a new `simd`.
    [[nodiscard]]
    constexpr auto
    operator!=(type const& operand) const -> simd_mask<abi_type, T> {
        return this->raw != operand.raw;
    }

    // Compare non-equality for each lane to `value`, and store the results in a
    // new `simd`.
    [[nodiscard]]
    constexpr auto
    operator!=(T const& operand) const -> simd_mask<abi_type, T> {
        return *this != type::filled(operand);
    }

    // Compare greater-than for each lane to another `simd`'s lanes, and store
    // the results in a new `simd`.
    [[nodiscard]]
    constexpr auto
    operator>(type const& operand) const -> simd_mask<abi_type, T> {
        return this->raw > operand.raw;
    }

    // Compare greater-than for each lane to `value`, and store the results in a
    // new `simd`.
    [[nodiscard]]
    constexpr auto
    operator>(T const& operand) const -> simd_mask<abi_type, T> {
        return *this > type::filled(operand);
    }

    // Compare greater-than-or-equal for each lane to another `simd`'s lanes,
    // and store the results in a new `simd`.
    constexpr auto operator>=(type const& operand) const -> type {
        return this->raw >= operand.raw;
    }

    // Compare greater-than-or-equal for each lane to `value`, and store the
    // results in a new `simd`.
    [[nodiscard]]
    constexpr auto
    operator>=(T const& operand) const -> simd_mask<abi_type, T> {
        return *this >= type::filled(operand);
    }

    // Compare less-than for each lane to another `simd`'s lanes, and store the
    // results in a new `simd`.
    [[nodiscard]]
    constexpr auto
    operator<(type const& operand) const -> simd_mask<abi_type, T> {
        return this->raw < operand.raw;
    }

    // Compare less-than for each lane to `value`, and store the results in a
    // new `simd`.
    [[nodiscard]]
    constexpr auto
    operator<(T const& operand) const -> simd_mask<abi_type, T> {
        return *this < type::filled(operand);
    }

    // Compare less-than-or-equal for each lane to another `simd`'s lanes,
    // and store the results in a new `simd`.
    constexpr auto operator<=(type const& operand) const -> type {
        return this->raw <= operand.raw;
    }

    // Compare less-than-or-equal for each lane to `value`, and store the
    // results in a new `simd`.
    [[nodiscard]]
    constexpr auto
    operator<=(T const& operand) const -> simd_mask<abi_type, T> {
        return *this <= type::filled(operand);
    }

    // TODO: These should be `friend`.
    // TODO: Add more comments to these operators.
    [[nodiscard]]
    constexpr auto
    operator+(type const& operand) const -> type {
        return this->raw + operand.raw;
    }

    constexpr auto operator+=(type const& operand) -> type& {
        this->raw = this->raw + operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator-(type const& operand) const -> type {
        return this->raw - operand.raw;
    }

    constexpr auto operator-=(type const& operand) -> type& {
        this->raw = this->raw - operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator*(type const& operand) const -> type {
        return this->raw * operand.raw;
    }

    constexpr auto operator*=(type const& operand) -> type& {
        this->raw = this->raw * operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator/(type const& operand) const -> type {
        return this->raw * operand.raw;
    }

    constexpr auto operator/=(type const& operand) -> type& {
        this->raw = this->raw / operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator&(type const& operand) const -> type {
        return this->raw & operand.raw;
    }

    constexpr auto operator&=(type const& operand) -> type& {
        this->raw = this->raw & operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator|(type const& operand) const -> type {
        return this->raw | operand.raw;
    }

    constexpr auto operator|=(type const& operand) -> type& {
        this->raw = this->raw | operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator%(type const& operand) const -> type {
        return this->raw % operand.raw;
    }

    constexpr auto operator%=(type const& operand) -> type& {
        this->raw = this->raw % operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator<<(type const& operand) const -> type {
        return this->raw << operand.raw;
    }

    constexpr auto operator<<=(type const& operand) -> type& {
        this->raw = this->raw << operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator>>(type const& operand) const -> type {
        return this->raw >> operand.raw;
    }

    constexpr auto operator>>=(type const& operand) -> type& {
        this->raw = this->raw << operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator^(type const& operand) const -> type {
        return this->raw ^ operand.raw;
    }

    constexpr auto operator^=(type const& operand) -> type& {
        this->raw = this->raw ^ operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator[](uword index) -> T& {
        return this[index];
    }

    [[nodiscard]]
    constexpr auto
    operator[](uword index) const -> T& {
        return this[index];
    }

    template <typename U>
    constexpr auto fill(U value)
        -> type& requires(is_implicitly_convertible<U, scalar_type>) {
                     scalar_type fill_value = static_cast<scalar_type>(value);
                     if constexpr (lanes == 2u) {
                         this->raw = raw_type(fill_value, fill_value);
                     } else if constexpr (lanes == 4u) {
                         this->raw = raw_type(fill_value, fill_value,
                                              fill_value, fill_value);
                     } else if constexpr (lanes == 8u) {
                         this->raw = raw_type{
                             fill_value, fill_value, fill_value, fill_value,
                             fill_value, fill_value, fill_value, fill_value};
                     } else if constexpr (lanes == 16u) {
                         this->raw = raw_type{
                             fill_value, fill_value, fill_value, fill_value,
                             fill_value, fill_value, fill_value, fill_value,
                             fill_value, fill_value, fill_value, fill_value,
                             fill_value, fill_value, fill_value, fill_value};
                     } else if constexpr (lanes == 32u) {
                         this->raw = raw_type{
                             fill_value, fill_value, fill_value, fill_value,
                             fill_value, fill_value, fill_value, fill_value,
                             fill_value, fill_value, fill_value, fill_value,
                             fill_value, fill_value, fill_value, fill_value,
                             fill_value, fill_value, fill_value, fill_value,
                             fill_value, fill_value, fill_value, fill_value,
                             fill_value, fill_value, fill_value, fill_value,
                             fill_value, fill_value, fill_value, fill_value};
                     }
                     return *this;
                 }

    // Construct a `simd` with every lane initialized to `value`.
    template <typename U>
    [[nodiscard]] static constexpr auto filled(U value) -> type
        requires(is_convertible<U, T>)
    {
        return type().fill(value);
    }

    // Load a vector from `data`, aligned to `abi_type::alignment`.
    constexpr auto load_aligned(T const* p_data) -> type& {
        this->raw =
            static_cast<type const*>(static_cast<void const*>(p_data))->raw;
        return *this;
    }

    // Load a vector from `data` with any alignment. This may be slower than
    // `.loaded_aligned()`.
    constexpr auto load_unaligned(T const* p_data) -> type& {
        this->raw = static_cast<unaligned_vector const*>(
                        static_cast<void const*>(p_data))
                        ->raw;
        return *this;
    }

    // Load a vector from `data`.
    constexpr auto load(T const* p_data) -> type& {
        if constexpr (abi_type::alignment == alignof(T)) {
            return this->load_aligned(p_data);
        } else {
            return this->load_unaligned(p_data);
        }
    }

    // Construct a `simd` loaded from the address `data`, aligned to
    // `abi_type::alignment`.
    [[nodiscard]]
    static constexpr auto loaded_aligned(T const* p_data) -> type {
        return *bit_cast<type const*>(p_data);
    }

    // Construct a `simd` loaded from the address `data` with any alignment.
    // This may be slower than `.loaded_aligned()`.
    // Without this `no_sanitize_address` attribute, Asan reports a false
    // positive when loading a `char const*` from the `.strings` segment,
    // because vector loads potentially index out of bounds.
    [[nodiscard, gnu::no_sanitize_address]]
    static constexpr auto loaded_unaligned(T const* p_data) -> type {
        return *bit_cast<unaligned_vector const*>(p_data);
    }

    // Construct a `simd` loaded from the address `data`.
    [[nodiscard]]
    static constexpr auto loaded(T const* p_data) {
        if constexpr (abi_type::alignment == alignof(T)) {
            return loaded_aligned(p_data);
        } else {
            return loaded_unaligned(p_data);
        }
    }

    static constexpr iword size = in_abi::size;
    static constexpr uword lanes = in_abi::lanes;
    static constexpr uword alignment = in_abi::alignment;
    raw_type raw;
};

template <typename in_abi, typename T>
class alignas(in_abi::template make_abi_type<bool>::alignment.raw) simd_mask {
  public:
    using abi_type = in_abi;
    using scalar_type = bool;

    // GCC vectors cannot hold a `bool`, so they must hold `char`.
    using vector = simd<typename abi_type::template make_abi_type<char>, char>;
    using raw_type = vector::raw_type;

  private:
    using mask_type = simd_mask<abi_type, T>;

    // clangd produces a false diagnostic if these are declared at the bottom
    // of this struct.
    static constexpr uword lanes = abi_type::lanes;
    static constexpr uword alignment = abi_type::alignment;

  public:
    constexpr simd_mask() = default;

    constexpr simd_mask(simd_mask<in_abi, T> const& operand) = default;

    constexpr simd_mask(simd_mask<in_abi, T>&& operand) = default;

    constexpr simd_mask(raw_type const& value) : raw(value) {
    }

    constexpr simd_mask(raw_type&& value) : raw(move(value)) {
    }

    // Construct all lanes as `value`.
    constexpr simd_mask(bool value) {
        this->fill(value);
    }

    // Construct from a variadic argument list.
    template <typename... bools>
    constexpr simd_mask(bools&&... values)
        requires(sizeof...(values) > 1 && sizeof...(values) == this->lanes.raw)
        : raw(static_cast<unsigned char>(forward<bool>(values))...) {
    }

    // Construct from a constant list, such as `value_list` or
    // `integer_sequence`.
    template <bool... bools>
    constexpr simd_mask(value_type_list<bool, bools...> const values)
        requires(values.size == this->lanes)
        : raw(static_cast<unsigned char>(bools)...) {
    }

    // Any ABI for which this `simd` is equal to in size and overaligned can
    // be explicitly converted to.
    template <typename other_abi_type>
    explicit constexpr operator simd_mask<other_abi_type, T>()
        requires(other_abi_type::size == abi_type::size &&
                 other_abi_type::alignment <= abi_type::alignment &&
                 other_abi_type::lanes == abi_type::lanes)
    {
        return this->raw;
    }

    // Any ABI for which this `simd` is equal to in size and overaligned can
    // be explicitly converted to, and any underlying type for which this
    // `simd`'s is compatible with, can be converted to.
    template <typename other_abi_type, typename U>
    explicit constexpr operator simd_mask<other_abi_type, U>()
        requires(is_convertible<U, T> &&
                 other_abi_type::size == abi_type::size &&
                 other_abi_type::alignment <= abi_type::alignment &&
                 other_abi_type::lanes == abi_type::lanes)
    {
        return __builtin_convertvector(
            this->raw, typename simd_mask<other_abi_type, U>::raw_type);
    }

    // Copy-assign the raw value of a `simd` to this.
    constexpr auto operator=(mask_type const& operand) -> mask_type& {
        this->raw = operand.raw;
        return *this;
    }

    // Move-assign the raw value of another `simd` into this.
    constexpr auto operator=(mask_type&& operand) -> mask_type& {
        this->raw = move(operand).raw;
        return *this;
    }

    // Compare equality for each lane to another `simd`'s lanes, and store the
    // results in a new `simd`.
    [[nodiscard]]
    constexpr auto
    operator==(mask_type const& operand) const -> mask_type {
        return this->raw == operand.raw;
    }

    // Compare non-equality for each lane to another `simd`'s lanes, and store
    // the results in a new `simd`.
    [[nodiscard]]
    constexpr auto
    operator!=(mask_type const& operand) const -> mask_type {
        return this->raw != operand.raw;
    }

    [[nodiscard]]
    constexpr auto
    operator&(mask_type const& operand) const -> mask_type {
        return this->raw & operand.raw;
    }

    constexpr auto operator&=(mask_type const& operand) -> mask_type& {
        this->raw = this->raw & operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator|(mask_type const& operand) const -> mask_type {
        return this->raw | operand.raw;
    }

    constexpr auto operator|=(mask_type const& operand) -> mask_type& {
        this->raw = this->raw | operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator%(mask_type const& operand) const -> mask_type {
        return this->raw % operand.raw;
    }

    constexpr auto operator%=(mask_type const& operand) -> mask_type& {
        this->raw = this->raw % operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator<<(mask_type const& operand) const -> mask_type {
        return this->raw << operand.raw;
    }

    constexpr auto operator<<=(mask_type const& operand) -> mask_type& {
        this->raw = this->raw << operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator>>(mask_type const& operand) const -> mask_type {
        return this->raw >> operand.raw;
    }

    constexpr auto operator>>=(mask_type const& operand) -> mask_type& {
        this->raw = this->raw << operand.raw;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator[](uword index) -> bool& {
        return static_cast<bool&>(this[index]);
    }

    [[nodiscard]]
    constexpr auto
    operator[](uword index) const -> T& {
        return static_cast<bool&>(this[index]);
    }

    // Evaluate true if every lane is non-zero.
    [[nodiscard]]
    constexpr auto all_of() const -> bool {
        return simd_all_of(*this);
    }

    // Evaluate true if any lanes are non-zero.
    [[nodiscard]]
    constexpr auto any_of() const -> bool {
        return simd_any_of(*this);
    }

    // Evaluate true if every lane is zero.
    [[nodiscard]]
    constexpr auto none_of() const -> bool {
        return !(this->any_of());
    }

    // Map every lane in this mask to one bit in a bitset.
    constexpr auto bitset() const -> bitset<abi_type::size> {
        return simd_to_bitset(*this);
    }

    constexpr auto fill(bool value) -> mask_type {
        if constexpr (lanes == 2u) {
            this->raw = raw_type(value, value);
        } else if constexpr (lanes == 4u) {
            this->raw = raw_type(value, value, value, value);
        } else if constexpr (lanes == 8u) {
            this->raw = raw_type(value, value, value, value, value, value,
                                 value, value);
        } else if constexpr (lanes == 16u) {
            this->raw = raw_type{value, value, value, value, value, value,
                                 value, value, value, value, value, value,
                                 value, value, value, value};
        } else if constexpr (lanes == 32u) {
            this->raw = raw_type{
                value, value, value, value, value, value, value, value,
                value, value, value, value, value, value, value, value,
                value, value, value, value, value, value, value, value,
                value, value, value, value, value, value, value, value};
        }
        return *this;
    }

    // Construct a `simd` with every lane initialized to `value`.
    [[nodiscard]]
    static constexpr auto filled(bool const value) -> mask_type {
        return mask_type().fill(value);
    }

    // Load a vector from `data`, aligned to `abi_type<bool>::alignment`.
    constexpr auto load(bool const* p_data) -> mask_type& {
        this->raw =
            static_cast<mask_type const*>(static_cast<void const*>(p_data))
                ->raw;
        return *this;
    }

    // Construct a `simd` loaded from the address `data`.
    [[nodiscard]]
    static constexpr auto loaded(bool const* p_data) {
        return mask_type().load(p_data);
    }

    raw_type raw;
};

template <typename abi_type, typename T>
constexpr auto raw_simd_cast(simd<abi_type, T> const& value) -> T {
    return value.raw;
}

template <typename abi_type, typename T>
constexpr auto raw_simd_cast(simd_mask<abi_type, T> const& value) -> T {
    return value.raw;
}

template <typename T, uword lanes>
using fixed_size_simd = simd<fixed_size_abi<T, lanes>, T>;

template <typename T, uword lanes>
using fixed_size_simd_mask = simd_mask<fixed_size_abi<T, lanes>, T>;

template <typename T>
using native_simd = simd<native_abi<T>, T>;

template <typename T>
using native_simd_mask = simd_mask<native_abi<T>, T>;

// TODO: Add GCC 13 `__bf16` vectors.

using int1x2 = fixed_size_simd<int1::raw_type, 2u>;
using int1x4 = fixed_size_simd<int1::raw_type, 4u>;
using int1x8 = fixed_size_simd<int1::raw_type, 8u>;
using int1x16 = fixed_size_simd<int1::raw_type, 16u>;
using int1x32 = fixed_size_simd<int1::raw_type, 32u>;
using int1x_ = native_simd<int1::raw_type>;

using uint1x2 = fixed_size_simd<uint1::raw_type, 2u>;
using uint1x4 = fixed_size_simd<uint1::raw_type, 4u>;
using uint1x8 = fixed_size_simd<uint1::raw_type, 8u>;
using uint1x16 = fixed_size_simd<uint1::raw_type, 16u>;
using uint1x32 = fixed_size_simd<uint1::raw_type, 32u>;
using uint1x_ = native_simd<uint1::raw_type>;

// TODO: Select these types portably.
// TODO: Think over the string vectorization API.
// TODO: Support `char2x_` vector family.
// strings need their own vectors.
using char1x16 = x64::sse42_mask<char>;
using char1x32 = x64::avx2_simd<char>;
using char1x_ = x64::avx2_simd<char>;

using int2x2 = fixed_size_simd<int2::raw_type, 2u>;
using int2x4 = fixed_size_simd<int2::raw_type, 4u>;
using int2x8 = fixed_size_simd<int2::raw_type, 8u>;
using int2x16 = fixed_size_simd<int2::raw_type, 16u>;
using int2x_ = native_simd<int2::raw_type>;

using uint2x2 = fixed_size_simd<uint2::raw_type, 2u>;
using uint2x4 = fixed_size_simd<uint2::raw_type, 4u>;
using uint2x8 = fixed_size_simd<uint2::raw_type, 8u>;
using uint2x16 = fixed_size_simd<uint2::raw_type, 16u>;
using uint2x_ = native_simd<uint2::raw_type>;

using int4x2 = fixed_size_simd<int4::raw_type, 2u>;
using int4x4 = fixed_size_simd<int4::raw_type, 4u>;
using int4x8 = fixed_size_simd<int4::raw_type, 8u>;
using int4x_ = native_simd<int4::raw_type>;

using uint4x2 = fixed_size_simd<uint4::raw_type, 2u>;
using uint4x4 = fixed_size_simd<uint4::raw_type, 4u>;
using uint4x8 = fixed_size_simd<uint4::raw_type, 8u>;
using uint4x_ = native_simd<uint4::raw_type>;

using int8x2 = fixed_size_simd<int8::raw_type, 2u>;
using int8x4 = fixed_size_simd<int8::raw_type, 4u>;
using int8x_ = native_simd<int8::raw_type>;

using uint8x2 = fixed_size_simd<uint8::raw_type, 2u>;
using uint8x4 = fixed_size_simd<uint8::raw_type, 4u>;
using uint8x_ = native_simd<uint8::raw_type>;

using float4x2 = fixed_size_simd<float4::raw_type, 2u>;
using float4x4 = fixed_size_simd<float4::raw_type, 4u>;
using float4x8 = fixed_size_simd<float4::raw_type, 8u>;
using float4x_ = native_simd<float4::raw_type>;

using float8x2 = fixed_size_simd<float8::raw_type, 2u>;
using float8x4 = fixed_size_simd<float8::raw_type, 4u>;
using float8x_ = native_simd<float8::raw_type>;

// TODO: Support `bool` family vectors.

// TODO: Use a vector concept.
auto shuffle(auto in_vector, auto mask);

// TODO: Add `mfence` and `lfence`.
void sfence();
void zero_avx_registers();
void zero_upper_avx_registers();

// Constants for prefetch.
enum class prefetch_hint : int {
    // Prefetch data into non-temporal cache structure and into a location close
    // to the processor, minimizing cache pollution.
    non_temporal = 0,
    // Prefetch data into level 3 cache and higher, or an
    // implementation-specific choice.
    temporal_2 = 1,
    // Prefetch data into level 2 cache and higher.
    temporal_1 = 2,
    // Prefetch data into all levels of the cache hierarchy.
    temporal_0 = 3,
};

template <prefetch_hint hint>
void prefetch(void const* p_source) {
    __builtin_prefetch(p_source, static_cast<int>(hint) & 0x4 >> 2,
                       static_cast<int>(hint) & 0x3);
}

void prefetch_for_one_read(auto const* p_vector) {
    prefetch<prefetch_hint::non_temporal>(p_vector);
}

void prefetch_close(auto const* p_vector) {
    prefetch<prefetch_hint::temporal_0>(p_vector);
}

void prefetch_mid(auto const* p_vector) {
    prefetch<prefetch_hint::temporal_1>(p_vector);
}

void prefetch_far(auto const* p_vector) {
    prefetch<prefetch_hint::temporal_2>(p_vector);
}

void prefetch_for_modify(auto const* p_vector) {
    prefetch<prefetch_hint::temporal_0>(p_vector);
}

template <typename T>
void stream_in(void* p_destination, T const* p_source);

// Dispatch `any_of()` to the native SIMD ABI.
template <typename T>
[[nodiscard]]
auto simd_any_of(simd_mask<native_abi<T>, T> mask) -> bool {
    return simd_all_of(detail::native_cast(mask));
}

// Dispatch `all_of()` to the native SIMD ABI.
template <typename T>
[[nodiscard]]
auto simd_all_of(simd_mask<native_abi<T>, T> mask) -> bool {
    return simd_all_of(detail::native_cast(mask));
}

// TODO: Support all ABIs.
// Dispatch `simd_to_bitset` to the native SIMD ABI.
template <typename T>
[[nodiscard]]
auto simd_to_bitset(simd_mask<native_abi<T>, T> mask)
    -> bitset<native_abi<T>::size> {
    return simd_to_bitset(detail::native_cast(mask));
}

// TODO: __builtin_cpu_init()
// must be called before these.

auto is_mmx_supported() -> bool;
auto is_sse1_supported() -> bool;
auto is_sse2_supported() -> bool;
auto is_sse3_supported() -> bool;
auto is_ssse3_supported() -> bool;
auto is_sse4_1_supported() -> bool;
auto is_sse4_2_supported() -> bool;
auto is_avx_supported() -> bool;
auto is_avx2_supported() -> bool;
auto is_avx512f_supported() -> bool;
auto is_avx512vl_supported() -> bool;

}  // namespace cat

using cat::char1x16;
using cat::char1x32;
using cat::char1x_;
using cat::float4x2;
using cat::float4x4;
using cat::float4x8;
using cat::float4x_;
using cat::float8x2;
using cat::float8x4;
using cat::float8x_;
using cat::int1x16;
using cat::int1x2;
using cat::int1x32;
using cat::int1x4;
using cat::int1x8;
using cat::int1x_;
using cat::int2x16;
using cat::int2x2;
using cat::int2x4;
using cat::int2x8;
using cat::int2x_;
using cat::int4x2;
using cat::int4x4;
using cat::int4x8;
using cat::int4x_;
using cat::int8x2;
using cat::int8x4;
using cat::int8x_;
using cat::uint1x16;
using cat::uint1x2;
using cat::uint1x32;
using cat::uint1x4;
using cat::uint1x8;
using cat::uint1x_;
using cat::uint2x16;
using cat::uint2x2;
using cat::uint2x4;
using cat::uint2x8;
using cat::uint2x_;
using cat::uint4x2;
using cat::uint4x4;
using cat::uint4x8;
using cat::uint4x_;
using cat::uint8x2;
using cat::uint8x4;
using cat::uint8x_;

#include "./implementations/compare_implicit_length_strings.tpp"
#include "./implementations/compare_implicit_length_strings_return_index.tpp"
#include "./implementations/shuffle.tpp"
#include "./implementations/stream_in.tpp"

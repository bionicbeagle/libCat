// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/allocator>
#include <cat/collection>

#include "cat/bit"

// The deprecated copy constructor is intended must be used internally, so
// disable deprecated warnings within this file.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

// TODO: Make `Ring` be `constexpr`.

namespace cat {

template <typename T>
class Ring : public CollectionFacade<Ring<T>, T> {
  public:
    Ring()
        : p_storage(nullptr),
          current_index(0),
          current_size(0),
          current_capacity(0){};

    Ring(Ring&&) = default;

  private:
    // Only allow the shallow copy constructor to be used by these static
    // factory member functions.
    [[deprecated(
        "The copy-constructor is hidden. Use `.clone()` "
        "instead!")]] Ring(Ring const&) = default;

    // Reallocate this vector's memory if it is exceeded, in a non-`constexpr`
    // context.
    auto copy_to_new_storage(is_stable_allocator auto& allocator,
                             ssize new_capacity) -> Maybe<void> {
        // TODO: `.srealloc_multi()`.
        T* p_new = TRY(allocator.template alloc_multi<T>(new_capacity));

        if constexpr (is_trivially_relocatable<T>) {
            copy_memory(this->p_storage, p_new,
                        this->current_size * ssizeof<T>());
        } else {
            for (ssize::Raw i = 0; i < this->current_size; ++i) {
                p_new[i] = move(this->p_storage[i]);
            }
        }

        allocator.free_multi(this->p_storage, this->current_size);

        this->p_storage = p_new;
        this->current_capacity = new_capacity;
        return monostate;
    }

  public:
    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    [[nodiscard]] static auto reserved(is_stable_allocator auto& allocator,
                                       ssize capacity) -> Maybe<Ring<T>> {
    }

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    [[nodiscard]] static auto filled(is_stable_allocator auto& allocator,
                                     ssize capacity, T value)
        -> Maybe<Ring<T>> {
    }

    [[nodiscard]] auto reserve(is_stable_allocator auto& allocator,
                               ssize new_capacity) -> Maybe<void> {
        // The capacity of a `Ring` must be a power of two.
        cat::assert(is_power_of_two(new_capacity));

        if (new_capacity > this->current_capacity) {
            // TODO: `.srealloc_multi()`.
            T* p_new = TRY(allocator.template alloc_multi<T>(new_capacity));

            // TODO: Generalize copying from one collectian to another.
            if constexpr (is_trivially_relocatable<T>) {
                copy_memory(this->p_storage, p_new,
                            this->current_size * ssizeof<T>());
            } else {
                for (ssize::Raw i = 0; i < this->current_size; ++i) {
                    p_new[i] = move(this->p_storage[i]);
                }
            }

            allocator.free_multi(this->p_storage, this->current_size);

            this->p_storage = p_new;
            this->current_capacity = new_capacity;
            return monostate;
        }

        // If the new capacity is not larger, do nothing.
        return monostate;
    }

    [[nodiscard]] auto resize(is_stable_allocator auto& allocator,
                              ssize new_size) -> Maybe<void> {
        if (new_size > this->current_capacity) {
            TRY(this->reserve(allocator, new_size));

            // Construct `T` at the newly reserved memory.
            for (ssize i = this->current_size; i < new_size; ++i) {
                construct_at(this->p_storage + i);
            }

            this->current_size = new_size;
            return monostate;
        }

        // If the new size is not larger, simply shrink size and maintain
        // capacity.
        this->current_size = new_size;
        return monostate;
    }

    [[nodiscard]] auto clone(is_stable_allocator auto& allocator)
        -> Maybe<Ring<T>> {
    }

    // Get the non-`const` address of this `Vector`'s internal array.
    [[nodiscard]] constexpr auto data() -> T* {
        return &(this->p_storage[0]);
    }

    // Get the `const` address of this `Vector`'s internal array.
    [[nodiscard]] constexpr auto data() const -> T const* {
        return &(this->p_storage[0]);
    }

    [[nodiscard]] constexpr auto size() const -> ssize {
        return this->current_size;
    }

    [[nodiscard]] constexpr auto capacity() const -> ssize {
        return this->current_capacity;
    }

    // TODO: rval-ref overload of `.push_back()`.
    // TODO: `.emplace_back()`.

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    void push_back(U const& value) {
        cat::assert(this->current_capacity > 0);
        *(this->p_storage + this->current_index) = value;

        // Increment the size if the ring isn't full.
        if (this->current_size < this->current_capacity) {
            ++(this->current_size);
        }

        // Increment the index, and wrap around the capacity.
        this->current_index =
            (this->current_index + 1) & (this->current_capacity - 1);
    }

  private:
    T* p_storage;
    ssize current_index;
    ssize current_size;
    ssize current_capacity;
};

}  // namespace cat

#pragma GCC diagnostic pop

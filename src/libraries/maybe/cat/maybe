// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/match>
#include <cat/memory>
#include <cat/utility>

namespace cat {
namespace detail {
    // A `NullOpt` is consumed by an `Maybe` constructor to prevent
    // initializing its `value` member.
    struct NullOpt {};
}  // namespace detail

// `nullopt` is consumed by `Maybe` to represent an empty value.
inline constexpr detail::NullOpt nullopt;

// Forward declarations.
template <typename T>
class Maybe;

class String;

// `MaybeValueStorage` holds a non-reference, non-pointer, non-`void` type
// `T` and a `bool` flag to represent holding a value or not.
template <typename T>
struct MaybeValueStorage {
    using Value = T;

    constexpr MaybeValueStorage() : dummy{} {};

    // If `T` is forwarded arguments by the `in_place` `Maybe`
    // constructor, then construct it in-place with those arguments.
    template <typename... Args>
    constexpr MaybeValueStorage(Args... args) {
        this->construct(args...);
    }

    // If `T` is trivially copy-constructible, use this simple copy constructor.
    constexpr MaybeValueStorage(T const& in_value) requires(
        is_trivially_copy_constructible<T>)
        : storage(in_value), has_some(true){};

    // If `T` is not trivially copy-constructible, then manually construct it
    // in-place.
    constexpr MaybeValueStorage(T const& in_value) requires(
        is_copy_constructible<T> && !is_trivially_copy_constructible<T>) {
        this->construct(in_value);
    }

    // If `T` is not copy-constructible, delete this copy constructor.
    constexpr MaybeValueStorage(T const& in_value) requires(
        !is_copy_constructible<T>) = delete;

    // If `T` is trivially move-constructible, use this simple move constructor.
    constexpr MaybeValueStorage(T&& in_value) requires(
        is_trivially_move_constructible<T>)
        : storage(forward<T>(in_value)), has_some(true){};

    // If `T` is not trivially move-constructible, then manually invoke
    // `move` on it.
    constexpr MaybeValueStorage(T&& in_value) requires(
        is_move_constructible<T> && !is_trivially_move_constructible<T>) {
        // TODO: Should this be a `move`?
        this->construct(forward<T>(in_value));
        this->has_some = true;
    }

    // If `T` is not move-constructible, delete this move constructor.
    constexpr MaybeValueStorage(T&& in_value) requires(
        !is_move_constructible<T>) = delete;

    // `nullopt` initializes this without a value.
    constexpr MaybeValueStorage(detail::NullOpt) : dummy{} {};

    // If other destructors are not conditionally specialized by their
    // `requires`, they should be `default` or deleted.
    constexpr ~MaybeValueStorage() = default;

    // If `T` is not trivially destructible, then manually invoke its
    // destructor.
    constexpr ~MaybeValueStorage() requires(!is_trivially_destructible<T>) {
        if constexpr (requires { this->storage.~T(); }) {
            if (this->has_some) {
                this->storage.~T();
                this->has_some = false;
            }
        }
    }

    // If `T` is trivially copy-assignable, then forward this value.
    auto operator=(T const& in_value)
        -> MaybeValueStorage& requires(is_trivially_copy_assignable<T>) {
        this->storage = in_value;
        this->has_some = true;
        return *this;
    }

    // If `T` is non-trivially copy-assignable, then manually construct it
    // in-place.
    auto operator=(T const& in_value)
        -> MaybeValueStorage& requires(is_copy_assignable<T> &&
                                       !is_trivially_copy_assignable<T>) {
        this->assign(in_value);
        return *this;
    }

    // If `T` is not copy-assignable, delete this assignment operator to prevent
    // ambiguous overload resolution.
    auto operator=(T const& in_value)
        -> MaybeValueStorage& requires(!is_copy_assignable<T>) = delete;

    // If `T` is trivially move-assignable, then forward this value.
    auto operator=(T&& in_value)
        -> MaybeValueStorage& requires(is_trivially_move_assignable<T>) {
        this->storage = forward<T>(in_value);
        this->has_some = true;
        return *this;
    }

    // If `T` is non-trivially move-assignable, then manually invoke
    // `move()` on it.
    constexpr auto operator=(T&& in_value)
        -> MaybeValueStorage& requires(is_move_assignable<T> &&
                                       !is_trivially_move_assignable<T>) {
        this->assign(forward<T>(in_value));
        return *this;
    }

    // If `T` is not move-assignable, delete this assignment operator to prevent
    // ambiguous overload resolution.
    auto operator=(T&& in_value)
        -> MaybeValueStorage& requires(!is_move_assignable<T>) = delete;

    // The following methods are homogenous to all `Maybe...Storage` types.
    constexpr auto value() & -> T& {
        return this->storage;
    }

    constexpr auto value() const& -> T const& {
        return this->storage;
    }

    constexpr auto value() && -> T&& {
        return move(this->storage);
    }

    constexpr auto value() const&& -> T&& {
        return move(this->storage);
    }

    constexpr auto has_value() const -> bool {
        return has_some;
    }

    // Destroy the storage unconditionally.
    void hard_reset() {
        this->storage.~T();
        this->has_some = false;
    }

    // Construct an object at the address of the held `storage`.
    template <typename... Args>
    constexpr void construct(Args&&... args) {
        construct_at(addressof(this->storage), forward<Args>(args)...);
        this->has_some = true;
    }

    // If this is assigned an `Maybe` which wraps a type that can be
    // converted to `T` , then convert that storage to this type implicitly.
    template <typename OtherMaybe>
    constexpr void assign(OtherMaybe&& maybe) {
        if (this->has_value()) {
            if (maybe.has_value()) {
                this->storage = forward<OtherMaybe>(maybe).value();
            } else {
                // If the incoming `Maybe` is empty, then empty this one.
                this->hard_reset();
            }
        } else {
            if (maybe.has_value()) {
                this->construct(maybe.value());
            }
            // If both `Maybe`s are empty, nothing happens.
        }
    }

    // A `union` member will not be default-constructed.
    union {
        // `dummy` is initialized in a `constexpr` context by both the default
        // and the `nullopt` constructors. This prevents `T`'s default
        // constructor from being called there. One member must be initialized
        // in a `constexpr` context. If `T` is trivial, a dummy member is not
        // required.
        Monostate dummy;
        T storage;
    };
    bool has_some = false;
};

template <typename T>
struct MaybeReferenceStorage {
    using Value = T;

    template <typename U>
    constexpr MaybeReferenceStorage(U& in_value)
        : p_storage(addressof(in_value)){};

    constexpr MaybeReferenceStorage(detail::NullOpt) : p_storage(nullptr){};

    // Rebind the reference if this is assigned a new value.
    constexpr auto operator=(Value& option) -> MaybeReferenceStorage& {
        this->p_storage = addressof(option);
        return *this;
    }

    // The following methods are homogenous to all `Maybe...Storage` types.
    constexpr auto value() & -> Value {
        return *(this->p_storage);
    }

    constexpr auto value() const& -> Value {
        return *(this->p_storage);
    }

    constexpr auto value() && -> Value {
        return *(move(this->p_storage));
    }

    constexpr auto value() const&& -> Value {
        return *(move(this->p_storage));
    }

    constexpr auto has_value() const -> bool {
        return this->p_storage != nullptr;
    }

    // Destroy the storage unconditionally.
    void hard_reset() {
        this->p_storage->~RemoveReference<Value>();
        this->p_storage = nullptr;
    }

    // Construct an object at the address of the held `storage`.
    template <typename... Args>
    constexpr void construct(Args&&... args) {
        construct_at(this->p_storage, forward<Args>(args)...);
        cat::assert(this->has_value());
    }

    // If this is assigned an `Maybe` which wraps a type that can be
    // converted to `T` , then convert that storage to this type implicitly.
    template <typename OtherMaybe>
    constexpr void assign(OtherMaybe&& maybe) {
        if (this->has_value()) {
            // If this `Maybe` has a value, then empty it.
            this->hard_reset();
        }

        if (maybe.has_value()) {
            this->p_storage = forward<OtherMaybe>(maybe).p_value();
        } else {
            // If both `Maybe`s are empty, nothing happens.
        }
    }

    RemoveReference<T>* p_storage = nullptr;
};

// `T` is a `Predicate<Type, function, sentinel>`.
template <typename T>
struct MaybeCompactStorage {
    using Value = typename T::Type;

    constexpr MaybeCompactStorage() = default;

    // Enable copy and move constructors iff `MaybeCompactStorage`
    // supports them.

    // If `Value` is trivially copy-constructible, use this simple copy
    // constructor.
    constexpr MaybeCompactStorage(Value const& in_value) requires(
        is_trivially_copy_constructible<Value>)
        : storage(in_value){};

    // If `Value` is not trivially copy-constructible, then manually
    // construct it in-place.
    constexpr MaybeCompactStorage(Value const& in_value) requires(
        is_copy_constructible<Value> &&
        !is_trivially_copy_constructible<Value>) {
        this->construct(in_value);
    }

    // If `Value` is not copy-constructible, delete this copy constructor.
    constexpr MaybeCompactStorage(Value const& in_value) requires(
        !is_copy_constructible<Value>) = delete;

    // If `Value` is trivially move-constructible, use this simple move
    // constructor.
    constexpr MaybeCompactStorage(Value&& in_value) requires(
        is_trivially_move_constructible<Value>)
        : storage(forward<Value>(in_value)){};

    // If `Value` is not trivially move-constructible, then manually invoke
    // `move` on it.
    MaybeCompactStorage(Value&& in_value) requires(
        is_move_constructible<Value> &&
        !is_trivially_move_constructible<Value>) {
        this->construct(forward<Value>(in_value));
    }

    // If `Value` is not move-constructible, delete this move constructor.
    constexpr MaybeCompactStorage(Value&& in_value) requires(
        !is_move_constructible<Value>) = delete;

    // If other destructors are not conditionally specialized by their
    // `requires`, they should be `default` or deleted.
    constexpr ~MaybeCompactStorage() = default;

    // If `Value` is not trivially destructible, then manually invoke its
    // destructor.
    constexpr ~MaybeCompactStorage() requires(
        !is_trivially_destructible<Value>) {
        if constexpr (requires { this->storage.~Value(); }) {
            if (this->has_value()) {
                this->storage.~Value();
            }
        }
    }

    constexpr MaybeCompactStorage(detail::NullOpt)
        : storage(T::sentinel_value){};

    // If other assignment operators are not conditionally specialized by
    // their `requires`, they should be `default` or deleted.

    // If `Value` is trivially copy-assignable, then forward this value.
    auto operator=(Value const& in_value)
        -> MaybeCompactStorage& requires(is_trivially_copy_assignable<Value>) {
        this->storage = in_value;
        return *this;
    }

    // If `Value` is non-trivially copy-assignable, then manually construct
    // it in-place.
    auto operator=(Value const& in_value)
        -> MaybeCompactStorage& requires(is_copy_assignable<Value> &&
                                         !is_trivially_copy_assignable<Value>) {
        this->assign(in_value);
        return *this;
    }

    // If `Value` is not copy-assignable, delete this assignment operator to
    // prevent ambiguous overload resolution.
    auto operator=(Value const& in_value)
        -> MaybeCompactStorage& requires(!is_copy_assignable<Value>) = delete;

    // If `Value` is trivially move-assignable, then forward this value.
    auto operator=(Value&& in_value)
        -> MaybeCompactStorage& requires(is_trivially_move_assignable<Value>) {
        this->storage = forward<Value>(in_value);
        return *this;
    }

    // If `Value` is non-trivially move-assignable, then manually invoke
    // `move()` on it.
    constexpr auto operator=(Value&& in_value)
        -> MaybeCompactStorage& requires(is_move_assignable<Value> &&
                                         !is_trivially_move_assignable<Value>) {
        this->assign(forward<Value>(in_value));
        return *this;
    }

    // If `Value` is not move-assignable, delete this assignment operator to
    // prevent ambiguous overload resolution.
    auto operator=(Value&& in_value)
        -> MaybeCompactStorage& requires(!is_move_assignable<Value>) = delete;

    // The following methods are homogenous to all `Maybe...Storage`
    // types.
    constexpr auto value() & -> Value& {
        return this->storage;
    }

    constexpr auto value() const& -> Value const& {
        return this->storage;
    }

    constexpr auto value() && -> Value&& {
        return move(this->storage);
    }

    constexpr auto value() const&& -> Value&& {
        return move(this->storage);
    }

    constexpr auto has_value() const -> bool {
        return T::predicate_function(this->storage);
    }

    // Destroy the storage unconditionally.
    void hard_reset() {
        this->storage.~Value();
        this->storage = T::sentinel_value;
    }

    // Construct an object at the address of the held `storage`.
    template <typename... Args>
    constexpr void construct(Args&&... args) {
        construct_at(addressof(this->storage), forward<Args>(args)...);
    }

    // If this is assigned an `Maybe` which wraps a type that can be
    // converted to `T` , then convert that storage to this type implicitly.
    template <typename OtherMaybe>
        requires(is_specialization<OtherMaybe, Maybe>&&
                     is_implicitly_convertible<typename OtherMaybe::Value, T>)
    constexpr void assign(OtherMaybe&& maybe) {
        if (this->has_value()) {
            if (maybe.has_value()) {
                this->storage = forward<OtherMaybe>(maybe).value();
            } else {
                // If the incoming `Maybe` is empty, then empty this one.
                this->hard_reset();
            }
        } else {
            if (maybe.has_value()) {
                this->construct(maybe.value());
            }
            // If both `Maybe`s are empty, nothing happens.
        }
    }

    // A `union` member will not be default-constructed.
    union {
        Monostate dummy;
        Value storage;
    };
};

template <typename T>
class Maybe {
  private:
    // clang-format off
    // Clang Format 12 does not understand how to format this well:
    using Storage =
        Conditional<is_void<T>,
            // If `T` is `void`:
            MaybeValueStorage<Monostate>,
		Conditional<requires {
                   // T::predicate_function(T::Type());
                    T::sentinel_value;
                },
                // If `T` is a `Predicate`:
                MaybeCompactStorage<T>,
		Conditional<is_reference<T>,
                    // If `T` is a reference type:
                    MaybeReferenceStorage<T>,
                    // If `T` is a value type:
                    MaybeValueStorage<T>>>>;
    // clang-format on

  public:
    using Value = typename Storage::Value;

    // All `Maybe`s are default-constructed as empty.
    constexpr Maybe() : storage(nullopt){};

    // `Maybe`s can be constructed with `in_place` to have their storage
    // constructed, unless they are reference types. Without this tag, the
    // storage would be uninitialized.
    template <typename... Args>
        requires(!is_reference<Value>)
    constexpr Maybe(detail::InPlace, Args... args) {
        this->storage.construct(args...);
    }

    // Forward all constructors to the `storage` member.

    // A reference type cannot be copy-constructed, but other types can.
    template <typename U>
        requires(!is_reference<Value> && is_implicitly_convertible<U, Value> &&
                 is_copy_constructible<Value>)
    constexpr Maybe(U& input) : storage(static_cast<Value>(input)){};

    template <typename U>
        requires(!is_reference<Value> && is_implicitly_convertible<U, Value> &&
                 is_copy_constructible<Value>)
    constexpr Maybe(U const& input) : storage(static_cast<Value>(input)){};

    // Produce an error message if `Value` is not copy-constructible.
    template <typename U>
        requires(!is_reference<Value> && is_implicitly_convertible<U, Value> &&
                 !is_copy_constructible<Value>)
    constexpr Maybe(U const& input) = delete;

    // Rebinding converting reference constructor.
    template <typename U>
        requires(is_reference<Value>&&
                     is_implicitly_convertible<AddLvalueReference<U>, Value>)
    constexpr Maybe(U& input) : storage(static_cast<Value>(input)){};

    // Perfect forwarding constructor.
    template <rvalue U>
        requires(!is_reference<Value> && is_implicitly_convertible<U, Value>)
    // NOLINTNEXTLINE `rvalue` sufficiently constrains this constructor.
    constexpr Maybe(U&& input) : storage(forward<U>(input)){};

    // `Maybe` can be constructed by another `Maybe`.
    template <typename U>
        requires(is_implicitly_convertible<U, Value>)
    constexpr Maybe(Maybe<U>& input) {
        this->storage.assign(input);
    }

    template <typename U>
        requires(is_implicitly_convertible<U, Value>)
    constexpr Maybe(Maybe<U> const& input) {
        this->storage.assign(input);
    }

    template <typename U>
        requires(is_implicitly_convertible<U, Value>)
    constexpr Maybe(Maybe<U>&& input) {
        this->storage.assign(move(input));
    }

    // Consuming `nullopt` is forwarded to `storage`.
    constexpr Maybe(detail::NullOpt) : storage(nullopt){};

    // Consuming `monostate` default-initializes the `Maybe`.
    constexpr Maybe(Monostate) requires(is_void<Value>) : storage(Value()){};

    // Any `Maybe` can convert into another.
    template <typename U>
        requires(!is_same<U, T> && is_implicitly_convertible<Value, U>)
    constexpr operator Maybe<U>() {
        if (this->has_value()) {
            if constexpr (is_same<U, void>) {
                return monostate;
            } else {
                return Maybe<U>{
                    static_cast<typename Maybe<U>::Value>(this->value())};
            }
        }
        return Maybe<U>{nullopt};
    }

    // Forward all assignment operators to `storage`, except when assigning
    // `nullopt`. They should convert any implicitly convertible type into
    // `Value`.

    // Non-reference converting copy assignment operator.
    template <typename U>
        requires(is_implicitly_convertible<U, Value> && !is_reference<Value> &&
                 is_copy_assignable<Value>)
    constexpr auto operator=(U const& value) -> Maybe& {
        this->storage = static_cast<Value const&>(value);
        return *this;
    }

    // Non-reference converting move assignment operator.
    template <typename U>
        requires(is_implicitly_convertible<U, Value> && !is_reference<Value> &&
                 is_move_assignable<Value>)
    auto operator=(U&& value) -> Maybe& {
        this->storage = static_cast<Value&&>(forward<U>(value));
        return *this;
    }

    // Rebinding converting reference assignment operator.
    template <typename U>
        requires((is_implicitly_convertible<AddLvalueReference<U>,
                                            Value>)&&is_reference<Value>)
    constexpr auto operator=(U& value) -> Maybe& {
        this->storage = static_cast<Value&>(value);
        return *this;
    }

    // Rebinding converting `Maybe` copy assignment operator.
    template <typename U>
        requires(is_implicitly_convertible<U, Value> && !is_reference<Value> &&
                 !is_reference<U>)
    auto operator=(Maybe<U> const& maybe) -> Maybe& {
        this->storage.assign(maybe);
        return *this;
    }

    // Rebinding converting `Maybe` move assignment operator.
    template <typename U>
        requires(
            is_implicitly_convertible<U, Value>&& is_move_assignable<Value>)
    auto operator=(Maybe<U>&& maybe) -> Maybe& {
        this->storage.assign(move(maybe));
        return *this;
    }

    // Rebinding converting `Maybe` reference assignment operator.
    template <typename U>
        requires(is_implicitly_convertible<U, Value>)
    auto operator=(Maybe<U>& maybe) -> Maybe& {
        this->storage.assign(maybe);
        return *this;
    }

    // Assigning `nullopt` destroys any value.
    auto operator=(detail::NullOpt) -> Maybe& {
        this->storage.hard_reset();
        return *this;
    }

    [[nodiscard]] constexpr auto has_value() const -> bool {
        return this->storage.has_value();
    }

    // Holds true if this `Maybe` currently has some value of the type `T`.
    // This method allows `Maybe` to be used in `match` statements.
    template <typename U>
    [[nodiscard]] constexpr auto is() const -> bool {
        // Since this storage can only hold either `Value` or `nullopt`,
        // this can be expressed in terms of `.has_value()`.
        if constexpr (is_same<U, Value>) {
            return this->has_value();
        } else {
            return false;
        }
    }

    // Member access syntax pattern matching for `cat::match()`.
    template <typename... Patterns>
        requires(is_specialization<Patterns, detail::PatternCallback>&&...)
    constexpr void match(Patterns&&... patterns) {
        detail::MatchPatterns{*this}(forward<Patterns>(patterns)...);
    }

    // Holds true if this `Maybe` currently has some value convertible and
    // equivalent to `in_value`. This method allows `Maybe` to be used in
    // `match` statements.
    template <typename U>
        requires(is_convertible<U, Value>)
    [[nodiscard]] constexpr auto is(U&& in_value) const -> bool {
        if (this->has_value()) {
            return static_cast<Value>(forward<U>(in_value)) == this->value();
        }
        return false;
    }

    // Special overload for `nullopt`.
    [[nodiscard]] constexpr auto is(detail::NullOpt) const -> bool {
        return !this->has_value();
    }

    // Get the `storage` unconditionally.
    [[nodiscard]] constexpr auto value() & -> Value& {
        return this->storage.value();
    }

    // Get the const-qualified `storage` unconditionally.
    [[nodiscard]] constexpr auto value() const& -> Value const& {
        return this->storage.value();
    }

    // Move the `storage` unconditionally. Reference types cannot be moved.
    [[nodiscard]] constexpr auto value() && -> Value&& requires(
        !is_reference<Value>) {
        return move(this->storage.value());
    }

    // Move the const-qualified `storage` unconditionally. Reference types
    // cannot be moved.
    [[nodiscard]] constexpr auto value() const&& -> Value const&& requires(
        !is_reference<Value>) {
        return move(this->storage.value());
    }

    // Get the value held by a non-`const`-qualified `Maybe`, or a
    // fallback value if it does not hold a value.
    [[nodiscard]] constexpr auto value_or(Value fallback) & -> Value {
        if (this->storage.has_value()) {
            return this->storage.value();
        }
        return fallback;
    }

    // Get the value held by a `const`-qualified `Maybe`, or a fallback
    // value if it does not hold a value.
    [[nodiscard]] constexpr auto value_or(Value fallback) const& -> Value {
        if (this->storage.has_value()) {
            return this->storage.value();
        }
        return fallback;
    }

    // Get the value held by a non-`const`-qualified `Maybe`, or a
    // fallback value if it does not hold a value.
    [[nodiscard]] constexpr auto value_or(Value&& fallback) && -> Value&& {
        if (this->storage.has_value()) {
            return move(this->storage).value();
        }
        return move(fallback);
    }

    // Get the value held by a `const`-qualified `Maybe`, or a fallback
    // value if it does not hold a value.
    [[nodiscard]] constexpr auto value_or(Value&& fallback) const&& -> Value&& {
        if (this->storage.has_value()) {
            return move(this->storage).value();
        }
        return move(fallback);
    }

    // Get a pointer to the data owned by this `Maybe`. If `Maybe`
    // holds a raw pointer, this is equivalent to `.value()`, otherwise this
    // is equivalent to `addressof(maybe.value())`.
    [[nodiscard]] constexpr auto p_value() {
        if constexpr (is_pointer<Value>) {
            return this->storage.value();
        } else {
            return addressof(this->storage.value());
        }
    }

    // Get a pointer to the data owned by this `Maybe`. If `Maybe`
    // holds a raw pointer, this is equivalent to `.value()`, otherwise this
    // is equivalent to `addressof(maybe.value())`.
    [[nodiscard]] constexpr auto p_value() const {
        if constexpr (is_pointer<Value>) {
            return this->storage.value();
        } else {
            return addressof(this->storage.value());
        }
    }

    // TODO: Add `&&` overloads to the `.assert()` and `.verify()` getters.
    // TODO: Make the `.assert()` and `.verify()` getters `constexpr`.
    // TODO: Add overloads which take a `String const` for an error message.

    [[nodiscard]] auto assert(
        void (*p_assert_handler)(SourceLocation const&) = assert_handler,
        SourceLocation const& callsite =
            SourceLocation::current()) & -> Value& {
        cat::assert(this->has_value(), p_assert_handler, callsite);
        return this->value();
    }

    [[nodiscard]] auto assert(
        void (*p_assert_handler)(SourceLocation const&) = assert_handler,
        SourceLocation const& callsite =
            SourceLocation::current()) const& -> Value const& {
        cat::assert(this->has_value(), p_assert_handler, callsite);
        return this->value();
    }

    [[nodiscard]] auto assert(
        void (*p_assert_handler)(SourceLocation const&) = assert_handler,
        SourceLocation const& callsite =
            SourceLocation::current()) && -> Value {
        cat::assert(this->has_value(), p_assert_handler, callsite);
        return this->value();
    }

    [[nodiscard]] auto assert(
        void (*p_assert_handler)(SourceLocation const&) = assert_handler,
        SourceLocation const& callsite =
            SourceLocation::current()) const&& -> Value {
        cat::assert(this->has_value(), p_assert_handler, callsite);
        return this->value();
    }

    [[nodiscard]] auto verify(
        void (*p_assert_handler)(SourceLocation const&) = assert_handler,
        SourceLocation const& callsite =
            SourceLocation::current()) & -> Value& {
        cat::verify(this->has_value(), p_assert_handler, callsite);
        return this->value();
    }

    [[nodiscard]] auto verify(
        void (*p_assert_handler)(SourceLocation const&) = assert_handler,
        SourceLocation const& callsite =
            SourceLocation::current()) const& -> Value const& {
        cat::verify(this->has_value(), p_assert_handler, callsite);
        return this->value();
    }

    [[nodiscard]] auto verify(
        void (*p_assert_handler)(SourceLocation const&) = assert_handler,
        SourceLocation const& callsite =
            SourceLocation::current()) && -> Value {
        cat::verify(this->has_value(), p_assert_handler, callsite);
        // `move()` is required when there is a deleted copy-constructor.
        return move(this->value());
    }

    [[nodiscard]] auto verify(
        void (*p_assert_handler)(SourceLocation const&) = assert_handler,
        SourceLocation const& callsite =
            SourceLocation::current()) const&& -> Value {
        cat::verify(this->has_value(), p_assert_handler, callsite);
        // `move()` is required when there is a deleted copy-constructor.
        return move(this->value());
    }

    // Monadic methods:

    // TODO: Use an `invocable` `concept`.

    // If this non-`const`-qualified `Maybe` holds a value, transform it
    // by a function. Otherwise, propagate an empty `Maybe`.
    template <typename Function>
    [[nodiscard]] constexpr auto transform(Function&& callback) & {
        using U = decltype(callback(this->value()));
        static_assert(!is_specialization<U, Maybe>);

        if constexpr (is_void<U>) {
            return this->has_value() ? Maybe<void>{monostate}
                                     : Maybe<void>{nullopt};
        } else {
            if (this->has_value()) {
                return Maybe<U>{forward<Function>(callback)(this->value())};
            }
            return Maybe<U>{nullopt};
        }
    }

    // If this `const`-qualified `Maybe` holds a value, transform it by a
    // function without side-effects. Otherwise, propagate an empty
    // `Maybe`.
    template <typename Function>
    [[nodiscard]] constexpr auto transform(Function&& callback) const& {
        using U = decltype(callback(this->value()));
        static_assert(!is_specialization<U, Maybe>);

        if constexpr (is_void<U>) {
            return this->has_value() ? Maybe<void>{monostate}
                                     : Maybe<void>{nullopt};
        } else {
            if (this->storage.has_value()) {
                return Maybe<U>{forward<Function>(callback)(this->value())};
            }
            return Maybe<U>{nullopt};
        }
    }

    // If this non-`const`-qualified `Maybe` holds a value, transform it
    // by function. Otherwise, propagate an empty `Maybe`.
    template <typename Function>
    [[nodiscard]] constexpr auto transform(Function&& callback) && {
        using U = decltype(callback(this->value()));
        static_assert(!is_specialization<U, Maybe>);

        if constexpr (is_void<U>) {
            return this->has_value() ? Maybe<void>{monostate}
                                     : Maybe<void>{nullopt};
        } else {
            if (this->has_value()) {
                return Maybe<U>{
                    forward<Function>(callback)(move(this)->value())};
            }
            return Maybe<U>{nullopt};
        }
    }

    // If this `const`-qualified `Maybe` holds a value, transform it by a
    // function without side-effects. Otherwise, propagate an empty
    // `Maybe`.
    template <typename Function>
    [[nodiscard]] constexpr auto transform(Function&& callback) const&& {
        using U = decltype(callback(this->value()));
        static_assert(!is_specialization<U, Maybe>);

        if constexpr (is_void<U>) {
            return this->has_value() ? Maybe<void>{monostate}
                                     : Maybe<void>{nullopt};
        } else {
            if (this->has_value()) {
                return Maybe<U>{
                    forward<Function>(callback)(move(this)->value())};
            }
            return Maybe<U>{nullopt};
        }
    }

    // Invoke a callback returning an `Maybe` on the value of a
    // `const`-qualified `Maybe` and propagate the result, if it holds a
    // value.
    template <typename Function>
    [[nodiscard]] constexpr auto and_then(Function&& callback) & {
        return this->has_value() ? forward<Function>(callback)(this->value())
                                 : nullopt;
    }

    // Invoke a callback returning an `Maybe` on the value of a
    // `const`-qualified `Maybe` and propagate the result, if it holds a
    // value.
    template <typename Function>
    [[nodiscard]] constexpr auto and_then(Function&& callback) const& {
        return this->has_value() ? forward<Function>(callback)(this->value())
                                 : nullopt;
    }

    // Invoke a callback returning an `Maybe` on the value of a
    // non-`const`-qualified `Maybe` and propagate the result, if it
    // holds a value.
    template <typename Function>
    [[nodiscard]] constexpr auto and_then(Function&& callback) && {
        return this->has_value()
                   ? forward<Function>(callback)(move(this)->value())
                   : nullopt;
    }

    // Invoke a callback returning an `Maybe` on the value of a
    // `const`-qualified `Maybe` and propagate the result, if it holds a
    // value.
    template <typename Function>
    [[nodiscard]] constexpr auto and_then(Function&& callback) const&& {
        return this->has_value()
                   ? forward<Function>(callback)(move(this)->value())
                   : nullopt;
    }

    // Invoke a callback iff a non-`const`-qualified `Maybe` holds no
    // value. This callback can return `void` or an `Maybe`.
    template <typename Function>
    [[nodiscard]] constexpr auto or_else(Function&& callback) & {
        using U = decltype(callback());
        static_assert(is_void<U> || is_specialization<U, Maybe>);

        if (!this->storage.has_value()) {
            if constexpr (is_void<U>) {
                forward<Function>(callback)();
            } else {
                return forward<Function>(callback)();
            }
        }

        if constexpr (is_void<U>) {
            return;
        } else {
            return U{nullopt};
        }
    }

    // Invoke a callback iff a `const`-qualified `Maybe` holds no value.
    // This callback can return `void` or an `Maybe`.
    template <typename Function>
    [[nodiscard]] constexpr auto or_else(Function&& callback) const& {
        using U = decltype(callback());
        static_assert(is_void<U> || is_specialization<U, Maybe>);

        if (!this->storage.has_value()) {
            if constexpr (is_void<U>) {
                forward<Function>(callback)();
            } else {
                return forward<Function>(callback)();
            }
        }

        if constexpr (is_void<U>) {
            return;
        } else {
            return U{nullopt};
        }
    }

    // Invoke a callback iff a non-`const`-qualified move-only `Maybe`
    // holds no value. This callback can return `void` or an `Maybe`.
    template <typename Function>
    [[nodiscard]] constexpr auto or_else(Function&& callback) && {
        using U = decltype(callback());
        static_assert(is_void<U> || is_specialization<U, Maybe>);

        if (!this->storage.has_value()) {
            if constexpr (is_void<U>) {
                forward<Function>(callback)();
            } else {
                return move(forward<Function>(callback))();
            }
        }

        if constexpr (is_void<U>) {
            return;
        } else {
            return U{nullopt};
        }
    }

    // Invoke a callback iff a `const`-qualified move-only `Maybe` holds
    // no value. This callback can return `void` or an `Maybe`.
    template <typename Function>
    [[nodiscard]] constexpr auto or_else(Function&& callback) const&& {
        using U = decltype(callback());
        static_assert(is_void<U> || is_specialization<U, Maybe>);

        if (!this->storage.has_value()) {
            if constexpr (is_void<U>) {
                forward<Function>(callback)();
            } else {
                return move(forward<Function>(callback))();
            }
        }

        if constexpr (is_void<U>) {
            return;
        } else {
            return U{nullopt};
        }
    }

    // If this `Maybe` is empty, terminate the running process
    // immediately. Otherwise, return its value.
    [[nodiscard]] auto or_exit(ssize exit_code = 1) & {
        if (this->has_value()) [[likely]] {
            if constexpr (!is_void<T>) {
                return this->value();
            } else {
                return;
            }
        } else {
            exit(exit_code);
        }
        __builtin_unreachable();  // This prevents a build warning.
    }

    // If this `Maybe` is empty, terminate the running process
    // immediately. Otherwise, return its value.
    [[nodiscard]] auto or_exit(ssize exit_code = 1) const& {
        if (this->has_value()) [[likely]] {
            if constexpr (!is_void<T>) {
                return this->value();
            } else {
                return;
            }
        } else {
            exit(exit_code);
        }
        __builtin_unreachable();  // This prevents a build warning.
    }

    // If this `Maybe` is empty, terminate the running process
    // immediately. Otherwise, move its value.
    [[nodiscard]] auto or_exit(ssize exit_code = 1) && {
        if (this->has_value()) [[likely]] {
            if constexpr (!is_void<T>) {
                return move(this->value());
            } else {
                return;
            }
        } else {
            exit(exit_code);
        }
        __builtin_unreachable();  // This prevents a build warning.
    }

    // If this `Maybe` is empty, terminate the running process
    // immediately. Otherwise, move its value.
    [[nodiscard]] auto or_exit(ssize exit_code = 1) const&& {
        if (this->has_value()) [[likely]] {
            if constexpr (!is_void<T>) {
                return move(this)->value();
            } else {
                return;
            }
        } else {
            exit(exit_code);
        }
        __builtin_unreachable();  // This prevents a build warning.
    }

    // If this `Maybe` is empty, print an error message and terminate the
    // running process immediately. Otherwise, return its value.
    // These are implemented in `<cat/string>`.
    [[nodiscard]] auto or_exit(String const error_message,
                               ssize exit_code = 1) &;
    [[nodiscard]] auto or_exit(String const error_message,
                               ssize exit_code = 1) const&;
    [[nodiscard]] auto or_exit(String const error_message,
                               ssize exit_code = 1) &&;
    [[nodiscard]] auto or_exit(String const error_message,
                               ssize exit_code = 1) const&&;

    // Construct the value in-place and destroy the held value iff it
    // exists.
    template <typename... Args>
        requires(!is_void<T>)
    constexpr auto emplace(Args&&... args) -> Value& {
        *this = nullopt;
        this->storage.construct(forward<Args>(args)...);
        return this->storage.value();
    }

  private:
    Storage storage;
};

// This deduction guide is required for deducing references.
template <typename T>
Maybe(T) -> Maybe<T>;

// TODO: Support `void*`.
// Simplify nullable pointers.
template <typename T>
using MaybePtr = Maybe<Sentinel<T*, nullptr>>;

namespace detail {
    template <is_integral T>
    constexpr auto is_non_negative(T value) -> bool {
        return value >= 0;
    }
}  // namespace detail

// Simplify non-negative signed integers.
template <is_integral T>
using MaybeNonNegative =
    // A lambda here causes clangd 14 to crash.
    Maybe<Compact<T, detail::is_non_negative<T>, -1>>;

// Simplify non-zero numbers.
template <typename T>
using MaybeNonZero = Maybe<Sentinel<T, 0>>;

}  // namespace cat

using cat::nullopt;

// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/allocator>
#include <cat/linux>

namespace cat {

struct thread {
  public:
    thread() = default;
    thread(thread const&) = delete;

    // TODO: Default or delete a move constructor and assignment operator?

    // TODO: Use an `invocable` `concept`.
    auto create(is_allocator auto& allocator, idx initial_stack_size,
                auto const& function, void* p_args_struct) -> maybe<void> {
        scaredy result = this->handle.create(allocator, initial_stack_size,
                                             function, p_args_struct);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    [[nodiscard]]
    auto join() const -> maybe<void> {
        scaredy result = this->handle.wait();
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

  private:
    // This is platform-specific hidden code.
    [[maybe_unused]] nix::process handle;
};

void relax_cpu() {
    asm volatile("pause" ::
                     : "memory");
}

}  // namespace cat

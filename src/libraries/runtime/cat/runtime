// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/arithmetic>
#include <cat/meta>

// Name mangling prevents the linker from finding this symbol.
extern "C"
    // GCC wants to insert a `__asan_handle_no_return()` call, which breaks
    // argument loading.
    [[noreturn, gnu::used, gnu::no_sanitize_address,
// A `naked` function does not reserve stack space, which otherwise breaks
// argument loading on low optimization levels.
#ifndef NO_ARGC_ARGV
      gnu::naked
#endif
]] void
    _start();  // NOLINT

namespace cat {
// The `cat::exit()` function is provided globally. This streamlines out the
// existence of `_exit()`.
[[noreturn]] void exit(ssize exit_code = 0);

auto load_base_stack_pointer() -> void*;

// This must be inlined to align the stack pointer on the stack frame it is
// called from.
[[gnu::always_inline]] inline void align_stack_pointer_16() {
    asm("and $-16, %rsp");
}

// This must be inlined to align the stack pointer on the stack frame it is
// called from.
[[gnu::always_inline]] inline void align_stack_pointer_32() {
    asm("and $-32, %rsp");
}

// NOLINTNEXTLINE `__stack_chk_fail()` must begin with a double underscore.
extern "C" [[noreturn]] void __stack_chk_fail();

// NOLINTNEXTLINE `__cxa_atexit()` must begin with a double underscore.
extern "C" void __cxa_atexit(void (*p_callback)(void*), void* p_arg,
                             void* p_dso_handle);

class JmpBuffer {
    // This buffer layout should vary by all ISAs.
  private:
    // %rbx:
    // %rbp:
    // %r12:
    // %r13:
    // %r14:
    // %r15:
    [[maybe_unused]] unsigned long registers[6];
    // %rsp:
    [[maybe_unused]] unsigned long stack_pointer;
};

[[gnu::naked]] auto setjmp(JmpBuffer& jump_point) -> int;

[[noreturn, gnu::naked]] void longjmp(JmpBuffer& jump_point, int8 return_value);

}  // namespace cat

// NOLINTNEXTLINE `__dso_handle` must begin with a double underscore.
inline void* __dso_handle = nullptr;

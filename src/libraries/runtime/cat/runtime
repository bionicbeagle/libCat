// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/meta>
//
#include <cat/arithmetic>

namespace cat {

// Name mangling prevents the linker from finding this symbol.
extern "C"
    // GCC wants to insert a `__asan_handle_no_return()` call, which breaks
    // argument loading.
    [[noreturn, gnu::used, gnu::no_sanitize_address,
      gnu::force_align_arg_pointer]]
    void _start();  // NOLINT

// The `cat::exit()` function is provided globally. This streamlines out the
// existence of `_exit()`.
[[noreturn]]
void exit(iword exit_code = 0);

auto load_base_stack_pointer() -> void*;

// This must be inlined to align the stack pointer on the stack frame it is
// called from.
[[gnu::always_inline]]
inline void align_stack_pointer_16() {
    asm("and $-16, %rsp");
}

// This must be inlined to align the stack pointer on the stack frame it is
// called from.
[[gnu::always_inline]]
inline void align_stack_pointer_32() {
    asm("and $-32, %rsp");
}

extern "C" [[noreturn]]
// NOLINTNEXTLINE `__stack_chk_fail()` must begin with a double underscore.
void __stack_chk_fail();

// NOLINTNEXTLINE `__cxa_atexit()` must begin with a double underscore.
extern "C" void __cxa_atexit(void (*p_invocable)(void*), void* p_arg,
                             void* p_dso_handle);

class jmp_buffer {
    // This buffer layout should vary by all ISAs.

  private:
    // %rbx:
    // %rbp:
    // %r12:
    // %r13:
    // %r14:
    // %r15:
    [[maybe_unused]] unsigned long registers[6];
    // %rsp:
    [[maybe_unused]] unsigned long stack_pointer;
};

[[gnu::naked]]
auto setjmp(jmp_buffer& jump_point) -> int;

[[noreturn, gnu::naked]]
void longjmp(jmp_buffer& jump_point, int8 return_value);

#ifdef __SANITIZE_ADDRESS__
extern "C" {
// TODO: Comment these with documentation and use safer types.
void __asan_poison_memory_region(void const volatile* p_address, uword size);
void __asan_unpoison_memory_region(void const volatile* p_address, uword size);

// These functions are only for debugging.
void __asan_describe_address(void* p_address);
auto __asan_address_is_poisoned(void const volatile* p_address) -> int;
auto __asan_region_is_poisoned(void* p_begin, uword size) -> void*;
auto __asan_report_present() -> int;
auto __asan_get_report_pc() -> void*;
auto __asan_get_report_bp() -> void*;
auto __asan_get_report_sp() -> void*;
auto __asan_get_report_address() -> void*;
auto __asan_get_report_access_type() -> int;
auto __asan_get_report_access_size() -> __SIZE_TYPE__;
auto __asan_get_report_description() -> char const*;
auto __asan_locate_address(void* p_address, char* p_name, uword name_size,
                           void** p_region_address, uword* region_size)
    -> char const*;
auto __asan_get_alloc_stack(void* p_heap, void** pp_trace, uword size,
                            int* p_thread_id) -> __SIZE_TYPE__;
auto __asan_get_free_stack(void* p_heap, void** pp_trace, uword size,
                           int* p_thread_id) -> __SIZE_TYPE__;
void __asan_get_shadow_mapping(uword* p_shadow_scale, uword* p_shadow_offset);
}
#else
// TODO: Provide no-op implementations of these functions.
#endif

}  // namespace cat

// NOLINTNEXTLINE `__dso_handle` must begin with a double underscore.
inline void* __dso_handle = nullptr;

// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/iterator>
#include <cat/meta>

// `__BYTE_ORDER__` and `__ORDER_LITTLE_ENDIAN__` are macros defined by GCC.
namespace cat {

inline namespace literals {
    inline namespace bit_literals {
        // TODO: Is `<cat/bit>` the right place for these?
        constexpr auto operator""_ki(unsigned long long input) -> iword {
            return 1024 * static_cast<signed long long>(input);
        }

        constexpr auto operator""_uki(unsigned long long input) -> uword {
            return 1024u * input;
        }

        constexpr auto operator""_ki(long double input) -> iword {
            return static_cast<signed long long>(1024.f * input);
        }

        constexpr auto operator""_mi(unsigned long long input) -> iword {
            return 1024ll * 1024ll * static_cast<signed long long>(input);
        }

        constexpr auto operator""_umi(unsigned long long input) -> uword {
            return 1024ull * 1024ull * input;
        }

        constexpr auto operator""_mi(long double input) -> iword {
            return static_cast<signed long long>(1024.f * 1024.f * input);
        }

        constexpr auto operator""_gi(unsigned long long input) -> iword {
            return 1024ll * 1024ll * 1024ll *
                   static_cast<signed long long>(input);
        }

        constexpr auto operator""_ugi(unsigned long long input) -> uword {
            return 1024ull * 1024ull * 1024ull * input;
        }

        constexpr auto operator""_gi(long double input) -> iword {
            return static_cast<signed long long>(1024.f * 1024.f * 1024.f *
                                                 1024.f * input);
        }
    }  // namespace bit_literals
}  // namespace literals

inline constexpr bool is_target_little_endian =
    (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__);
inline constexpr bool is_target_big_endian = !is_target_little_endian;

inline constexpr idx char_bits = idx(sizeof(unsigned char) * 8u);
inline constexpr idx word_bits = idx(sizeof(uword) * 8u);
inline constexpr idx word_bytes = idx(sizeof(uword));

inline constexpr idx page_size = idx(4096_uki);

template <is_unsigned_integral T>
[[nodiscard]]
constexpr auto countl_zero(T value) -> idx {
    auto raw_value = make_raw_arithmetic(value);

    if (raw_value == 0) {
        // It is undefined behavior to pass 0 into clz.
        return idx(sizeof(T) * 8);
    }

    // `clz()` is a portable intrinsic.

    if constexpr (sizeof(raw_value) == 4) {
        return __builtin_clz(raw_value);
    } else if constexpr (sizeof(raw_value) == 8) {
        return __builtin_clzll(raw_value);
    } else {
        while (raw_value >>= 1) {
            ++raw_value;
        }
        return idx(sizeof(T) - raw_value);
    }
}

template <is_unsigned_integral T>
[[nodiscard]]
constexpr auto countl_one(T value) -> idx {
    auto raw_value = make_raw_arithmetic(value);
    return raw_value != limits<T>::max()
               ? countl_zero(static_cast<T>(~(raw_value)))
               : idx(sizeof(T) * 8u);
}

template <is_unsigned_integral T>
[[nodiscard]]
constexpr auto countr_zero(T value) -> idx {
    auto raw_value = make_raw_arithmetic(value);

    if (raw_value == 0) {
        // It is undefined behavior to pass 0 into ctz.
        return idx(sizeof(T) * 8u);
    }

    // `ctz()` is a portable intrinsic.

    if constexpr (sizeof(raw_value) <= 4) {
        return __builtin_ctz(raw_value);
    } else if constexpr (sizeof(raw_value) == 8) {
        return idx(__builtin_ctzll(raw_value));
    }
}

template <is_unsigned_integral T>
[[nodiscard]]
constexpr auto countr_one(T value) -> idx {
    return value != limits<T>::max() ? countl_one(static_cast<T>(~value))
                                     : idx(sizeof(T) * 8u);
}

template <is_unsigned_integral T>
[[nodiscard]]
constexpr auto popcount(T value) -> iword {
    auto raw_value = make_raw_arithmetic(value);
    if constexpr (__has_builtin(__builtin_popcount)) {
        if constexpr (sizeof(T) <= 4) {
            return __builtin_popcount(raw_value);
        } else {
            return __builtin_popcountll(raw_value);
        }
    } else {
        // This should only be used if there is no intrinsic, otherwise integers
        // promote to `unsigned int` for `__builtin_popcount()`.
        iword result = 0;
        for (; raw_value; raw_value >>= 1) {
            result += iword(raw_value & 1u);
        }

        return result;
    }
}

// If `value` is a power of two, or in other words, has exactly one set bit.
template <is_arithmetic T>
[[nodiscard]]
constexpr auto has_single_bit(T value) -> bool {
    return popcount(value) == 1;
}

}  // namespace cat

namespace x64 {
// Extracts `length` number of bits out of `from`, ending at the `offset` of the
// right-most bit. Those `length` bits are then the right-most bits of the
// return value.
template <cat::is_unsigned T>
[[nodiscard]]
constexpr auto extract_bits(T from, cat::is_unsigned_integral auto offset,
                            cat::is_unsigned_integral auto length) -> T {
    auto raw_from = cat::make_raw_arithmetic(from);
    auto raw_offset = cat::make_raw_arithmetic(offset);
    auto raw_length = cat::make_raw_arithmetic(length);

    if !consteval {
        if constexpr (__has_builtin(__builtin_ia32_bextr_u32) &&
                      sizeof(T) == 4) {
            return T(__builtin_ia32_bextr_u32(raw_from,
                                              raw_offset | (raw_length << 8)));
        } else if constexpr (__has_builtin(__builtin_ia32_bextr_u64) &&
                             sizeof(T) == 8) {
            return T(__builtin_ia32_bextr_u64(raw_from,
                                              raw_offset | (raw_length << 8)));
        }
    }
    constexpr unsigned char bits = sizeof(T) * 8u;
    auto const mask = T((1u << raw_length) * (raw_length < bits) - 1u).raw;
    return T((raw_from >> raw_offset) & (mask * (raw_offset < bits)));
}

// Extract the 1 bits from `value` which are also 1 at the same index in `mask`.
template <cat::is_unsigned_integral T, cat::is_unsigned_integral U>
    requires(sizeof(T) == sizeof(U))
[[nodiscard]]
constexpr auto extract_bits_mask(T value, U mask) -> T {
    T result = T(0u);
    auto raw_value = cat::make_raw_arithmetic(value);
    auto raw_mask = cat::make_raw_arithmetic(mask);

    if constexpr (__has_builtin(_pext_u32) && sizeof(T) == 4) {
        // `_pext_u32()` is a GCC intrinsic.
        return T(_pext_u32(raw_value, raw_mask));
    } else if constexpr (__has_builtin(_pext_u64) && sizeof(T) == 8) {
        // `_pext_u64()` is a GCC intrinsic.
        return T(_pext_u64(raw_value, raw_mask));
    } else {
        cat::make_raw_arithmetic_type<T> count = 0u;
        while (raw_mask != 0u) {
            if (raw_mask & 1) {
                result >>= 1;
                result |= raw_value << T(sizeof(T) * 8u - 1u);
                ++count;
            }
            raw_value >>= 1;
            raw_mask >>= 1;
        }

        result >>= (sizeof(T) * 8u - count) * (count > 0u);
        return result;
    }
}

// Place the bits set by `mask` into the right-most bits in the return value.
template <cat::is_unsigned_integral T, cat::is_unsigned_integral U>
    requires(sizeof(T) == sizeof(U))
[[nodiscard]]
constexpr auto deposit_bits_mask(T value, U mask) -> T {
    T result = T(0u);
    auto raw_value = cat::make_raw_arithmetic(value);
    auto raw_mask = cat::make_raw_arithmetic(mask);

    if constexpr (__has_builtin(_pdep_u32) && sizeof(T) == 4) {
        // `_pdep_u32()` is a GCC intrinsic.
        return T(_pdep_u32(raw_value, raw_mask));
    } else if constexpr (__has_builtin(_pdep_u64) && sizeof(T) == 8) {
        // `_pdep_u64()` is a GCC intrinsic.
        return T(_pdep_u64(raw_value, raw_mask));
    } else {
        T count = T(0u);
        while (raw_mask != 0u) {
            result >>= 1;
            if (raw_mask & 1) {
                result |= raw_value << T(sizeof(T) * 8u - 1u);
                raw_value >>= 1;
            }
            raw_mask >>= 1;
            ++count;
        }

        result >>= T(sizeof(T) * 8u - count) * T(count > 0u);
        return result;
    }
}

template <cat::is_unsigned_integral T>
[[nodiscard]]
constexpr auto zero_high_bits_at(T source, cat::uint4 bit_index) -> T {
    if !consteval {
        if constexpr (__has_builtin(__builtin_ia32_bzhi_si) && sizeof(T) == 4) {
            return __builtin_ia32_bzhi_si(cat::make_raw_arithmetic(source),
                                          bit_index.raw);
        } else if constexpr (__has_builtin(__builtin_ia32_bzhi_di) &&
                             sizeof(T) == 8) {
            return __builtin_ia32_bzhi_di(cat::make_raw_arithmetic(source),
                                          bit_index.raw);
        }
    }
    // TODO: Implement this.
    __builtin_unreachable();
}

}  // namespace x64

namespace cat {

class bit_value;
class bit_ptr;

namespace detail {
    constexpr auto get_bit_value(bit_value&) -> unsigned char&;
    constexpr auto get_bit_value(bit_value const&) -> unsigned char const&;
}  // namespace detail

template <is_unsigned_integral storage_type>
class bit_reference {
  private:
    friend bit_value;

    // This constructor is only used by the static factory functions.
    // A constructor is required to initialize a reference member, such as
    // `bit_reference::storage`.
    constexpr bit_reference(storage_type& in_storage, storage_type in_mask)
        : storage(in_storage), bit_mask(in_mask) {
        if !consteval {
            cat::assert(has_single_bit(in_mask));
        }
    }

  public:
    constexpr bit_reference(bit_reference<storage_type> const&) = default;
    constexpr bit_reference(bit_reference<storage_type>&&) = default;

    constexpr bit_reference(bit_value& other)
        : storage(detail::get_bit_value(other)), bit_mask(1u) {
    }

    constexpr bit_reference(bit_value const& other)
        : storage(detail::get_bit_value(other)), bit_mask(1u) {
    }

    // You cannot take a reference of r-values.
    constexpr bit_reference(bit_value&& other) = delete;

    // Create a `bit_reference` to a bit position specified by `mask` into a
    // `storage_type`.
    static constexpr auto from_mask(storage_type& reference, storage_type mask)
        -> bit_reference {
        // Call the internal `private:` constructor.
        return bit_reference(reference, mask);
    }

    // Create a `bit_reference` to a bit position `offset` bits from the right
    // of a `storage_type`.
    static constexpr auto from_offset(storage_type& reference, iword offset)
        -> bit_reference {
        if !consteval {
            cat::assert(offset < limits<storage_type>::bits);
        }
        // Call the internal `private:` constructor.
        return bit_reference(
            reference, storage_type(storage_type(1u)
                                    << storage_type(make_unsigned(offset))));
    }

    // Assign a true or false value to this bit.
    constexpr auto operator=(storage_type value) -> bit_reference& {
        this->assign(value);
        return *this;
    }

    // Assign a true or false value to this bit.
    constexpr auto operator=(bool value) -> bit_reference& {
        this->assign(value);
        return *this;
    }

    // Because `bit_reference` and `bit_value` convert to bool, this comparison
    // works between all the above.
    friend constexpr auto operator==(bit_reference<storage_type> const& self,
                                     bool other) -> bool {
        return self.is_set() == other;
    }

    // Implicitly convert this bit to a true or false value.
    constexpr operator bool() const {
        return this->is_set();
    }

    // Assign a true or false value to this bit.
    constexpr auto assign(bool value) -> bit_reference& {
        value ? this->set() : this->unset();
        return *this;
    }

    // Assign another bit's value to this bit.
    template <is_unsigned_integral T>
    constexpr auto assign(storage_type value) -> bit_reference& {
        value & 1u ? set() : unset();
        return *this;
    }

    // Flag this bit on.
    constexpr auto set() -> bit_reference& {
        this->storage |= this->bit_mask;
        return *this;
    }

    // Flag this bit off.
    constexpr auto unset() -> bit_reference& {
        this->storage &= ~(this->bit_mask);
        return *this;
    }

    // Flag this bit as the opposite of its current state.
    constexpr auto flip() -> bit_reference& {
        this->storage ^= this->bit_mask;
        return *this;
    }

    [[nodiscard]]
    constexpr auto is_set() const -> bool {
        return static_cast<bool>(this->storage & this->bit_mask);
    }

    [[nodiscard]]
    constexpr auto mask() const -> remove_cv<storage_type> {
        return this->bit_mask;
        return *this;
    }

  private:
    storage_type& storage;
    remove_cv<storage_type> bit_mask;
};

template <is_same<bit_value> T>
bit_reference(T) -> bit_reference<unsigned char>;

// TODO: Add a nullable `bit_ptr` class.

class bit_value {
    friend constexpr auto cat::detail::get_bit_value(bit_value&)
        -> unsigned char&;
    friend constexpr auto cat::detail::get_bit_value(bit_value const&)
        -> unsigned char const&;

  public:
    template <is_unsigned_integral>
    friend class bit_reference;

    constexpr bit_value() = default;
    constexpr bit_value(bit_value const&) = default;
    constexpr bit_value(bit_value&&) = default;

    // Implicitly convert from a bool.
    constexpr bit_value(bool other) : value(other) {
    }

    // Create a `bit_value` copied from a bit position `offset` bits from the
    // right of a `storage_type`.
    template <is_unsigned_integral storage_type>
    static constexpr auto from_offset(storage_type word, iword offset) {
        assert(offset < limits<storage_type>::bits);
        bit_value bit;
        bit.value = static_cast<bool>((word >> offset) & 1);
    }

    constexpr auto operator=(bit_value const& other) -> bit_value& = default;

    template <is_unsigned_integral T>
    constexpr auto operator=(bit_reference<T> other) -> bit_value& {
        this->value = other.is_set();
        return *this;
    }

    constexpr auto operator=(bool other) -> bit_value& {
        this->value = other;
        return *this;
    }

    // Implicitly convert to `bool`.
    constexpr operator bool() const {
        return this->value;
    }

    constexpr friend auto operator==(bit_value const& self,
                                     bit_value const& other) -> bool {
        return self.value == other.value;
    }

    constexpr friend auto operator==(bit_value const& self, bool other)
        -> bool {
        return self.value == other;
    }

    constexpr friend auto operator&(bit_value const& self,
                                    bit_value const& other) -> bit_value {
        return static_cast<bool>(static_cast<unsigned char>(self.value) &
                                 static_cast<unsigned char>(other.value));
    }

    constexpr auto operator&=(bit_value const& other) -> bit_value& {
        this->value &= other.value;
        return *this;
    }

    constexpr friend auto operator|(bit_value const& self,
                                    bit_value const& other) -> bit_value {
        return static_cast<bool>(static_cast<unsigned char>(self.value) |
                                 static_cast<unsigned char>(other.value));
    }

    constexpr auto operator|=(bit_value const& other) -> bit_value& {
        this->value |= other.value;
        return *this;
    }

    constexpr friend auto operator^(bit_value const& self,
                                    bit_value const& other) -> bit_value {
        return static_cast<bool>(static_cast<unsigned char>(self.value) ^
                                 static_cast<unsigned char>(other.value));
    }

    constexpr auto operator^=(bit_value const& other) -> bit_value& {
        this->value ^= static_cast<unsigned char>(other.value);
        return *this;
    }

    constexpr auto operator~() const -> bit_value {
        bit_value bit = !this->value;
        return bit;
    }

    constexpr void assign(bit_value const& input) {
        this->value = input.value;
    }

    template <is_unsigned_integral T>
    constexpr void assign(bit_reference<T> input) {
        this->value = input.is_set();
    }

    constexpr void assign(bool input) {
        this->value = input;
    }

    // Flag this bit on.
    constexpr auto set() -> bit_value& {
        this->value = true;
        return *this;
    }

    // Flag this bit off.
    constexpr auto unset() -> bit_value& {
        this->value = false;
        return *this;
    }

    // Flag this bit as the opposite of its current state.
    constexpr auto flip() -> bit_value& {
        this->value = !this->value;
        return *this;
    }

    [[nodiscard]]
    constexpr auto is_set() const -> bool {
        return this->value;
    }

  private:
    bool value;
};

struct byte;

template <typename iterator>
// Only storage types can be iterated bitwise.
    requires(is_unsigned_integral<typename iterator::value_type>
             /* || is_same<typename iterator::value_type, byte> */)
class bit_iterator : public iterator_interface<bit_iterator<iterator>> {
  private:
    using type = iterator;
    using word_type = iterator::value_type;
    static constexpr iword word_bits = limits<word_type>::bits;

  public:
    using value_type = bit_value;
    using reference = bit_reference<word_type>;

    constexpr bit_iterator() = default;
    constexpr bit_iterator(bit_iterator const&) = default;
    constexpr bit_iterator(bit_iterator&&) = default;

    constexpr bit_iterator(iterator const& other, iword current_bit = 0)
        : internal_iterator(other), bit_position(current_bit) {
    }

    constexpr auto dereference() const -> reference {
        return reference::from_offset(*internal_iterator, this->bit_position);
    }

    constexpr void advance(iword offset) {
        iword advance_bits = this->bit_position + offset;
        iword bytes_overflow = advance_bits / this->word_bits;
        if (advance_bits < 0 &&
            ((bytes_overflow * word_bits) != advance_bits)) {
            --bytes_overflow;
        }
        this->internal_iterator += bytes_overflow;
        this->bit_position = advance_bits - bytes_overflow * word_bits;
    }

    constexpr auto distance_to(bit_iterator const& other) const -> iword {
        iword const word_difference =
            this->internal_iterator - other.internal_iterator;
        // Multiply the number of words between the two iterators by the size of
        // a word in bits, then add the difference between the iterators'
        // current bit offset within their word. That gives the total number of
        // bits between any two bit iterators.
        return (word_difference * word_bits) +
               (this->bit_position - other.bit_position);
    }

  private:
    iterator internal_iterator;
    iword bit_position;
};

inline constexpr bit_value one_bit = true;
inline constexpr bit_value zero_bit = false;

namespace detail {
    constexpr auto get_bit_value(bit_value& value) -> unsigned char& {
        return *bit_cast<unsigned char*>(&value.value);
    }

    constexpr auto get_bit_value(bit_value const& value)
        -> unsigned char const& {
        return *bit_cast<unsigned char const*>(&value.value);
    }
}  // namespace detail

[[nodiscard]]
constexpr auto invert_endianess(is_unsigned_integral auto value) {
    auto raw_value = make_raw_arithmetic(value);

    if constexpr (sizeof(raw_value) == 1) {
        // This does not exist.
        // return __builtin_bswap8(raw_value);

        // TODO: Implement this.
        __builtin_unreachable();
    }
    if constexpr (sizeof(raw_value) == 2) {
        return __builtin_bswap16(raw_value);
    }
    if constexpr (sizeof(raw_value) == 4) {
        return __builtin_bswap32(raw_value);
    }
    if constexpr (sizeof(raw_value) == 8) {
        return __builtin_bswap64(raw_value);
    }
}

// `byte` is a strongly-typed `struct` rather than an `enum class` so that it
// has operators.
// TODO: Add some member functions.
struct byte {
    unsigned char value;

    constexpr byte() = default;

    constexpr byte(auto input)
        requires(sizeof(input) == 1)
        : value(input) {
    }

    constexpr byte(auto const& input)
        requires(sizeof(input) == 1)
        : value(input) {
    }

    template <rvalue T>
        requires(sizeof(T) == 1)
    constexpr byte(T&& input) : value(forward<T>(input)) {  // NOLINT
    }

    [[nodiscard]] constexpr operator char() const {
        return static_cast<char>(this->value);
    }

    [[nodiscard]] constexpr operator unsigned char() const {
        return static_cast<unsigned char>(this->value);
    }

    [[nodiscard]] constexpr operator signed char() const {
        return static_cast<signed char>(this->value);
    }

    template <typename T>
    [[nodiscard]] constexpr explicit operator T()
        requires(sizeof(T) == 1)
    {
        return bit_cast<T>(value);
    }

    [[nodiscard]]
    constexpr auto
    operator&(is_integral auto from) -> byte {
        return this->value & from;
    }

    constexpr auto operator&=(is_integral auto from) -> byte& {
        this->value = this->value & from;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator|(is_integral auto from) -> byte {
        return this->value | from;
    }

    constexpr auto operator|=(is_integral auto from) -> byte& {
        this->value = this->value | from;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator<<(is_integral auto from) -> byte {
        return this->value << from;
    }

    constexpr auto operator<<=(is_integral auto from) -> byte& {
        this->value = this->value << from;
        return *this;
    }

    [[nodiscard]]
    constexpr auto
    operator>>(is_integral auto from) -> byte {
        return this->value >> from;
    }

    constexpr auto operator>>=(is_integral auto from) -> byte& {
        this->value = this->value >> from;
        return *this;
    }
};

// TODO: Support `volatile` qualified pointers.
// TODO: Aligned pointer types and alignment casts.
// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4201.html

template <typename U>
[[nodiscard]]
constexpr auto is_aligned(U* p_value, uword alignment) -> bool;

template <typename U>
[[nodiscard]]
// NOLINTNEXTLINE This is forward-declared in `<cat/memory>`.
constexpr auto is_aligned(uintptr<U> p_value, uword alignment) -> bool;

template <typename U>
[[nodiscard]]
constexpr auto align_up(U* p_value, uword alignment) -> U*;
template <typename U>
constexpr auto align_up(uintptr<U> p_value, uword alignment) -> uintptr<U>;

template <typename U>
[[nodiscard]]
constexpr auto align_down(U* p_value, uword alignment) -> U*;

template <typename U>
[[nodiscard]]
constexpr auto align_down(intptr<U> p_value, uword alignment) -> intptr<U>;

template <typename U>
[[nodiscard]]
constexpr auto align_down(uintptr<U> p_value, uword alignment) -> uintptr<U>;

template <is_integral T>
[[nodiscard]]
constexpr auto has_single_bit(T value) -> bool {
    auto raw = make_raw_arithmetic(value);
    return (raw & (raw - 1u)) == 0u;
}

template <typename>
struct enum_flag_trait : false_trait {};

template <typename T>
concept is_enum_flag = enum_flag_trait<T>::value;

}  // namespace cat

template <cat::is_enum_flag T>
[[nodiscard]]
constexpr auto
operator|(T flag_1, T flag_2) -> T {
    using U = cat::underlying_type<T>;
    return static_cast<T>(static_cast<U>(flag_1) | static_cast<U>(flag_2));
}

template <cat::is_enum_flag T>
[[nodiscard]]
constexpr auto
operator|(T flag_1, cat::underlying_type<T> flag_2) -> T {
    using U = cat::underlying_type<T>;
    return static_cast<T>(static_cast<U>(flag_1) | flag_2);
}

template <cat::is_enum_flag T>
[[nodiscard]]
constexpr auto
operator&(T flag_1, T flag_2) -> T {
    using U = cat::underlying_type<T>;
    return static_cast<T>(static_cast<U>(flag_1) & static_cast<U>(flag_2));
}

// TODO: Fix bit flag operators.
// template <EnumFlag T>
//[[nodiscard]] constexpr auto operator&(T flag_1,underlying_type<T>
// flag_2) -> T {
//     using U =underlying_type<T>;
//     return static_cast<T>(static_cast<U>(flag_1) & flag_2);
// }

#include "./implementations/align_down.tpp"
#include "./implementations/align_up.tpp"
#include "./implementations/is_aligned.tpp"

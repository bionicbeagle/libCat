// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/meta>

// `__BYTE_ORDER__` and `__ORDER_LITTLE_ENDIAN__` are macros defined by GCC.
constexpr bool is_little_endian = (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__);
constexpr bool is_big_endian = !is_little_endian;

namespace cat {

[[gnu::const]] constexpr auto invert_endianess(is_integral auto value) {
    // TODO: Handle `cat::Arithmetic`.
    if constexpr (sizeof(value) == 1) {
        return __builtin_bswap8(value);
    }
    if constexpr (sizeof(value) == 2) {
        return __builtin_bswap16(value);
    }
    if constexpr (sizeof(value) == 4) {
        return __builtin_bswap32(value);
    }
    if constexpr (sizeof(value) == 8) {
        return __builtin_bswap64(value);
    }
}

// `Byte` is a strongly-typed `struct` rather than an `enum class`, as in the
// STL, so that it can carry member functions.
// TODO: Add some member functions.
struct Byte {  // NOLINT
    unsigned char value;

    constexpr Byte() = default;

    constexpr Byte(auto input) requires(sizeof(input) == 1) {
        this->value = input;
    }

    constexpr Byte(auto const& input) requires(sizeof(input) == 1) {
        this->value = input;
    }

    template <typename T>
    constexpr Byte(T&& input)  // NOLINT
        requires(sizeof(input) == 1) {
        this->value = forward<T>(input);
    }

    [[nodiscard]] constexpr operator char() const {
        return static_cast<char>(this->value);
    }

    [[nodiscard]] constexpr operator unsigned char() const {
        return static_cast<unsigned char>(this->value);
    }

    [[nodiscard]] constexpr operator signed char() const {
        return static_cast<signed char>(this->value);
    }

    template <typename T>
    [[nodiscard]] constexpr explicit operator T() requires(sizeof(T) == 1) {
        return bit_cast<T>(value);
    }

    [[nodiscard]] constexpr auto operator&(is_integral auto from) -> Byte {
        return this->value & from;
    }
    constexpr auto operator&=(is_integral auto from) -> Byte& {
        this->value = this->value & from;
        return *this;
    }

    [[nodiscard]] constexpr auto operator|(is_integral auto from) -> Byte {
        return this->value | from;
    }
    constexpr auto operator|=(is_integral auto from) -> Byte& {
        this->value = this->value | from;
        return *this;
    }

    [[nodiscard]] constexpr auto operator<<(is_integral auto from) -> Byte {
        return this->value << from;
    }
    constexpr auto operator<<=(is_integral auto from) -> Byte& {
        this->value = this->value << from;
        return *this;
    }

    [[nodiscard]] constexpr auto operator>>(is_integral auto from) -> Byte {
        return this->value >> from;
    }
    constexpr auto operator>>=(is_integral auto from) -> Byte& {
        this->value = this->value >> from;
        return *this;
    }
};

// TODO: Support `volatile` qualified pointers.
// TODO: Aligned pointer types and alignment casts.
// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4201.html

template <typename U>
[[nodiscard]] constexpr auto is_aligned(U* p_value, usize alignment) -> bool;

template <typename U>
[[nodiscard]] constexpr auto is_aligned(uintptr<U> p_value, usize alignment)
    -> bool;

template <typename U>
[[nodiscard]] constexpr auto align_up(U* p_value, usize alignment) -> U*;
template <typename U>
constexpr auto align_up(uintptr<U> p_value, usize alignment) -> uintptr<U>;

template <typename U>
[[nodiscard]] constexpr auto align_down(U* p_value, usize alignment) -> U*;

template <typename U>
[[nodiscard]] constexpr auto align_down(intptr<U> p_value, usize alignment)
    -> intptr<U>;

template <typename U>
[[nodiscard]] constexpr auto align_down(uintptr<U> p_value, usize alignment)
    -> uintptr<U>;

template <is_integral T>
[[nodiscard]] constexpr auto has_single_bit(T value) -> bool {
    return (value & (value - 1)) == 0;
}

template <typename>
struct EnumFlagTrait : FalseTypeTrait {};

template <typename T>
concept is_enum_flag = EnumFlagTrait<T>::value;

}  // namespace cat

template <cat::is_enum_flag T>
[[nodiscard]] constexpr auto operator|(T flag_1, T flag_2) -> T {
    using U = cat::UnderlyingType<T>;
    return static_cast<T>(static_cast<U>(flag_1) | static_cast<U>(flag_2));
}

template <cat::is_enum_flag T>
[[nodiscard]] constexpr auto operator|(T flag_1, cat::UnderlyingType<T> flag_2)
    -> T {
    using U = cat::UnderlyingType<T>;
    return static_cast<T>(static_cast<U>(flag_1) | flag_2);
}

template <cat::is_enum_flag T>
[[nodiscard]] constexpr auto operator&(T flag_1, T flag_2) -> T {
    using U = cat::UnderlyingType<T>;
    return static_cast<T>(static_cast<U>(flag_1) & static_cast<U>(flag_2));
}

// TODO: Fix bit flag operators.
// template <EnumFlag T>
//[[nodiscard]] constexpr auto operator&(T flag_1,UnderlyingType<T>
// flag_2) -> T {
//     using U =UnderlyingType<T>;
//     return static_cast<T>(static_cast<U>(flag_1) & flag_2);
// }

constexpr auto operator""_ki(unsigned long long input) -> ssize {
    return 1024 * static_cast<signed long long>(input);
}

constexpr auto operator""_uki(unsigned long long input) -> usize {
    return 1024u * input;
}

constexpr auto operator""_ki(long double input) -> ssize {
    return static_cast<signed long long>(1024.f * input);
}

constexpr auto operator""_mi(unsigned long long input) -> ssize {
    return 1024ll * 1024ll * static_cast<signed long long>(input);
}

constexpr auto operator""_umi(unsigned long long input) -> usize {
    return 1024ull * 1024ull * input;
}

constexpr auto operator""_mi(long double input) -> ssize {
    return static_cast<signed long long>(1024.f * 1024.f * input);
}

constexpr auto operator""_gi(unsigned long long input) -> ssize {
    return 1024ll * 1024ll * 1024ll * static_cast<signed long long>(input);
}

constexpr auto operator""_ugi(unsigned long long input) -> usize {
    return 1024ull * 1024ull * 1024ull * input;
}

constexpr auto operator""_gi(long double input) -> ssize {
    return static_cast<signed long long>(1024.f * 1024.f * 1024.f * 1024.f *
                                         input);
}

#include "./implementations/align_down.tpp"
#include "./implementations/align_up.tpp"
#include "./implementations/is_aligned.tpp"

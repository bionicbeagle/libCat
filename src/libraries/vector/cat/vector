// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/algorithm>
#include <cat/allocator>
#include <cat/array>
#include <cat/collection>
#include <cat/math>
#include <cat/utility>

// The deprecated copy constructor is intended must be used internally, so
// disable deprecated warnings within this file.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace cat {

// TODO: Support `__sanitizer_annotate_contiguous_container`.

template <typename T>
class Vector : public CollectionFacade<Vector<T>, T> {
  public:
    constexpr Vector()
        : p_storage(nullptr), current_size(0), current_capacity(0) {
        if (is_constant_evaluated()) {
            this->p_storage = nullptr;
        }
    };

    constexpr Vector(Vector<T>&& other_vector) = default;

    constexpr ~Vector() {
        if (is_constant_evaluated()) {
            delete[] this->p_storage;
        }
    }

  private:
    // Only allow the shallow copy constructor to be used by these static
    // factory member functions.
    [[deprecated(
        "The copy-constructor is hidden. Use `.clone()` "
        "instead!")]] constexpr Vector(Vector<T> const& other_vector) = default;

    // Reallocate this vector's memory if it is exceeded, in a non-`constexpr`
    // context.
    constexpr auto increase_storage(is_stable_allocator auto& allocator)
        -> Maybe<void> {
        ssize minimum_capacity;
        if (this->current_capacity > 0) [[likely]] {
            minimum_capacity = this->current_capacity * 2;
        } else {
            // If this storage has not been allocated yet, then greedily
            // allocate its capacity as 4.
            minimum_capacity = 4;
        }

        // TODO: I am fairly certain this is a bug in GCC. This works around
        // that.
        if (is_constant_evaluated()) {
            T* p_new = new T[minimum_capacity.raw];
            for (ssize::Raw i = 0; i < this->current_size; ++i) {
                construct_at(p_new + i, move(this->p_storage[i]));
            }
            for (ssize i = this->current_size + 1; i < minimum_capacity; ++i) {
                construct_at(p_new + i.raw);
            }
            delete[] this->p_storage;
            this->p_storage = p_new;
            this->current_capacity = minimum_capacity;
        } else {
            // Make a new allocation with size feedback.
            auto [alloc_span, alloc_bytes] =
                TRY(allocator.template resalloc_multi(
                    this->p_storage, this->current_capacity, minimum_capacity));

            this->current_capacity = alloc_bytes * ssizeof<T>();
            this->p_storage = alloc_span.data();
        }

        return monostate;
    }

  public:
    [[nodiscard]] static constexpr auto reserved(
        is_stable_allocator auto& allocator, ssize capacity)
        -> Maybe<Vector<T>> {
        Vector<T> new_vector;
        TRY(new_vector.reserve(allocator, capacity));
        return new_vector;
    }

    [[nodiscard]] static constexpr auto filled(
        is_stable_allocator auto& allocator, ssize count, T const& value)
        -> Maybe<Vector<T>> {
        Vector<T> new_vector;
        Maybe result = new_vector.reserve(allocator, count);
        if (!result.has_value()) {
            return nullopt;
        }
        new_vector.current_size = count;
        // TODO: Call a vectorized fill memory function.
        for (T& element : new_vector) {
            element = value;
        }
        return new_vector;
    }

    // Get the non-`const` address of this `Vector`'s internal array.
    [[nodiscard]] constexpr auto data() -> T* {
        return &(this->p_storage[0]);
    }

    // Get the `const` address of this `Vector`'s internal array.
    [[nodiscard]] constexpr auto data() const -> T const* {
        return &(this->p_storage[0]);
    }

    [[nodiscard]] constexpr auto size() const -> ssize {
        return this->current_size;
    }

    [[nodiscard]] constexpr auto capacity() const -> ssize {
        return this->current_capacity;
    }

    // Try to allocate storage for at least `minimum_capacity` number of `T`s.
    [[nodiscard]] constexpr auto reserve(is_stable_allocator auto& allocator,
                                         ssize minimum_capacity)
        -> Maybe<void> {
        if (minimum_capacity > this->current_capacity) {
            // TODO: I am fairly certain this is a bug in GCC. This works around
            // that.
            if (is_constant_evaluated()) {
                delete[] this->p_storage;
                this->p_storage = new T[minimum_capacity.raw];
                this->current_capacity = minimum_capacity;

                for (ssize i = this->current_size + 1;
                     i < this->current_capacity; ++i) {
                    construct_at(this->p_storage + i);
                }
            } else {
                auto [alloc_span, alloc_bytes] =
                    TRY(allocator.template resalloc_multi(
                        this->p_storage, this->current_capacity,
                        minimum_capacity));

                p_storage = alloc_span.data();
                this->current_capacity = alloc_bytes / ssizeof<T>();
            }
        }

        // If the new capacity is not larger, do nothing.
        return monostate;
    }

    // Try to change the size of this `Vector`.
    [[nodiscard]] constexpr auto resize(is_stable_allocator auto& allocator,
                                        ssize size) -> Maybe<void> {
        if (size > this->current_capacity) {
            // This sets `this->current_capacity` and `this->p_storage`.
            TRY(this->reserve(allocator, size));
        }

        // If the new size is not larger, simply shrink size and maintain
        // capacity.
        this->current_size = size;
        return monostate;
    }

    // Deep-copy the contents of this `Vector`.
    [[nodiscard]] constexpr auto clone(
        is_stable_allocator auto& allocator) const& -> Maybe<Vector<T>> {
        Vector<T> new_vector =
            TRY(Vector<T>::reserved(allocator, this->current_capacity));
        new_vector.current_size = this->current_size;
        relocate(this->begin(), this->end(), new_vector.begin());

        return new_vector;
    }

    // TODO: rval-ref overload of `.push_back()`.
    // TODO: `.emplace_back()`.

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    [[nodiscard]] constexpr auto push_back(is_stable_allocator auto& allocator,
                                           U const& value) -> Maybe<void> {
        if (this->current_size + 1 > this->current_capacity) {
            TRY(this->increase_storage(allocator));
        }

        this->p_storage[this->current_size.raw] = static_cast<T>(value);
        ++(this->current_size);
        return monostate;
    }

  private:
    T* p_storage;
    ssize current_size;
    ssize current_capacity;
};

}  // namespace cat

#pragma GCC diagnostic pop

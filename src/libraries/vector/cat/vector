// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/algorithm>
#include <cat/allocator>
#include <cat/array>
#include <cat/collection>
#include <cat/math>

// The deprecated copy constructor is intended must be used internally, so
// disable deprecated warnings within this file.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace cat {

// TODO: Support `__sanitizer_annotate_contiguous_container`.

template <typename T>
class Vector : public CollectionFacade<Vector<T>, T> {
  public:
    constexpr Vector()
        : p_storage(nullptr), current_size(0), current_capacity(0) {
        if (is_constant_evaluated()) {
            // This array cannot be length 0 or `nullptr` in a `constexpr`
            // context.
            this->p_storage = new T[1];
            this->p_storage[0] = 0;
        }
    };

    constexpr Vector(Vector<T>&& other_vector) = default;

    constexpr ~Vector() {
        if (is_constant_evaluated()) {
            delete[] this->p_storage;
        }
    }

  private:
    // Only allow the shallow copy constructor to be used by these static
    // factory member functions.
    [[deprecated(
        "The copy-constructor is hidden. Use `.clone()` "
        "instead!")]] constexpr Vector(Vector<T> const& other_vector) = default;

    // Reallocate this vector's memory if it is exceeded, in a non-`constexpr`
    // context.
    auto double_storage(is_stable_allocator auto& allocator) -> Maybe<void> {
        ssize new_capacity;
        if (this->current_capacity > 0) [[likely]] {
            new_capacity = this->current_capacity * 2;
        } else {
            // If this storage has not been allocated yet, then greedily
            // allocate its capacity as 4.
            new_capacity = 4;
        }

        // Make a new allocation.
        Span allocation = TRY(allocator.template realloc_multi(
            this->p_storage, this->current_capacity, new_capacity));

        this->p_storage = allocation.data();
        this->current_capacity = allocation.size();
        return monostate;
    }

    // Reallocate this vector's memory if it is exceeded, in a `constexpr`
    // context.
    consteval void const_double_storage() {
        ssize const new_capacity = max(4_sz, this->current_capacity * 2);
        T* p_new = new T[new_capacity.raw];

        for (ssize::Raw i = 0; i < this->current_size; ++i) {
            p_new[i] = move(this->p_storage[i]);
        }

        delete[] this->p_storage;
        this->p_storage = p_new;
        this->current_capacity = new_capacity;
    }

  public:
    [[nodiscard]] static auto reserved(is_stable_allocator auto& allocator,
                                       ssize capacity) -> Maybe<Vector<T>> {
        Vector<T> new_vector;
        TRY(new_vector.reserve(allocator, capacity));
        return new_vector;
    }

    [[nodiscard]] consteval static auto reserved(ssize count) -> Vector<T> {
        Vector<T> new_vector;
        new_vector.reserve(count);
        return new_vector;
    }

    [[nodiscard]] static auto filled(is_stable_allocator auto& allocator,
                                     ssize count, T const& value)
        -> Maybe<Vector<T>> {
        Vector<T> new_vector;
        Maybe result = new_vector.reserve(allocator, count);
        if (!result.has_value()) {
            return nullopt;
        }
        new_vector.current_size = count;
        // TODO: Call a vectorized fill memory function.
        for (T& element : new_vector) {
            element = value;
        }
        return new_vector;
    }

    // Get the non-`const` address of this `Vector`'s internal array.
    [[nodiscard]] constexpr auto data() -> T* {
        return &(this->p_storage[0]);
    }

    // Get the `const` address of this `Vector`'s internal array.
    [[nodiscard]] constexpr auto data() const -> T const* {
        return &(this->p_storage[0]);
    }

    [[nodiscard]] constexpr auto size() const -> ssize {
        return this->current_size;
    }

    [[nodiscard]] constexpr auto capacity() const -> ssize {
        return this->current_capacity;
    }

    // Try to change the capacity of this `Vector` in a non-`constexpr` context.
    [[nodiscard]] auto reserve(is_stable_allocator auto& allocator,
                               ssize new_capacity) -> Maybe<void> {
        if (new_capacity > this->current_capacity) {
            // TODO: Can this be simplified with iterators?
            // TODO: `.resalloc_multi()`.
            T* p_new =
                TRY(allocator.template alloc_multi<T>(new_capacity)).data();

            // TODO: Generalize copying from one collectian to another.
            if constexpr (is_trivially_relocatable<T>) {
                copy_memory(this->p_storage, p_new,
                            this->current_size * ssizeof<T>());
            } else {
                for (ssize::Raw i = 0; i < this->current_size; ++i) {
                    p_new[i] = move(this->p_storage[i]);
                }
            }

            allocator.free_multi(this->p_storage, this->current_size);

            this->p_storage = p_new;
            this->current_capacity = new_capacity;
            return monostate;
        }

        // If the new capacity is not larger, do nothing.
        return monostate;
    }

    // Change the capacity of this `Vector` in a `constexpr` context.
    consteval void reserve(ssize new_capacity) {
        if (new_capacity > this->current_capacity) {
            // TODO: `.opq_resalloc()`.
            T* p_new = new T[new_capacity.raw];
            for (ssize::Raw i = 0; i < this->current_size; ++i) {
                p_new[i] = move(this->p_storage[i]);
            }

            delete[] this->p_storage;
            this->p_storage = p_new;
            this->current_capacity = new_capacity;
        }
        // If the new capacity is not larger, do nothing.
    }

    // Try to change the size of this `Vector` in a non-`constexpr` context.
    [[nodiscard]] auto resize(is_stable_allocator auto& allocator,
                              ssize new_size) -> Maybe<void> {
        if (new_size > this->current_capacity) {
            TRY(this->reserve(allocator, new_size));

            // Construct `T` at the newly reserved memory.
            for (ssize i = this->current_size; i < new_size; ++i) {
                construct_at(this->p_storage + i);
            }

            this->current_size = new_size;
            return monostate;
        }

        // If the new size is not larger, simply shrink size and maintain
        // capacity.
        this->current_size = new_size;
        return monostate;
    }

    // Try to change the size of this `Vector` in a `constexpr` context.
    consteval void resize(ssize new_size) {
        if (new_size > this->current_capacity) {
            T* p_new = new T[new_size.raw];
            for (ssize::Raw i = 0; i < this->current_size; ++i) {
                p_new[i] = move(this->p_storage[i]);
            }
            for (ssize::Raw i = this->current_size.raw; i < new_size; i++) {
                p_new[i] = T{};
            }

            delete[] this->p_storage;
            this->p_storage = p_new;
            this->current_size = new_size;
            this->current_capacity = new_size;
            return;
        }

        // If the new size is not larger, simply shrink size and maintain
        // capacity.
        this->current_size = new_size;
    }

    // Deep-copy the contents of this `Vector`.
    [[nodiscard]] auto clone(
        is_stable_allocator auto& allocator) const& -> Maybe<Vector<T>> {
        Vector<T> new_vector =
            TRY(Vector<T>::reserved(allocator, this->current_capacity));
        new_vector.current_size = this->current_size;
        relocate(this->begin(), this->end(), new_vector.begin());

        return new_vector;
    }

    [[nodiscard]] consteval auto clone() const& -> Vector<T> {
        Vector<T> new_vector = Vector<T>::reserved(this->current_capacity);
        new_vector.current_size = this->current_size;
        for (ssize i = 0; i < this->current_size; ++i) {
            new_vector[i] = move(this->p_storage[i]);
        }
        return new_vector;
    }

    // TODO: rval-ref overload of `.push_back()`.
    // TODO: `.emplace_back()`.

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    [[nodiscard]] auto push_back(is_stable_allocator auto& allocator,
                                 U const& value) -> Maybe<void> {
        if (this->current_size + 1 > this->current_capacity) {
            Maybe result = this->double_storage(allocator);
            if (!result.has_value()) {
                return nullopt;
            }
        }
        this->p_storage[this->current_size.raw] = static_cast<T>(value);
        this->current_size += 1;
        return monostate;
    }

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    consteval void push_back(U const& value) {
        if (this->current_size + 1 > this->current_capacity) {
            this->const_double_storage();
        }
        this->p_storage[this->current_size.raw] = static_cast<T>(value);
        this->current_size += 1;
    }

  private:
    T* p_storage;
    ssize current_size;
    ssize current_capacity;
};

}  // namespace cat

#pragma GCC diagnostic pop

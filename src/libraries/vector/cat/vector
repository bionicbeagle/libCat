// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/algorithm>
#include <cat/allocator>
#include <cat/array>
#include <cat/collection>
#include <cat/math>
#include <cat/utility>

namespace cat {

// TODO: Support `__sanitizer_annotate_contiguous_container`.

template <typename T>
class vector : public collection_interface<vector<T>, T, true> {
  public:
    using value_type = T;

    constexpr vector()
        : p_storage(nullptr), current_size(0), current_capacity(0) {
        if consteval {
            this->p_storage = nullptr;
        }
    };

    constexpr vector(vector<T>&& other_vector) = default;

    constexpr ~vector() {
        if consteval {
            delete[] this->p_storage;
        }
    }

  protected:
    // Being `protected:` permits derived classes and adaptors to call this.
    // Only allow the shallow copy constructor to be used by these static
    // factory member functions. For public copying, `.clone()` should be used.
    [[deprecated(
        "Implicit copying of `cat::vector` is forbidden. Call `.clone() "
        "instead!")]]  //
    constexpr vector(vector<T> const& other_vector) = default;

    // Reallocate memory, or make an initial allocation.
    constexpr auto internal_allocate(is_allocator auto& allocator,
                                     uword minimum_capacity) {
        if (this->p_storage == nullptr) {
            return allocator.template salloc_multi<T>(minimum_capacity);
        }
        return allocator.resalloc_multi(this->p_storage, this->current_capacity,
                                        minimum_capacity);
    }

    // Reallocate this vector's memory if it is exceeded, in a non-`constexpr`
    // context.
    constexpr auto increase_storage(is_allocator auto& allocator)
        -> maybe<void> {
        uword const minimum_capacity =
            (this->current_capacity > 0u)
                ? minimum_capacity = this->current_capacity * 2u
                // If this storage has not been allocated yet, then greedily
                // allocate its capacity as 4.
                : 4u;

        // TODO: I think there is a bug in GCC constexpr memory. This is a
        // workaround.
        if consteval {
            T* p_new = new T[minimum_capacity.raw];
            for (uword i = 0u; i < this->current_size; ++i) {
                construct_at(p_new + i, move(this->p_storage[i]));
            }
            for (uword i = this->current_size + 1; i < minimum_capacity; ++i) {
                construct_at(p_new + i.raw);
            }
            delete[] this->p_storage;
            this->p_storage = p_new;
            this->current_capacity = minimum_capacity;
        } else {
            // Make a new allocation with size feedback.
            auto [alloc_span, alloc_bytes] =
                TRY(internal_allocate(allocator, minimum_capacity));

            this->current_capacity = alloc_bytes / ssizeof(T);
            this->p_storage = alloc_span.data();
        }

        return monostate;
    }

  public:
    [[nodiscard]]
    static constexpr auto reserved(is_allocator auto& allocator,
                                   iword capacity) -> maybe<vector<T>> {
        vector<T> new_vector;
        TRY(new_vector.reserve(allocator, capacity));
        return new_vector;
    }

    [[nodiscard]]
    static constexpr auto filled(is_allocator auto& allocator,
                                 uword count, T const& value)
        -> maybe<vector<T>> {
        vector<T> new_vector;
        maybe result = new_vector.reserve(allocator, count);
        if (!result.has_value()) {
            return nullopt;
        }
        new_vector.current_size = count;
        // TODO: Call a vectorized fill memory function.
        for (T& element : new_vector) {
            element = value;
        }
        return new_vector;
    }

    // Get the non-`const` address of this `vector`'s internal array.
    [[nodiscard]]
    constexpr auto data() -> T* {
        return &(this->p_storage[0]);
    }

    // Get the `const` address of this `vector`'s internal array.
    [[nodiscard]]
    constexpr auto data() const -> T const* {
        return &(this->p_storage[0]);
    }

    [[nodiscard]]
    constexpr auto size() const -> idx {
        return static_cast<idx>(this->current_size);
    }

    [[nodiscard]]
    constexpr auto capacity() const -> idx {
        return static_cast<idx>(this->current_capacity);
    }

    // Try to allocate storage for at least `minimum_capacity` number of `T`s.
    [[nodiscard]]
    constexpr auto reserve(is_allocator auto& allocator,
                           uword minimum_capacity) -> maybe<void> {
        if (minimum_capacity > this->current_capacity) {
            // TODO: I think there is a bug in GCC constexpr memory. This is a
            // workaround.
            if consteval {
                delete[] this->p_storage;
                this->p_storage = new T[minimum_capacity.raw];
                this->current_capacity = minimum_capacity;

                for (uword i = this->current_size + 1;
                     i < this->current_capacity; ++i) {
                    construct_at(this->p_storage + i);
                }
            } else {
                auto [alloc_span, alloc_bytes] =
                    TRY(internal_allocate(allocator, minimum_capacity));

                p_storage = alloc_span.data();
                this->current_capacity = idx(alloc_bytes / ssizeof(T));
            }
        }

        // If the new capacity is not larger, do nothing.
        return monostate;
    }

    // Try to change the size of this `vector`.
    [[nodiscard]]
    constexpr auto resize(is_allocator auto& allocator, uword size)
        -> maybe<void> {
        if (size > this->current_capacity) {
            // This sets `this->current_capacity` and `this->p_storage`.
            TRY(this->reserve(allocator, size));
        }

        // If the new size is not larger, simply shrink size and maintain
        // capacity.
        this->current_size = size;
        return monostate;
    }

    // Deep-copy the contents of this `vector`.
    [[nodiscard]]
    constexpr auto clone(
        is_allocator auto& allocator) const& -> maybe<vector<T>> {
        vector<T> new_vector =
            TRY(vector<T>::reserved(allocator, this->current_capacity));
        new_vector.current_size = this->current_size;
        relocate(this->begin(), this->end(), new_vector.begin());

        return new_vector;
    }

    // TODO: rval-ref overload of `.push_back()`.
    // TODO: `.emplace_back()`.

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    [[nodiscard]]
    constexpr auto push_back(is_allocator auto& allocator,
                             U const& value) -> maybe<void> {
        if (this->current_size + 1 > this->current_capacity) {
            TRY(this->increase_storage(allocator));
        }

        this->p_storage[this->current_size.raw] = static_cast<T>(value);
        ++(this->current_size);
        return monostate;
    }

  private:
    T* p_storage;
    uword current_size;
    uword current_capacity;
};

}  // namespace cat

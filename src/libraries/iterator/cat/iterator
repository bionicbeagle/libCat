// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/optional>

namespace cat {
namespace detail {
    template <typename T>
    concept HasIncrement = requires(T it) {
        it.increment();
    };

    template <typename T>
    concept HasDecrement = requires(T it) {
        it.decrement();
    };

    template <typename T>
    concept HasDistance = requires(T it) {
        it.distance_to(it);
    };

    template <typename T>
    concept HasEqualTo = requires(T it) {
        { it.equal_to(it) } -> ConvertibleTo<bool>;
    };

    template <typename>
    struct InferDifferenceType {
        using Type = ssize;
    };

    // Case when `T` provides `.distance_to()`
    template <detail::HasDistance T>
    struct InferDifferenceType<T> {
        static T const& it;
        using Type = decltype(it.distance_to(it));
    };

    template <typename...>
    struct InferValueType {};

    template <typename T>
    struct InferValueType<T> {
        static const T& it;
        using Type = RemoveCvRef<decltype(*it)>;
    };

    template <typename T>
        requires requires {
            typename T::Value;
        }
    struct InferValueType<T> {
        using Type = typename T::Value;
    };

    template <typename T>
    concept HasAdvance = requires(T it, InferDifferenceType<T> offset) {
        it.advance(offset);
    };

    template <typename T>
    concept HasAdvanceTo = requires(T it) {
        it.advance_to(T{});
    };

    template <typename T>
    concept HasRandomAccess = HasAdvance<T> && HasDistance<T>;

    template <typename T>
    concept HasBidirectional = HasRandomAccess<T> || HasDecrement<T>;

    // TODO: Do these two `concept`s make sense in libCat?
    template <typename T>
    concept HasSinglePass = bool(T::SinglePassIterator);

    template <typename Iter, typename T>
    concept HasSentinel = SameAs<T, typename T::Sentinel>;
}  // namespace detail

template <typename T>
using InferDifferenceType = typename detail::InferDifferenceType<T>::Type;

template <typename Argument, typename Iterator>
concept DifferenceTypeArg =
    ConvertibleTo<Argument, InferDifferenceType<Iterator>>;

template <typename T>
using InferValueType = typename detail::InferValueType<T>::Type::Type;

// Every `IteratorFacade` is `indirectly_readable`.
template <typename Derived>
struct IteratorFacade {
    // `Type` is needed for reversing this iterator.
    using Type = Derived;

    constexpr auto self() -> Derived& {
        return static_cast<Derived&>(*this);
    }

    constexpr auto self() const -> Derived const& {
        return static_cast<Derived const&>(*this);
    }

    // TODO: Does this work with the reverse iterator adapter?
    // If `Derived` does not have `.advance_to()`, generate it.
    constexpr auto advance_to(Derived const& other_iterator)
        -> Derived const& requires(!detail::HasAdvanceTo<Derived>) {
        if (other_iterator > this->self()) {
            while (other_iterator > this->self()) {
                ++(*this);
            }
        } else if (other_iterator < (this->self())) {
            while (other_iterator < this->self()) {
                --(*this);
            }
        }
        return this->self();
    }

    constexpr auto operator*() -> decltype(auto) {
        return this->self().dereference();
    }

    constexpr auto operator*() const -> decltype(auto) {
        return this->self().dereference();
    }

    constexpr auto operator->() const {
        decltype(auto) reference = **this;
        if constexpr (is_reference<decltype(reference)>) {
            // If `reference` is actually a reference Type, return its
            // address.
            return addressof(reference);
        } else {
            return ArrowProxy(move(reference));
        }
    }

    constexpr friend auto operator==(Derived const& left, Derived const& right)
        -> bool {
        if constexpr (detail::HasEqualTo<Derived>) {
            return left.equal_to(right);
        } else {
            return left.distance_to(right) == 0;
        }
    }

    constexpr friend auto operator==(Derived const& self,
                                     detail::HasSentinel<Derived> auto const)
        -> bool {
        return self.at_end();
    }

    constexpr friend auto operator+(Derived const& left,
                                    DifferenceTypeArg<Derived> auto offset)
        -> Derived {
        if constexpr (detail::HasAdvance<Derived>) {
            return left += offset;
        } else {
            Derived left_copy = left;
            for (ssize i = 0; i < offset; ++i) {
                ++left_copy;
            }
            return left_copy;
        }
    }

    constexpr friend auto operator+(DifferenceTypeArg<Derived> auto offset,
                                    Derived const& right) -> Derived {
        if constexpr (detail::HasAdvance<Derived>) {
            return right += offset;
        } else {
            Derived right_copy = right;
            for (ssize i = 0; i < offset; ++i) {
                ++right_copy;
            }
            return right_copy;
        }
    }

    constexpr friend auto operator+=(Derived const& self,
                                     DifferenceTypeArg<Derived> auto offset)
        -> Derived& {
        if constexpr (detail::HasAdvance<Derived>) {
            self.advance(static_cast<int>(offset));
        } else {
            for (ssize i = 0; i < offset; ++i) {
                self.increment();
            }
        }
        return self;
    }

    // Increment or advance forwards with prefix notation.
    constexpr auto operator++() -> Derived& {
        if constexpr (detail::HasIncrement<Derived>) {
            this->self().increment();
        } else {
            this->self().advance(1);
        }
        return this->self();
    }

    // Increment or advance forwards with postfix notation.
    constexpr auto operator++(int) -> Derived {
        auto copy = this->self();
        ++(*this);
        return copy;
    }

    constexpr friend auto operator-(Derived const& left,
                                    DifferenceTypeArg<Derived> auto offset)
        -> Derived {
        if constexpr (detail::HasAdvance<Derived>) {
            return left - offset;
        } else {
            for (ssize i = 0; i < offset; ++i) {
                --left;
            }
            return left;
        }
    }

    constexpr friend auto operator-=(Derived const& left,
                                     DifferenceTypeArg<Derived> auto offset)
        -> Derived& {
        if constexpr (detail::HasAdvance<Derived>) {
            return left -= offset;
        } else {
            for (ssize i = 0; i < offset; ++i) {
                --left;
            }
            return left;
        }
    }

    // Get the distance between two iterators.
    constexpr friend auto operator-(Derived const& left, Derived const& right)
        -> ssize {
        return right.distance_to(left);
    }

    // Decrement or advance backwards with prefix notation.
    constexpr auto operator--() -> Derived& {
        if constexpr (detail::HasDecrement<Derived>) {
            this->self().decrement();
        } else {
            this->self().advance(-1);
        }
        return this->self();
    }

    // Decrement or advance backwards with postfix notation.
    constexpr auto operator--(int) -> Derived& {
        auto copy = this->self();
        --(*this);
        return copy;
    }

    // TODO: This seems incorrect.
    // Random-access.
    constexpr auto operator[](DifferenceTypeArg<Derived> auto offset)
        -> decltype(auto) requires(detail::HasAdvance<Derived>) {
        return *(this->self() + offset);
    }

    // TODO: Support `<=>` operator.
};

struct RandomAccessIteratorTag {};
struct BidirectionalIteratorTag {};
struct ForwardIteratorTag {};
struct InputIteratorTag {};
struct OutputIteratorTag {};
struct ContiguousIteratorTag {};

template <typename T>
    requires is_base_of<IteratorFacade<T>, T>
struct IteratorTraits {
    static T const& iterator;
    using Value = typename InferValueType<T>::Type;
    using Reference = decltype(*iterator);
    using Pointer = decltype(iterator.operator->());
    using Difference = InferDifferenceType<T>;
    using Category = Conditional<
        // If this can be a random access iterator, it always will be.
        detail::HasRandomAccess<T>, RandomAccessIteratorTag,
        Conditional<
            // If this has a `++` and a `--` operator, this is a
            // bidirectional iterator.
            detail::HasBidirectional<T>, BidirectionalIteratorTag,
            Conditional<detail::HasSinglePass<T>,
                        // If it is single-pass, this is a forward
                        // iterator.
                        InputIteratorTag,
                        // Default to a forward iterator.
                        ForwardIteratorTag>>>;
    // using IteratorConcept = Category;
};

template <typename T>
struct ReversedIterator : IteratorFacade<ReversedIterator<T>> {
    T iterator;

    // Forward any constructor to `iterator`.
    template <typename... Args>
    constexpr ReversedIterator(Args&&... args)
        : iterator(forward<Args>(args)...){};

    constexpr auto dereference() {
        return this->iterator.dereference();
    }

    constexpr auto dereference() const {
        return this->iterator.dereference();
    }

    constexpr void advance(int offset) requires(detail::HasAdvance<T>) {
        this->iterator.advance(-offset);
    }

    constexpr void increment() {
        --iterator;
    }

    constexpr void decrement() {
        ++iterator;
    }

    constexpr auto distance_to(ReversedIterator<T> other) const -> ssize {
        return this->iterator.distance_to(other.iterator);
    }
};

// TODO: More iterable related concepts.
template <typename T>
concept Iterable = requires(T it) {
    it.begin();
    it.end();
};

template <typename T>
concept WeaklyIncrementable = requires(T it) {
    // TODO: Make this `Movable`.
    { ++it } -> SameAs<T&>;
    it++;
};

template <typename T>
concept Incrementable = requires(T it) {
    // TODO: Make this `Regular` and `Movable`.
    { ++it } -> SameAs<T&>;
    { it++ } -> SameAs<T&>;
};

template <typename T>
concept RandomAccessIterator =
    is_same<typename IteratorTraits<T>::Category, RandomAccessIteratorTag>;

template <typename T>
concept BidirectionalIterator =
    is_same<typename IteratorTraits<T>::Category, BidirectionalIteratorTag>;

template <typename T>
concept ForwardIterator =
    is_same<typename IteratorTraits<T>::Category, ForwardIteratorTag>;

// clang-format off
template <typename T>
concept InputOrOutputIterator = requires(T it) {
    *it;
} && WeaklyIncrementable<T>;
// clang-format on

template <typename T>
using IteratorReference = decltype(*declval<T&>());

template <typename Outputter, typename T>
concept IndirectlyWritable = requires(Outputter&& outputter, T&& value) {
    *outputter = forward<T>(value);
    *forward<Outputter>(outputter) = forward<T>(value);
    const_cast<IteratorReference<Outputter> const&&>(*outputter) =
        forward<T>(value);
    const_cast<IteratorReference<Outputter> const&&>(
        *forward<Outputter>(outputter)) = forward<T>(value);
};

template <typename Outputter, typename T>
concept OutputIterator = InputOrOutputIterator<Outputter> &&
    IndirectlyWritable<Outputter, T> &&
    requires(Outputter outputter, T&& value) {
    *outputter++ = forward<T>(value);
};

template <Iterable T>
class AsReverse {
    T& iterable;

  public:
    constexpr explicit AsReverse(T& input_iterable)
        : iterable{input_iterable} {};

    constexpr auto begin() {
        return iterable.rbegin();
    }

    constexpr auto end() {
        return iterable.rend();
    }

    constexpr auto begin() const {
        return iterable.rbegin();
    }

    constexpr auto end() const {
        return iterable.rend();
    }
};

template <Iterable T>
class AsConst {
    T& iterable;

  public:
    constexpr explicit AsConst(T& input_iterable) : iterable{input_iterable} {};

    constexpr auto begin() const {
        return iterable.cbegin();
    }

    constexpr auto end() const {
        return iterable.cend();
    }
};

template <Iterable T>
class AsConstReverse {
    T& iterable;

  public:
    constexpr explicit AsConstReverse(T& input_iterable)
        : iterable{input_iterable} {};

    constexpr auto begin() const {
        return iterable.crbegin();
    }

    constexpr auto end() const {
        return iterable.crend();
    }
};

}  // namespace cat

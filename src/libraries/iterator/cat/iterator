// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/maybe>

namespace cat {
namespace detail {
    template <typename T>
    concept has_increment = requires(T it) {
        it.increment();
    };

    template <typename T>
    concept has_decrement = requires(T it) {
        it.decrement();
    };

    template <typename T>
    concept has_distance_to = requires(T it) {
        it.distance_to(it);
    };

    template <typename T>
    concept has_equal_to = requires(T it) {
        { it.equal_to(it) } -> is_convertible<bool>;
    };

    template <typename>
    struct infer_difference_trait {
        using type = ssize;
    };

    // Case when `T` provides `.distance_to()`
    template <detail::has_distance_to T>
    struct infer_difference_trait<T> {
        static T const& it;
        using type = decltype(it.distance_to(it));
    };

    template <typename...>
    struct infer_value_type {};

    template <typename T>
    struct infer_value_type<T> {
        static const T& it;
        using type = remove_cvref<decltype(*it)>;
    };

    template <typename T>
        requires(requires { typename T::value_type; })
    struct infer_value_type<T> {
        using type = typename T::value_type;
    };

    template <typename T>
    concept has_advance = requires(T it, infer_difference_trait<T> offset) {
        it.advance(offset);
    };

    template <typename T>
    concept has_advance_to = requires(T it) {
        it.advance_to(T());
    };

    template <typename T>
    concept has_random_access = has_advance<T> && has_distance_to<T>;

    template <typename T>
    concept has_bidirectional = has_random_access<T> || has_decrement<T>;

    template <typename T>
    concept has_single_pass = bool(T::SinglePassiterator_type);

    template <typename Iter, typename T>
    concept has_sentinel = is_same<T, typename T::sentinel>;

    template <typename Argument, typename iterator_type>
    concept is_difference_type =
        is_convertible<Argument,
                       typename infer_difference_trait<iterator_type>::type>;
}  // namespace detail

template <typename T>
using infer_difference_type = typename detail::infer_difference_trait<T>::type;
template <typename T>
using infer_value_type = typename detail::infer_value_type<T>::type::type;

// Every `iterator_interface` satisfies 'is_indirectly_writable'.
template <typename derived_type>
class iterator_interface {
  public:
    // `type` is needed for reversing this iterator.
    using type = derived_type;

    // TODO: Does this work with the reverse iterator adapter?
    // If `derived_type` does not have `.advance_to()`, generate it.
    constexpr auto advance_to(derived_type const& other_iterator)
        -> derived_type const& requires(!detail::has_advance_to<derived_type>) {
        if (other_iterator > this->self()) {
            while (other_iterator > this->self()) {
                ++(*this);
            }
        } else if (other_iterator < (this->self())) {
            while (other_iterator < this->self()) {
                --(*this);
            }
        }
        return this->self();
    }

    constexpr auto operator*() -> decltype(auto) {
        return this->self().dereference();
    }

    constexpr auto operator*() const -> decltype(auto) {
        return this->self().dereference();
    }

    constexpr auto operator->() const {
        decltype(auto) reference = **this;
        if constexpr (is_reference<decltype(reference)>) {
            // If `reference` is actually a reference type, return its
            // address.
            return addressof(reference);
        } else {
            return arrow_proxy(move(reference));
        }
    }

    constexpr friend auto operator<=>(
        derived_type const& left,
        derived_type const&
            right) /* requires(detail::has_distance_to<derived_type>) */ {
        return (left - right) <=> 0;
    }

    constexpr friend auto operator==(derived_type const& left,
                                     derived_type const& right)
        -> bool /* requires(detail::has_equal_to<derived_type> ||
                                   detail::has_distance_to<derived_type>) */
    {
        if constexpr (detail::has_equal_to<derived_type>) {
            return left.equal_to(right);
        } else if constexpr (detail::has_distance_to<derived_type>) {
            return left.distance_to(right) == 0;
        }
        __builtin_unreachable();
    }

    constexpr friend auto operator!=(derived_type const& left,
                                     derived_type const& right) -> bool {
        return !(left == right);
    }

    // constexpr friend auto operator==(derived_type const& self,
    //                                  detail::has_sentinel<derived_type> auto)
    //     -> bool {
    //     return self.at_end();
    // }

    constexpr friend auto operator+(
        derived_type const& left,
        detail::is_difference_type<derived_type> auto offset) -> derived_type {
        if constexpr (detail::has_advance<derived_type>) {
            return left += offset;
        } else {
            derived_type left_copy = left;
            for (ssize i = 0; i < offset; ++i) {
                ++left_copy;
            }
            return left_copy;
        }
    }

    constexpr friend auto operator+(
        detail::is_difference_type<derived_type> auto offset,
        derived_type const& right) -> derived_type {
        if constexpr (detail::has_advance<derived_type>) {
            return right += offset;
        } else {
            derived_type right_copy = right;
            for (ssize i = 0; i < offset; ++i) {
                ++right_copy;
            }
            return right_copy;
        }
    }

    constexpr friend auto operator+=(
        derived_type const& self,
        detail::is_difference_type<derived_type> auto offset) -> derived_type& {
        if constexpr (detail::has_advance<derived_type>) {
            self.advance(static_cast<int>(offset));
        } else {
            for (ssize i = 0; i < offset; ++i) {
                self.increment();
            }
        }
        return self;
    }

    // Increment or advance forwards with prefix notation.
    constexpr auto operator++() -> derived_type& {
        if constexpr (detail::has_increment<derived_type>) {
            this->self().increment();
        } else {
            this->self().advance(1);
        }
        return this->self();
    }

    // Increment or advance forwards with postfix notation.
    constexpr auto operator++(int) -> derived_type {
        auto copy = this->self();
        ++(*this);
        return copy;
    }

    constexpr friend auto operator-(
        derived_type const& left,
        detail::is_difference_type<derived_type> auto offset) -> derived_type {
        if constexpr (detail::has_advance<derived_type>) {
            return left - offset;
        } else {
            for (ssize i = 0; i < offset; ++i) {
                --left;
            }
            return left;
        }
    }

    constexpr friend auto operator-=(
        derived_type const& left,
        detail::is_difference_type<derived_type> auto offset) -> derived_type& {
        if constexpr (detail::has_advance<derived_type>) {
            return left -= offset;
        } else {
            for (ssize i = 0; i < offset; ++i) {
                --left;
            }
            return left;
        }
    }

    // Get the distance between two iterators.
    constexpr friend auto operator-(derived_type const& left,
                                    derived_type const& right) -> ssize
    /* requires(detail::has_distance_to<derived_type>) */ {
        return right.distance_to(left);
    }

    // Decrement or advance backwards with prefix notation.
    constexpr auto operator--() -> derived_type& {
        if constexpr (detail::has_decrement<derived_type>) {
            this->self().decrement();
        } else {
            this->self().advance(-1);
        }
        return this->self();
    }

    // Decrement or advance backwards with postfix notation.
    constexpr auto operator--(int) -> derived_type& {
        auto copy = this->self();
        --(*this);
        return copy;
    }

    // TODO: This seems incorrect.
    // Random-access.
    constexpr auto operator[](
        detail::is_difference_type<derived_type> auto offset)
        -> decltype(auto) requires(detail::has_advance<derived_type>) {
        return *(this->self() + offset);
    }

  private:
    constexpr auto self() -> derived_type& {
        return static_cast<derived_type&>(*this);
    }

    constexpr auto self() const -> derived_type const& {
        return static_cast<derived_type const&>(*this);
    }
};

struct RandomAccessiterator_typeTag {};
struct Bidirectionaliterator_typeTag {};
struct Forwarditerator_typeTag {};
struct input_iterator_typeTag {};
struct outputter_typeTag {};
struct Contiguousiterator_typeTag {};

template <typename T>
    requires is_base_of<iterator_interface<T>, T>
struct iterator_typeTraits {
    static T const& iterator;
    using value_type = typename infer_value_type<T>::type;
    using Reference = decltype(*iterator);
    using Pointer = decltype(iterator.operator->());
    using Difference = infer_difference_type<T>;
    using Category = conditional<
        // If this can be a random access iterator, it always will be.
        detail::has_random_access<T>, RandomAccessiterator_typeTag,
        conditional<
            // If this has a `++` and a `--` operator, this is a
            // bidirectional iterator.
            detail::has_bidirectional<T>, Bidirectionaliterator_typeTag,
            conditional<detail::has_single_pass<T>,
                        // If it is single-pass, this is a forward
                        // iterator.
                        input_iterator_typeTag,
                        // Default to a forward iterator.
                        Forwarditerator_typeTag>>>;
    // using iterator_typeConcept = Category;
};

template <typename iterator_type>
struct reversed_iterator_type : iterator_interface<reversed_iterator_type<iterator_type>> {
    // Forward any constructor to `iterator`.
    template <typename... Args>
    constexpr reversed_iterator_type(Args&&... args)
        : iterator(forward<Args>(args)...) {
    }

    constexpr auto dereference() {
        return this->iterator.dereference();
    }

    constexpr auto dereference() const {
        return this->iterator.dereference();
    }

    constexpr void advance(int offset) requires(detail::has_advance<iterator_type>) {
        this->iterator.advance(-offset);
    }

    constexpr void increment() {
        --iterator;
    }

    constexpr void decrement() {
        ++iterator;
    }

    constexpr auto distance_to(reversed_iterator_type<iterator_type> other) const -> ssize
    /* requires(detail::has_distance_to<iterator_type>) */ {
        return this->iterator.distance_to(other.iterator);
    }

    iterator_type iterator;
};

// TODO: More iterable related `concept`s.
template <typename T>
concept is_iterable = requires(T it) {
    it.begin();
    it.end();
};

template <typename T>
concept is_weakly_incrementable = requires(T it) {
    // TODO: Make this `Movable`.
    { ++it } -> is_same<T&>;
    it++;
};

template <typename T>
concept is_incrementable = requires(T it) {
    // TODO: Make this `Regular` and `Movable`.
    { ++it } -> is_same<T&>;
    { it++ } -> is_same<T&>;
};

template <typename T>
concept is_random_access_iterator =
    is_same<typename iterator_typeTraits<T>::Category, RandomAccessiterator_typeTag>;

template <typename T>
concept is_bidirectional_iterator =
    is_same<typename iterator_typeTraits<T>::Category, Bidirectionaliterator_typeTag>;

template <typename T>
concept is_forward_iterator =
    is_same<typename iterator_typeTraits<T>::Category, Forwarditerator_typeTag>;

// clang-format off
template <typename T>
concept is_input_or_output_iterator = requires(T it) {
    *it;
} && is_weakly_incrementable<T>;
// clang-format on

template <typename T>
using iterator_reference = decltype(*declval<T&>());

template <typename outputter_type, typename T>
concept is_indirectly_writable = requires(outputter_type&& output_iterator,
                                          T&& value) {
    *output_iterator = forward<T>(value);
    *forward<outputter_type>(output_iterator) = forward<T>(value);
    const_cast<iterator_reference<outputter_type> const&&>(*output_iterator) =
        forward<T>(value);
    const_cast<iterator_reference<outputter_type> const&&>(
        *forward<outputter_type>(output_iterator)) = forward<T>(value);
};

template <typename output_iterator, typename T>
concept is_output_iterator = is_input_or_output_iterator<output_iterator> &&
    is_indirectly_writable<output_iterator, T> &&
    requires(output_iterator it, T&& value) {
    *it++ = forward<T>(value);
};

template <is_iterable T>
class it_reverse {
    T& iterable;

  public:
    constexpr explicit it_reverse(T& input_iterable)
        : iterable{input_iterable} {
    }

    constexpr auto begin() {
        return iterable.rbegin();
    }

    constexpr auto end() {
        return iterable.rend();
    }

    constexpr auto begin() const {
        return iterable.rbegin();
    }

    constexpr auto end() const {
        return iterable.rend();
    }
};

template <is_iterable T>
class it_const {
  public:
    constexpr explicit it_const(T& input_iterable)
        : iterable{input_iterable} {};

    constexpr auto begin() const {
        return iterable.cbegin();
    }

    constexpr auto end() const {
        return iterable.cend();
    }

  private:
    T& iterable;
};

template <is_iterable T>
class it_const_reverse {
  public:
    constexpr explicit it_const_reverse(T& input_iterable)
        : iterable{input_iterable} {};

    constexpr auto begin() const {
        return iterable.crbegin();
    }

    constexpr auto end() const {
        return iterable.crend();
    }

  private:
    T& iterable;
};

}  // namespace cat

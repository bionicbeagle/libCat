// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/utility>

namespace cat {

// `no_type`'s purpose is to implicitly cast from any type into `void*`. This is
// useful for low-level type erasure in some cases, such as passing syscall
// arguments.
class no_type {
  public:
    constexpr no_type() = default;

    constexpr no_type(auto input) requires(sizeof(input) <= sizeof(void*))
        : p_storage(bit_cast<void*>(input)) {
    }

    template <typename T>
        requires(!is_void<T>)
    [[nodiscard]] constexpr operator T() const {
        return bit_cast<T>(this->p_storage);
    }

  private:
    void* p_storage;
};

// `no_type_ptr` is like `no_type`, but it only converts to or from pointers.
class no_type_ptr {
  public:
    constexpr no_type_ptr() = default;

    constexpr no_type_ptr(decltype(nullptr)) : p_storage(nullptr) {
    }

    constexpr no_type_ptr(auto* p_input)
        : p_storage(const_cast<void*>(static_cast<void const*>(p_input))) {
    }

    template <typename T>
        requires(is_pointer<T>)
    [[nodiscard]] constexpr operator T() const {
        return static_cast<T>(this->p_storage);
    }

  private:
    void* p_storage;
};

}  // namespace cat

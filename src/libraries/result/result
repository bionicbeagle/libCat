// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

// TODO: Delete this container.

#include <cat/notype>

/* This file contains a general-purpose error-handling tool. `Result<>` is a
 * templated struct that either contains some data (unless it holds `void`) or
 * a error code. The code is an 8-byte value that can be either an integer
 * or a pointer to a string that may be printed. To extract a value out of a
 * `Result`, call one of its member functions.
 *
 * An error code or string pointer must be wrapped by a `Failure`, such as:
 * `return Failure(1);`
 *
 * Otherwise, it is presumed that a `Result` holds a value rather than a
 * `Failure`. This is done to prevent monomorphizing the `Result` on its error
 * types like a variant type, which provides type-safety at the cost of
 * pessimized build-times and runtime overhead. This `Result` is a zero-overhead
 * abstraction over C-style error handling.
 *
 * A `Failure` is implicitly convertible into a `Result`, and a `T` is
 * implicitly convertible into a `Result<T>`. A `Result<T>` is implicitly
 * convertible into a `Result<>`, to aid some low-level routines.
 *
 * `Result` types are marked `[[nodiscard]]`. With confidence that an invocation
 * of a function returning a `Result` will never fail, you may call
 * `.assert()`, which will skip error-handling when compiler
 * optimizations are enabled. A `Result` cannot be consumed by the `_` global.
 */

template <typename T = void>
class Result;

struct [[nodiscard]] Failure {
    signed long long code;

    // The default constructor should only be called by `Result`.
    Failure() = default;

    // This must be explicit to disambiguate returning an integer to a Result.
    explicit Failure(signed long long in_code) : code(in_code){};

    // `Failure` can consume any `enum class`.
    template <cat::scopedEnum T>
    constexpr Failure(T in_code)
        : code(static_cast<cat::UnderlyingType<T>>(in_code)){};

    template <typename T>
    constexpr operator T() const
        // TODO: Make an `is_bool<>` trait to support libCat's safe bools.
        requires(cat::is_same<T, ssize>() || cat::is_same<T, bool>) {
        return this->code;
    }

    auto operator==(Failure operand) const -> bool {
        return this->code == operand.code;
    }
};

namespace cat::detail {
struct Okay {};
}  // namespace cat::detail

// `okay` may be returned in a function that returns `Result<void>`.
inline constexpr cat::detail::Okay okay{};

// These forward declarations are necessary for `Result`.
template <typename T>
class Result;
namespace cat {
class String;
}

// Forward-declare a print function for panics.
namespace cat {
// auto print_line(cat::String const&) -> Result<>;
}

// TODO: Space optimized `Result`s like the `Optional`.
// `Result<>` is a general-purpose failure-handling object.
template <typename T>
class [[nodiscard]] Result {
  public:
    Failure failure;  // `Failure` is an 8-byte value.
    static_assert(sizeof(Failure) == 8);

    // `char` should be a relatively unintrusive dummy data for when this holds
    // `void`. Reflection TS in future C++ will provide conditional-members,
    // which would be a better solution.
    // TODO: Solve this with a partial template specialization.
    using ValueType = cat::Conditional<cat::is_void<T>, char, T>;

  protected:
    ValueType storage;
    bool is_okay;

  public:
    constexpr Result(Failure const& failure)
        : failure(failure), is_okay(false){};

    constexpr Result(ValueType value) requires(
        !cat::is_void<T> && cat::is_constructible<ValueType> &&
        !cat::is_same<ValueType, cat::NoType>)
        : storage(value), is_okay(true){};

    // If this holds `void`, any specialization of `Result<>` or an `okay` can
    // convert into this.
    template <typename U>
    constexpr Result(U const) requires(cat::is_void<T> &&
                                       (cat::is_specialization<U, Result> ||
                                        cat::is_same<U, cat::detail::Okay>))
        : is_okay(true){};

    // TODO: Trivially and non-trivially Copy and move construct `ValueType`.

    // `.has_value()` and `.value()` are needed here for constructors.
    constexpr auto has_value() -> bool {
        return this->is_okay;
    }

    constexpr auto has_value() const -> bool {
        return this->is_okay;
    }

    constexpr auto value() {
        // TODO: Make this work:
        // Result(this->has_value()).assert();
        if constexpr (!cat::is_void<T>) {
            return this->storage;
        } else {
            return;
        }
    }

    constexpr auto value() const {
        // TODO: Make this work:
        // Result(this->has_value()).assert();
        if constexpr (!cat::is_void<T>) {
            return this->storage;
        } else {
            return;
        }
    }

    // constexpr Result(ValueType const& value) requires(
    //     !cat::is_void<T> &&
    //     cat::is_trivially_copy_constructible_v<ValueType>) : storage(value),
    //     is_okay(true) {
    // }

    // constexpr Result(ValueType&& value) requires(
    //     !cat::is_void<T> &&
    //     cat::is_trivially_move_constructible_v<ValueType> &&
    //     !cat::is_same_v<ValueType, cat::NoType>)
    //     : storage(value), is_okay(true){};

    // Implicity cast an inputted compatible `Result` to this.
    template <typename U>
    constexpr Result(Result<U> result) requires(
        !cat::is_void<T> && cat::is_default_constructible<U> &&
        cat::is_convertible<T, U> && !cat::is_same<U, cat::NoType>)
        : storage(static_cast<T>(result.value())),
          is_okay(result.has_value()){};

    // Implicity cast an inputted compatible `Result` to this.
    template <typename U>
    constexpr Result(Result<U> const& result) requires(
        !cat::is_void<T> && cat::is_trivially_copy_constructible<U> &&
        cat::is_convertible<T, U> && !cat::is_same<U, cat::NoType>)
        : storage(static_cast<T>(result.value())),
          is_okay(result.has_value()){};

    // Implicity cast an inputted compatible `Result` to this.
    template <typename U>
    constexpr Result(Result<U>&& result) requires(
        !cat::is_void<T> && cat::is_trivially_move_constructible<U> &&
        cat::is_convertible<T, U> && !cat::is_same<U, cat::NoType>)
        : storage(static_cast<T>(result.value())),
          is_okay(result.has_value()){};

    template <typename U>
    constexpr Result(Result<U> const&& result) requires(
        !cat::is_void<T> && cat::is_trivially_move_constructible<U> &&
        cat::is_convertible<T, U> && !cat::is_same<U, cat::NoType>)
        : storage(static_cast<T>(result.value())),
          is_okay(result.has_value()){};

    // Special-case consuming a `Result<void>`.
    constexpr Result(Result<void> const& result) requires(!cat::is_void<T>)
        : is_okay(result.has_value()){};

    // Special-case consuming a `Result<cat::NoType>`.
    constexpr Result(Result<cat::NoType> const& result) requires(
        !cat::is_void<T>)
        : storage(static_cast<T>(result.value())),
          is_okay(result.has_value()){};

    // Special-case consuming an `cat::NoType>`.
    constexpr Result(cat::NoType result) requires(!cat::is_void<T>)
        : storage(static_cast<T>(result)), is_okay(true){};

    // TODO: `concept` for `bool`, `bool2`, and `bool4` as well.
    // Consume a `bool` temporary. This is useful for debugging with asserts.
    constexpr Result(bool const& expression) requires(cat::is_void<T>)
        : storage(), is_okay(expression){};
    constexpr Result(bool&& expression) requires(cat::is_void<T>)
        : storage(), is_okay(expression){};

    // Return a specified value when `is_okay` is `false`.
    constexpr auto value_or(ValueType const& value) -> ValueType {
        if (!this->has_value()) {
            return value;
        }
        return this->storage;
    }

    // `nullptr` must be special-cased.
    constexpr auto value_or(decltype(nullptr) value) -> ValueType {
        if (!this->has_value()) {
            return static_cast<ValueType>(value);
        }
        return this->storage;
    }

    // If this non-`const`-qualified `Result` holds a value, transform it by a
    // non-`void` function. Otherwise, propagate an empty `Result`.
    template <typename U = T, typename Function>
    constexpr auto transform(Function&& callback) -> Result<U> {
        if (this->has_value()) {
            return Result<U>(cat::forward<Function>(callback)(this->storage));
        }
        return Failure(this->failure.code);
    }

    // If this `const`-qualified `Result` holds a value, transform it by a
    // non-`void` function without side-effects. Otherwise, propagate an empty
    // `Result`.
    template <typename U = T, typename Function>
    constexpr auto transform(Function&& callback) const -> Result<U> {
        if (this->has_value()) {
            return Result<U>(cat::forward<Function>(callback(this->storage)));
        }
        return Failure(this->failure.code);
    }

    // Invoke a callback on the value of a non-`const`-qualified `Result` and
    // propagate the result, if it holds a value.
    template <typename Function>
    constexpr auto and_then(Function&& callback) & {
        return this->has_value()
                   ? Result<T>(cat::forward<Function>(callback)(this->storage))
                   : *this;
    }

    // Invoke a callback on the value of a `const`-qualified `Result` and
    // propagate the result, if it holds a value.
    template <typename Function>
    constexpr auto and_then(Function&& callback) const& {
        return this->has_value()
                   ? Result<T>(cat::forward<Function>(callback)(this->storage))
                   : *this;
    }

    // TODO: Add a `cat::invokable` concept.
    // TODO: This does work with `void` and non-`void`.
    // Invoke a callback if a non-`const`-qualified `Result` holds no value.
    template <typename Function>
    constexpr auto or_else(Function&& callback) -> Result<T> {
        if (!this->has_value()) {
            return cat::forward<Function>(callback)();
        }
        if constexpr (!cat::is_void<T>) {
            return this->storage;
        }
    }

    // TODO: Add a `cat::invokable` concept.
    // TODO: This does work with `void` and non-`void`.
    // Invoke a callback if a `const`-qualified `Result` holds no value.
    template <typename Function>
    constexpr auto or_else(Function&& callback) const -> Result<T> {
        if (!this->has_value()) {
            return cat::forward<Function>(callback)();
        }
        if constexpr (!cat::is_void<T>) {
            return this->storage;
        }
    }

    // TODO: Pass in the exit code and error message with overloads.
    auto or_exit() -> T {
        if (is_okay) [[likely]] {
            if constexpr (!cat::is_void<T>) {
                return this->storage;
            } else {
                return;
            }
        }
        cat::exit(1);
        __builtin_unreachable();  // This prevents a build warning.
    }

    // TODO: Make this work.
    // Because the error code is 8-bytes, it could contain a non-null
    // pointer to an error string. This prints that error message.
    auto or_exit(cat::String const& error_message) -> T {
        if (is_okay) [[likely]] {
            if constexpr (!cat::is_void<T>) {
                return this->storage;
            } else {
                return;
            }
        }
        // _ = cat::print_line(error_message);
        cat::exit(1);
        __builtin_unreachable();  // This prevents a build warning.
    }

    // When building `-O0`, this function panics if a value is not
    // held. When optimizations are enabled, that safety check is elided.
    constexpr void assert() const {
        if (!cat::is_constant_evaluated()) {
#ifndef __OPTIMIZE__
            if (!this->has_value()) [[unlikely]] {
                cat::exit(1);
            }
#endif
        }
    }

    // When building `-O0`, this function panics if a value is not
    // held. When optimizations are enabled, that safety check is elided.
    constexpr void assert(cat::String const& error_message) {
        if (!cat::is_constant_evaluated()) {
#ifndef __OPTIMIZE__
            if (!this->has_value()) [[unlikely]] {
                // _ = cat::print_line(error_message);
                cat::exit(1);
            }
#endif
        }
    }
};

template <typename T>
Result(T) -> Result<T>;

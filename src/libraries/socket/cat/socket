// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/array>
#include <cat/linux>
#include <cat/string>

// TODO: Socket `concept`.
// TODO: Socket types for sequenced packets.

namespace cat {

// Basic Socket type that any other sockets must convert into.
struct Socket {
    uint2 family;
    char data[14];
};

enum class socket_type {
    stream = 1,
    data_gram = 2,
    raw = 3,
    reliable_data_gram = 4,
    sequenced_packet = 5,
    datagram_congestion_control = 6
};

template <int2 in_family, socket_type in_type, int4 in_protocol>
struct socket_attributes {
    int2 const family = in_family;
    static constexpr socket_type type = in_type;
    static constexpr int4 protocol = in_protocol;
};

template <socket_type type, int4 protocol = 0>
struct socket_unix {
    // TODO: Create flags that corresponds to the value of `protocol`.

    socket_unix() = default;

    socket_unix(nix::file_descriptor in_descriptor) {
        this->descriptor = in_descriptor;
    }

    // Get the size of this struct, not considering the `file_descriptor` that
    // it holds.
    auto get_size() -> ssize {
        return ssizeof(attributes) + ssizeof(path_name);
    }

    // Create and return a `Socket`.
    auto create() -> maybe<void> {
        scaredy result = nix::sys_socket(this->attributes.family,
                                         static_cast<int>(type), protocol);
        if (result.has_value()) {
            this->descriptor = result.value();
            return monostate;
        }
        return nullopt;
    }

    // Connect a `Socket`.
    auto connect() -> maybe<void> {
        scaredy result =
            nix::sys_connect(this->descriptor, this, this->get_size());
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto send_string(string const& message, int8 flags = 0,
                     cat::Socket const* p_destination_socket = nullptr,
                     ssize const addr_length = 0) -> maybe<void> {
        scaredy result =
            nix::sys_sendto(this->descriptor, message.data(), message.size(),
                            flags, p_destination_socket, addr_length);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto send_struct(auto const& message_struct, int8 flags = 0,
                     cat::Socket const* p_destination_socket = nullptr,
                     ssize const addr_length = 0) -> maybe<void> {
        scaredy result = nix::sys_sendto(this->descriptor, &message_struct,
                                         ssizeof(message_struct), flags,
                                         p_destination_socket, addr_length);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto bind() -> maybe<void> {
        scaredy result =
            nix::sys_bind(this->descriptor, this, this->get_size());
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto listen(int8 backlog) -> maybe<void> {
        scaredy result = nix::sys_listen(this->descriptor, backlog);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto accept(nix::file_descriptor listening_socket,
                void const* p_socket = nullptr,
                ssize const* p_addr_len = nullptr) -> maybe<void> {
        scaredy result =
            nix::sys_accept(listening_socket, p_socket, p_addr_len);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    auto accept(socket_unix<type, protocol> const& listening_socket,
                void const* p_socket = nullptr,
                ssize const* p_addr_len = nullptr) -> maybe<void> {
        scaredy result =
            nix::sys_accept(listening_socket.descriptor, p_socket, p_addr_len);
        if (result.has_value()) {
            this->descriptor = result.value();
            return monostate;
        }
        return nullopt;
    }

    // TODO: Factor into `.recieve()` and `.recieve_from()`.
    auto recieve(void* const p_message_buffer, ssize const buffer_length,
                 Socket const* const __restrict p_socket = nullptr,
                 ssize const* const __restrict p_socket_size = nullptr)
        -> maybe<ssize> {
        // scaredy const result =
        nix::scaredy_nix<ssize> const result =
            nix::sys_recv(this->descriptor, p_message_buffer, buffer_length,
                          p_socket, p_socket_size);
        if (result.has_value()) {
            return result.value();
        }
        return nullopt;
    }

    auto close() -> maybe<void> {
        scaredy result = nix::sys_close(this->descriptor);
        if (result.has_value()) {
            return monostate;
        }
        return nullopt;
    }

    socket_attributes<static_cast<short>(1), type, protocol> const attributes;
    cat::fixed_string<108> path_name;
    nix::file_descriptor descriptor;
};

}  // namespace cat

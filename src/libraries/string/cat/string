// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/bit>
#include <cat/simd>
#include <cat/span>

namespace std {
// `__SIZE_TYPE__` is a GCC macro.

// Deprecated call to `memcpy()`. Consider using `cat::copy_buffer()` instead.
// `memcpy()` exists to enable some GCC optimizations.
extern "C" [[deprecated(
    "std::memcpy() is deprecated! Use cat::copy_memory() instead!")]] auto
memcpy(void* p_destination, void const* p_source, __SIZE_TYPE__ bytes) -> void*;

// Deprecated call to `memset()`. Consider using `cat::set_memory() or
// cat::zero_memory()` instead. `memset()` exists to enable some GCC
// optimizations.
extern "C"
    [[deprecated("std::memset() is deprecated! Use cat::set_memory() or \
cat::zero_memory() instead!")]] auto
    memset(void* p_source, int byte_value, __SIZE_TYPE__ bytes) -> void*;

}  // namespace std

using std::memcpy;
using std::memset;

namespace cat {

constexpr auto string_length(char const* p_string) -> ssize;

template <ssize::Raw length>
class StaticString;

class String : public Span<char const> {
  public:
    constexpr String() : Span<char const>(){};

    constexpr String(char const* p_string, ssize in_length)
        : Span<char const>(p_string, in_length){};

    constexpr String(String const& string)
        : Span<char const>(string.p_storage, string.length){};

    constexpr String(String&& string)
        : Span<char const>(string.p_storage, move(string).size()){};

    // This weird template deduces lower than the string literal constructor.
    template <typename T>
        requires(is_pointer<T>)
    constexpr String(T p_string)
        : Span<char const>(p_string, string_length(p_string)){};

    // clangd emits a false diagnistic if this is `consteval` instead of
    // `constexpr`.
    // Zero-overhead string literal constructor.
    template <ssize::Raw other_length>
    constexpr String(char const (&string)[other_length]) {
        this->p_storage = string;
        this->length = static_cast<ssize::Raw>(other_length);
    }

    template <ssize::Raw other_length>
    constexpr String(StaticString<other_length> const& other_string) {
        this->p_storage = other_string.p_data();
        this->length = other_length;
    }

    // A `String` consuming `nullptr` would cause undefined behavior.
    constexpr String(decltype(nullptr)) = delete;

    constexpr auto operator=(String const& string) -> String& {
        this->p_storage = string.p_data();
        this->length = string.size();
        return *this;
    }

    constexpr auto operator=(String&& string) -> String& {
        this->p_storage = string.p_data();
        this->length = move(string).size();
        return *this;
    }

    // TODO: Make these member functions `const`.

    [[nodiscard]] constexpr auto substring(ssize position, ssize count)
        -> String {
        return String{this->p_storage + position, count};
    }

    [[nodiscard]] constexpr auto remove_prefix(ssize offset) -> String {
        return this->substring(offset, this->length - offset);
    }

    [[nodiscard]] constexpr auto remove_suffix(ssize offset) -> String {
        return this->substring(0, this->length - offset);
    }

    constexpr auto find_small(char character, ssize position = 0) const
        -> Optional<Sentinel<ssize, -1>> {
        for (ssize i = position; i < this->length; ++i) {
            if (this->p_storage[i.raw] == character) {
                return i;
            }
        }
        return nullopt;
    }

    // TODO: Optimize different length strings.
    // TODO: Tile this loop four or eight times.
    constexpr auto find(char character, ssize position = 0) const
        -> Optional<Sentinel<ssize, -1>> {
        ssize i = position;
        for (; i < this->length - char1x_::lanes; i += char1x_::lanes) {
            // TODO: Consider aligning this load?
            char1x_ const storage = char1x_::loaded(this->p_storage + i);
            // TODO: Support a native ABI mask here.
            SimdMask<Avx2Abi<char>, char> const compare =
                (storage == character);
            int4 const mask = move_mask(compare);
            if (mask != 0) {
                return i + mask.count_trailing_zeros();
            }
        }
        // The last chunk of this string, smaller than `char1x_::lanes`, is
        // stepped through one character at a time.
        return this->find_small(character, i);
    }

  private:
    // `String` inherits:
    //
    // `char const* p_storage;`
    // `ssize length;`
};

// This is `ssize::Raw` because GCC cannot deduce a string literal's
// length from an `ssize`.
template <ssize::Raw length>
class StaticString : public CollectionFacade<StaticString<length>, char> {
  public:
    constexpr auto p_data() -> char* {
        return &(this->storage[0]);
    }

    constexpr auto p_data() const -> char const* {
        return &(this->storage[0]);
    }

    constexpr auto size() const -> ssize {
        return length;
    }

    constexpr StaticString() = default;

    // Construct from another `StaticString` of lesser or equal length.
    constexpr StaticString(StaticString<length> const& string) {
        this->copy_string_data(string.p_data());
    }

    // Construct and deduce length from a string literal.
    constexpr StaticString(char const (&in)[length]) {
        // This must be copied instead of initialized in-place to guarantee
        // const-correctness.
        this->copy_string_data(in);
    }

    // Create a `StaticString` from a smaller string, and null out the unfilled
    // bytes.
    template <ssize::Raw in_length>
        requires(in_length < length)
    static consteval auto padded(char const (&in)[in_length])
        -> StaticString<length> {
        StaticString<length> string;
        for (ssize::Raw i = 0; i < in_length; ++i) {
            string[i] = in[i];
        }
        for (ssize::Raw i = in_length; i < length; ++i) {
            string[i] = '\0';
        }
        return string;
    }

    // Assign a `StaticString` of lesser or equal length.
    constexpr auto operator=(StaticString<length> const& string)
        -> StaticString<length>& {
        this->copy_string_data(string.p_data());
        return *this;
    }

    // Assign a string literal of lesser or equal length.
    constexpr auto operator=(char const (&in)[length])
        -> StaticString<length>& {
        this->copy_string_data(in);
        return *this;
    }

    // Concatenate constant-evaluated strings.
    // This is `ssize::Raw` because GCC cannot deduce a string literal's
    // length from an `ssize`.
    template <ssize::Raw other_length>
    constexpr friend auto operator+(
        StaticString<length> const& self,
        StaticString<other_length> const& other_string)
        -> StaticString<length - 1 + other_length> {
        // Add the lengths of two null-terminated strings together:
        constexpr ssize::Raw new_length = length - 1 + other_length;
        char array[new_length];

        for (ssize::Raw i = 0; i < length - 1; ++i) {
            array[i] = self.storage[i];
        }

        for (ssize::Raw i = length - 1; i < new_length - 1; ++i) {
            array[i] = other_string.p_data()[i - length + 1];
        }

        // Make this new string null-terminated.
        array[new_length - 1] = '\0';
        StaticString<new_length> new_string = array;
        return new_string;
    }

  private:
    constexpr void copy_string_data(char const* p_source) {
        if (is_constant_evaluated()) {
            for (ssize::Raw i = 0; i < length; ++i) {
                this->storage[i] = p_source[i];
            }
        } else {
            copy_memory(p_source, this->p_data(), length);
        }
    }

    char storage[length];
};

[[nodiscard]] auto compare_strings(String const string_1, String const string_2)
    -> bool;

[[nodiscard]] auto print(String const string) -> ssize;

[[nodiscard]] auto println(String const string) -> ssize;

[[nodiscard]] auto eprint(String const string) -> ssize;

[[nodiscard]] auto eprintln(String const string) -> ssize;

// TODO: Investigate zero-overhead `println` of literals again.

// TODO: Make a dynamically allocating `println` overload.

// TODO: Make a comparison function for null-terminated string pointers.

}  // namespace cat

// These must be implemented after both `Optional` and `String`:

template <typename T>
[[nodiscard]] auto cat::Optional<T>::or_exit(cat::String const error_message,
                                             ssize exit_code) & {
    if (this->has_value()) [[likely]] {
        if constexpr (!is_void<T>) {
            return this->value();
        } else {
            return;
        }
    } else {
        _ = eprintln(error_message);
        exit(exit_code);
    }
}

template <typename T>
[[nodiscard]] auto cat::Optional<T>::or_exit(cat::String const error_message,
                                             ssize exit_code) const& {
    if (this->has_value()) [[likely]] {
        if constexpr (!is_void<T>) {
            return this->value();
        } else {
            return;
        }
    } else {
        _ = eprintln(error_message);
        exit(exit_code);
    }
}

template <typename T>
[[nodiscard]] auto cat::Optional<T>::or_exit(cat::String const error_message,
                                             ssize exit_code) && {
    if (this->has_value()) [[likely]] {
        if constexpr (!is_void<T>) {
            return move(this->value());
        } else {
            return;
        }
    } else {
        _ = eprintln(error_message);
        exit(exit_code);
    }
}

template <typename T>
[[nodiscard]] auto cat::Optional<T>::or_exit(cat::String const error_message,
                                             ssize exit_code) const&& {
    if (this->has_value()) [[likely]] {
        if constexpr (!is_void<T>) {
            return move(this->value());
        } else {
            return;
        }
    } else {
        _ = eprintln(error_message);
        exit(exit_code);
    }
}

#include "../implementations/string_length.tpp"

// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

// TODO: This needs tests and lots of fixes.
// Every function in this file that is prefixed with `__` is a GCC built-in.

namespace cat {

enum MemoryOrder : int {
    relaxed,
    consume,
    acquire,
    release,
    acq_rel,
    seq_cst,
};

namespace detail {
    enum MemoryOrderModifier {
        mask = 0x0ffff,
        modifier_mask = 0xffff0000,
        hle_acquire = 0x10000,
        hle_release = 0x20000
    };
}  // namespace detail

constexpr auto operator|(MemoryOrder order,
                         detail::MemoryOrderModifier modifier) -> MemoryOrder {
    return MemoryOrder(order | modifier);
}

constexpr auto operator&(MemoryOrder order,
                         detail::MemoryOrderModifier modifier) -> MemoryOrder {
    return MemoryOrder(order & modifier);
}

namespace detail {
    constexpr auto cmpexch_failure_order2(MemoryOrder order) -> MemoryOrder {
        return order == MemoryOrder::acq_rel   ? MemoryOrder::acquire
               : order == MemoryOrder::release ? MemoryOrder::relaxed
                                               : order;
    }

    constexpr auto cmpexch_failure_order(MemoryOrder order) -> MemoryOrder {
        return MemoryOrder(
            cmpexch_failure_order2(order & detail::MemoryOrderModifier::mask) |
            detail::MemoryOrderModifier(
                order & detail::MemoryOrderModifier::modifier_mask));
    }
}  // namespace detail

void thread_fence(MemoryOrder&& order) {
    __atomic_thread_fence(order);
}

void signal_fence(MemoryOrder&& order) {
    __atomic_signal_fence(order);
}

// Ensure that the dependency tree started by an `MemoryOrder::consume`
// atomic load operation does not extend past this return value. `expression`
// does not carry a dependency into the return value.
template <typename T>
auto kill_dependency(T expression) -> T {
    return result(expression);
}

// TODO: Enforce this with a `concept`.
// `Atomic<T>` wraps a type that may be `2`, `4`, or `8` bytes large. If it
// wraps a `bool`, it does not have fetch methods or operators.
template <typename T>
struct Atomic {
    // using Value = T;

    Atomic() = default;
    ~Atomic() = default;
    Atomic(Atomic const&) = delete;
    auto operator=(Atomic const&) -> Atomic& = delete;
    auto operator=(Atomic const&) volatile -> Atomic& = delete;
    constexpr Atomic(T initial_value) : value(initial_value) {
    }

    operator T() const {
        return load();
    }

    operator T() const volatile {
        return load();
    }

    auto operator=(T operand) -> T {
        store(operand);
        return operand;
    }

    auto operator=(T operand) volatile -> T {
        store(operand);
        return operand;
    }

    // TODO: This should handle all boolean types, not just `bool`.
    auto operator++(int) -> T requires(!is_same<T, bool>) {
        return fetch_add(1);
    }

    auto operator++(int) volatile -> T requires(!is_same<T, bool>) {
        return fetch_add(1);
    }

    auto operator--(int) -> T requires(!is_same<T, bool>) {
        return fetch_sub(1);
    }

    auto operator--(int) volatile -> T requires(!is_same<T, bool>) {
        return fetch_sub(1);
    }

    auto operator++() -> T requires(!is_same<T, bool>) {
        return __atomic_add_fetch(&this->value, 1, MemoryOrder::seq_cst);
    }

    auto operator++() volatile -> T requires(!is_same<T, bool>) {
        return __atomic_add_fetch(&this->value, 1, MemoryOrder::seq_cst);
    }

    auto operator--() -> T requires(!is_same<T, bool>) {
        return __atomic_sub_fetch(&this->value, 1, MemoryOrder::seq_cst);
    }

    auto operator--() volatile -> T requires(!is_same<T, bool>) {
        return __atomic_sub_fetch(&this->value, 1, MemoryOrder::seq_cst);
    }

    auto operator+=(auto operand) -> T requires(!is_same<T, bool>) {
        return __atomic_add_fetch(&this->value, operand, MemoryOrder::seq_cst);
    }

    auto operator+=(auto operand) volatile -> T requires(!is_same<T, bool>) {
        return __atomic_add_fetch(&this->value, operand,
                                  int4(MemoryOrder::seq_cst));
    }

    auto operator-=(auto operand) -> T requires(!is_same<T, bool>) {
        return __atomic_sub_fetch(&this->value, operand,
                                  int4(MemoryOrder::seq_cst));
    }

    auto operator-=(auto operand) volatile -> T requires(!is_same<T, bool>) {
        return __atomic_sub_fetch(&this->value, operand,
                                  int4(MemoryOrder::seq_cst));
    }

    auto operator&=(auto operand) -> T requires(!is_same<T, bool>) {
        return __atomic_and_fetch(&this->value, operand,
                                  int4(MemoryOrder::seq_cst));
    }

    auto operator&=(auto operand) volatile -> T requires(!is_same<T, bool>) {
        return __atomic_and_fetch(&this->value, operand,
                                  int4(MemoryOrder::seq_cst));
    }

    auto operator|=(auto operand) -> T requires(!is_same<T, bool>) {
        return __atomic_or_fetch(&this->value, operand,
                                 int4(MemoryOrder::seq_cst));
    }

    auto operator|=(auto operand) volatile -> T requires(!is_same<T, bool>) {
        return __atomic_or_fetch(&this->value, operand,
                                 int4(MemoryOrder::seq_cst));
    }

    auto operator^=(auto operand) -> T requires(!is_same<T, bool>) {
        return __atomic_xor_fetch(&this->value, operand,
                                  int4(MemoryOrder::seq_cst));
    }

    auto operator^=(auto operand) volatile -> T requires(!is_same<T, bool>) {
        return __atomic_xor_fetch(&this->value, operand,
                                  int4(MemoryOrder::seq_cst));
    }

    auto is_lock_free() const -> bool {
        // Use a fake, minimally aligned pointer.
        return __atomic_is_lock_free(sizeof(this->value),
                                     // NOLINTNEXTLINE
                                     reinterpret_cast<void*>(-alignment));
    }

    auto is_lock_free() const volatile -> bool {
        // Use a fake, minimally aligned pointer.
        return __atomic_is_lock_free(sizeof(this->value),
                                     // NOLINTNEXTLINE
                                     reinterpret_cast<void*>(-alignment));
    }

    void store(auto storing, MemoryOrder operand = MemoryOrder::seq_cst) {
        MemoryOrder test_value [[maybe_unused]] = operand & detail::mask;

        Result(test_value != MemoryOrder::acquire).assert();
        Result(test_value != MemoryOrder::acq_rel).assert();
        Result(test_value != MemoryOrder::consume).assert();

        __atomic_store_n(&this->value, storing, operand);
    }

    void store(auto operand,
               MemoryOrder order = MemoryOrder::seq_cst) volatile {
        MemoryOrder test_value [[maybe_unused]] = order & detail::mask;

        Result(test_value != MemoryOrder::acquire).assert();
        Result(test_value != MemoryOrder::acq_rel).assert();
        Result(test_value != MemoryOrder::consume).assert();

        __atomic_store_n(&this->value, operand, order);
    }

    auto load(MemoryOrder order = MemoryOrder::seq_cst) const -> T {
        MemoryOrder test_value [[maybe_unused]] = order & detail::mask;

        Result(test_value != MemoryOrder::release).assert();
        Result(test_value != MemoryOrder::acq_rel).assert();

        return __atomic_load_n(&this->value, order);
    }

    auto load(MemoryOrder order = MemoryOrder::seq_cst) const volatile -> T {
        MemoryOrder test_value [[maybe_unused]] = order & detail::mask;

        Result(test_value != MemoryOrder::release).assert();
        Result(test_value != MemoryOrder::acq_rel).assert();

        return __atomic_load_n(&this->value, order);
    }

    auto exchange(T operand, MemoryOrder order = MemoryOrder::seq_cst) -> T {
        return __atomic_exchange_n(&this->value, operand, order);
    }

    auto exchange(T operand, MemoryOrder order = MemoryOrder::seq_cst) volatile
        -> T {
        return __atomic_exchange_n(&this->value, operand, order);
    }

    auto compare_exchange_weak(T& operand, T success_value,
                               MemoryOrder success_order,
                               MemoryOrder failure_order) -> bool {
        MemoryOrder test_value1 [[maybe_unused]] = success_order & detail::mask;
        MemoryOrder test_value2 [[maybe_unused]] = failure_order & detail::mask;

        Result(test_value2 != MemoryOrder::release).assert();
        Result(test_value2 != MemoryOrder::acq_rel).assert();
        Result(test_value2 <= test_value1).assert();

        return __atomic_compare_exchange_n(&this->value, &operand,
                                           success_value, 1, success_order,
                                           failure_order);
    }

    auto compare_exchange_weak(T& operand, T success_value,
                               MemoryOrder success_order,
                               MemoryOrder failure_order) volatile -> bool {
        MemoryOrder test_value1 [[maybe_unused]] = success_order & detail::mask;
        MemoryOrder test_value2 [[maybe_unused]] = failure_order & detail::mask;

        Result(test_value2 != MemoryOrder::release).assert();
        Result(test_value2 != MemoryOrder::acq_rel).assert();
        Result(test_value2 <= test_value1).assert();

        return __atomic_compare_exchange_n(&this->value, &operand,
                                           success_value, 1, success_order,
                                           failure_order);
    }

    auto compare_exchange_weak(T& operand, T success_value,
                               MemoryOrder order = MemoryOrder::seq_cst)
        -> bool {
        return compare_exchange_weak(operand, success_value, order,
                                     detail::cmpexch_failure_order(order));
    }

    auto compare_exchange_weak(
        T& operand, T success_value,
        MemoryOrder order = MemoryOrder::seq_cst) volatile -> bool {
        return compare_exchange_weak(operand, success_value, order,
                                     detail::cmpexch_failure_order(order));
    }

    auto compare_exchange_strong(T& operand, T success_value,
                                 MemoryOrder success_order,
                                 MemoryOrder failure_order) -> bool {
        MemoryOrder test_value1 [[maybe_unused]] = success_order & detail::mask;
        MemoryOrder test_value2 [[maybe_unused]] = failure_order & detail::mask;

        Result(test_value2 != MemoryOrder::release).assert();
        Result(test_value2 != MemoryOrder::acq_rel).assert();
        Result(test_value2 <= test_value1).assert();

        return __atomic_compare_exchange_n(&this->value, &operand,
                                           success_value, 0, success_order,
                                           failure_order);
    }

    auto compare_exchange_strong(T& operand, T success_value,
                                 MemoryOrder success_order,
                                 MemoryOrder failure_order) volatile -> bool {
        MemoryOrder test_value1 [[maybe_unused]] = success_order & detail::mask;
        MemoryOrder test_value2 [[maybe_unused]] = failure_order & detail::mask;

        Result(test_value2 != MemoryOrder::release).assert();
        Result(test_value2 != MemoryOrder::acq_rel).assert();
        Result(test_value2 <= test_value1).assert();

        return __atomic_compare_exchange_n(&this->value, &operand,
                                           success_value, 0, success_order,
                                           failure_order);
    }

    auto compare_exchange_strong(T& operand, T success_value,
                                 MemoryOrder order = MemoryOrder::seq_cst)
        -> bool {
        return compare_exchange_strong(operand, success_value, order,
                                       detail::cmpexch_failure_order(order));
    }

    auto compare_exchange_strong(
        T& operand, T success_value,
        MemoryOrder order = MemoryOrder::seq_cst) volatile -> bool {
        return compare_exchange_strong(operand, success_value, order,
                                       detail::cmpexch_failure_order(order));
    }

    auto fetch_add(auto operand, MemoryOrder order = MemoryOrder::seq_cst) -> T
        requires(!is_same<T, bool>) {
        return __atomic_fetch_add(&this->value, operand, order);
    }

    auto fetch_add(auto operand,
                   MemoryOrder order = MemoryOrder::seq_cst) volatile -> T
        requires(!is_same<T, bool>) {
        return __atomic_fetch_add(&this->value, operand, order);
    }

    auto fetch_sub(auto operand, MemoryOrder order = MemoryOrder::seq_cst) -> T
        requires(!is_same<T, bool>) {
        return __atomic_fetch_sub(&this->value, operand, order);
    }

    auto fetch_sub(auto operand,
                   MemoryOrder order = MemoryOrder::seq_cst) volatile -> T
        requires(!is_same<T, bool>) {
        return __atomic_fetch_sub(&this->value, operand, order);
    }

    auto fetch_and(auto operand, MemoryOrder order = MemoryOrder::seq_cst) -> T
        requires(!is_same<T, bool>) {
        return __atomic_fetch_and(&this->value, operand, order);
    }

    auto fetch_and(auto operand,
                   MemoryOrder order = MemoryOrder::seq_cst) volatile -> T
        requires(!is_same<T, bool>) {
        return __atomic_fetch_and(&this->value, operand, order);
    }

    auto fetch_or(auto operand, MemoryOrder order = MemoryOrder::seq_cst) -> T
        requires(!is_same<T, bool>) {
        return __atomic_fetch_or(&this->value, operand, order);
    }

    auto fetch_or(auto operand,
                  MemoryOrder order = MemoryOrder::seq_cst) volatile -> T
        requires(!is_same<T, bool>) {
        return __atomic_fetch_or(&this->value, operand, order);
    }

    auto fetch_xor(auto operand, MemoryOrder order = MemoryOrder::seq_cst) -> T
        requires(!is_same<T, bool>) {
        return __atomic_fetch_xor(&this->value, operand, order);
    }

    auto fetch_xor(auto operand,
                   MemoryOrder order = MemoryOrder::seq_cst) volatile -> T
        requires(!is_same<T, bool>) {
        return __atomic_fetch_xor(&this->value, operand, order);
    }

    // TODO: Add C++20 atomic wait operations.

    static constexpr int4 alignment = sizeof(T) > alignof(T) ? sizeof(T)
                                                             : alignof(T);

    // `value` is not intended to be mutated directly. Doing so may be
    // bug-prone.
    alignas(alignment) T value = 0;
};

// TODO: Add atomic flags
// TODO: Add atomic ref

}  // namespace cat

// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/meta>
#include <cat/utility>

// libCat provides userland pattern matching to simplify variant visitation in
// some cases. `cat::match()` takes a generic argument, then produces a callable
// `cat::detail::MatchPatterns` that holds a non-`const` reference to the
// argument.

// This `MatchPatterns` object can be called with a variadic list of pattern
// objects. They are constructed with either function or template arguments,
// depending on what kind of pattern they represent. Calling `.then()` on them
// constructs a callable `cat::detail::Pattern` object with a predicate that
// represents the pattern. For instance, `one_of<Ts...>()` generates a predicate
// that checks if the reference provided to `match()` represents any of the
// types in `Ts`.

// The constructed `Pattern` object is called with an invocable argument, such
// as a lambda, which itself takes no arguments.

// This variadic list of `Pattern` objects are recursed through, and their
// predicate is called with that reference provided to `cat::match()`. If the
// predicate holds true, then the invocable argument to `.then()` on that
// pattern is invoked.

// `Pattern` objects are called top-to bottom, in the order provided to the
// `MatchPatterns`. When a pattern is matched in this way, it short circuits the
// remaining patterns, so they are never called.

// The `Pattern` predicates will call `.is()` on the reference provided to
// `match`, if such a method exists. `.is()` can be given either a single
// template type argument, or a single value function argument. If no such
// method exists in this case, instead a `cat::is_same<>()` or `==` will be
// called, respectively. Generally, the value equality checks will explicitly
// convert the pattern's argument type to the underlying type of the reference
// provided to `cat::match()`.

// The resulting syntax looks like:

// match(v)(is_a<int>().then([](){
//              print("int");
//          }),
//          is_a(1.f).then([](){
//              print("1.f");
//          }),
//          one_of<int, double>().then([](){
//              print("int or double");
//          }),
//          TODO:
//          one_of(2.f, 3).then([](){
//              print("2.f or 3");
//          }),
//          TODO:
//          otherwise([](){
//              print("No match.");
//          }));

namespace cat {

template <typename T>
concept has_is = requires(T t) {
    t.template is<int>();
    t.template is(0);
};

namespace detail {
    struct Pattern {};

    // TODO: Can this callback be type erased?
    template <typename Function>
    struct PatternCallback {
        // This isn't needed in C++20, but it prevents a clangd false
        // diagnostic.
        PatternCallback(Function&& input) : callback(forward<Function>(input)) {
        }

        // TODO: Add a `.when()` predicate.

        template <typename T>
        constexpr auto operator()(T&& matching) -> decltype(auto) {
            return this->callback(forward<T>(matching));
        }

        Function callback;
    };

    template <typename... Ts>
    struct OneOfTypes : Pattern {
        constexpr OneOfTypes() = default;

        // TODO: Add a `.when()` predicate.

        template <typename Function>
        constexpr auto then(Function&& callback) {
            return PatternCallback{[&](auto& matching) -> bool {
                using U = RemoveConst<RemoveReference<decltype(matching)>>;
                if constexpr (has_is<U>) {
                    // If `matching` currently holds one of `Ts`, then invoke
                    // `callback`.
                    if (((matching.template is<Ts>()) || ...)) {
                        forward<Function>(callback)();
                        return true;
                    }
                } else {
                    // If there is no `.is()` method for `matching`, fall back
                    // to a trivial `is_same` check.
                    if ((is_same<U, Ts> || ...)) {
                        forward<Function>(callback)();
                        return true;
                    }
                }
                return false;
            }};
        }
    };

    template <typename T>
    struct IsAValue : Pattern {
        constexpr IsAValue(T&& in_value) : value(forward<T>(in_value)) {
        }

        // TODO: Add a `.when()` predicate.

        template <typename Function>
        constexpr auto then(Function&& callback) {
            return PatternCallback{[&](auto& matching) -> bool {
                using U = RemoveConst<RemoveReference<decltype(matching)>>;
                if constexpr (has_is<U>) {
                    // If `matching` currently holds a value equivalent to
                    // `this->value`, then invoke `callback`.
                    if (matching.template is(this->value)) {
                        forward<Function>(callback)();
                        return true;
                    }
                } else {
                    // If there is no `.is()` method for `matching`, fall back
                    // to a trivial `==` check.
                    if (static_cast<U>(matching) == value) {
                        forward<Function>(callback)();
                        return true;
                    }
                }
                return false;
            }};
        }

        T value;
    };
}  // namespace detail

template <typename... Ts>
constexpr auto one_of() -> detail::OneOfTypes<Ts...> {
    return detail::OneOfTypes<Ts...>{};
}

// TODO: `one_of()` overload taking values instead of types.

template <typename T>
constexpr auto is_a() -> detail::OneOfTypes<T> {
    return detail::OneOfTypes<T>{};
}

template <typename T>
constexpr auto is_a(T&& value) -> detail::IsAValue<T> {
    return detail::IsAValue<T>{forward<T>(value)};
}

namespace detail {
    template <typename T>
    struct MatchPatterns {
        // This isn't needed in C++20, but it prevents a clangd false
        // diagnostic.
        MatchPatterns(T& input) : matching(input) {
        }

        // Base case.
        template <typename U>
        constexpr void call_pattern(U&& pattern) {
            !forward<U>(pattern)(this->matching);
        }

        // Call every pattern in order.
        template <typename U, typename... Remaining>
            requires(sizeof...(Remaining) > 0)
        constexpr void call_pattern(U&& pattern, Remaining&&... remaining) {
            if (forward<U>(pattern)(this->matching)) {
                // Short circuit the remaining patterns if this one returns
                // true.
                return;
            }
            return call_pattern(forward<Remaining>(remaining)...);
        }

        // Every pattern must be either an `is_a` or `one_of`.
        template <typename... Patterns>
            requires(is_specialization<Patterns, detail::PatternCallback>&&...)
        constexpr void operator()(Patterns&&... patterns) {
            // Recurse through `patterns` in order. Invoke the call operator on
            // each of them with `this->matching` as an argument. When one
            // pattern holds true, invoke its callback and stop recursing.
            this->call_pattern(forward<Patterns>(patterns)...);
        }

        T& matching;
    };
}  // namespace detail

template <typename T>
constexpr auto match(T& matching) -> detail::MatchPatterns<T> {
    return detail::MatchPatterns(matching);
}

}  // namespace cat

using cat::is_a;
using cat::one_of;

// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/meta>
#include <cat/utility>

// libCat provides userland pattern matching to simplify variant visitation in
// some cases. `cat::match()` takes a generic argument, then produces a callable
// `cat::detail::match_patterns` that holds a non-`const` reference to the
// argument.

// This `match_patterns` object can be called with a variadic list of pattern
// objects. They are constructed with either function or template arguments,
// depending on what kind of pattern they represent. Calling `.then()` on them
// constructs a callable `cat::detail::pattern` object with a predicate that
// represents the pattern. For instance, `one_of<types...>()` generates a
// predicate that checks if the reference provided to `match()` represents any
// of the types in `types`.

// The constructed `pattern` object is called with an invocable argument, such
// as a lambda, which itself takes no arguments.

// This variadic list of `pattern` objects are recursed through, and their
// predicate is called with that reference provided to `cat::match()`. If the
// predicate holds true, then the invocable argument to `.then()` on that
// pattern is invoked.

// `pattern` objects are called top-to bottom, in the order provided to the
// `match_patterns`. When a pattern is matched in this way, it short circuits
// the remaining patterns, so they are never called.

// The `pattern` predicates will call `.is()` on the reference provided to
// `match`, if such a method exists. `.is()` can be given either a single
// template type argument, or a single value function argument. If no such
// method exists in this case, instead a `cat::is_same<>()` or `==` will be
// called, respectively. Generally, the value equality checks will explicitly
// convert the pattern's argument type to the underlying type of the reference
// provided to `cat::match()`.

// The resulting syntax looks like:

// match(v)(is_a<int>().then([](){
//              print("int");
//          }),
//          is_a(1.f).then([](){
//              print("1.f");
//          }),
//          one_of<int, double>().then([](){
//              print("int or double");
//          }),
//          TODO:
//          one_of(2.f, 3).then([](){
//              print("2.f or 3");
//          }),
//          TODO:
//          otherwise([](){
//              print("No match.");
//          }));

namespace cat {

template <typename T>
concept has_member_is_type = requires(T t) {
    t.template is<int>();
};

template <typename T>
concept has_member_is_value = requires(T t) {
    t.template is(declval<T>());
};

namespace detail {
    struct pattern {};

    // TODO: This should not be in `detail::`.
    // TODO: Can this invocable be type erased?
    template <typename function>
    struct pattern_invocable {
        // This isn't needed in C++20, but it prevents a clangd false
        // diagnostic.
        pattern_invocable(function&& input)
            : invocable(forward<function>(input)) {
        }

        // TODO: Add a `.when()` predicate.

        template <typename T>
        constexpr auto operator()(T&& matching) -> decltype(auto) {
            return this->invocable(forward<T>(matching));
        }

        function invocable;
    };

    template <typename... types>
    struct one_of_types : pattern {
        constexpr one_of_types() = default;

        // TODO: Add a `.when()` predicate.

        template <typename function>
        constexpr auto then(function&& invocable) {
            return pattern_invocable{[&](auto& matching) -> bool {
                using unqualified_matching =
                    remove_const<remove_reference<decltype(matching)>>;
                if constexpr (has_member_is_type<unqualified_matching>) {
                    // If `matching` currently holds one of `types`, then invoke
                    // `invocable`.
                    if (((matching.template is<types>()) || ...)) {
                        forward<function>(invocable)();
                        return true;
                    }
                } else {
                    // If there is no `.is()` method for `matching`, fall back
                    // to a trivial `is_same` check.
                    if ((is_same<unqualified_matching, types> || ...)) {
                        forward<function>(invocable)();
                        return true;
                    }
                }
                return false;
            }};
        }
    };

    template <typename T>
    struct is_a_value_type : pattern {
        constexpr is_a_value_type(T&& in_value) : value(forward<T>(in_value)) {
        }

        // TODO: Add a `.when()` predicate.

        template <typename function>
        constexpr auto then(function&& invocable) {
            return pattern_invocable{[&](auto& matching) -> bool {
                using unqualified_matching = remove_cvref<decltype(matching)>;
                if constexpr (has_member_is_value<unqualified_matching>) {
                    // If `matching` currently holds a value equivalent to
                    // `this->value`, then invoke `invocable`.
                    if (matching.template is(this->value)) {
                        forward<function>(invocable)();
                        return true;
                    }
                } else {
                    // If there is no `.is()` method for `matching`, fall back
                    // to a trivial `==` check.
                    if (static_cast<unqualified_matching>(matching) == value) {
                        forward<function>(invocable)();
                        return true;
                    }
                }
                return false;
            }};
        }

        T value;
    };
}  // namespace detail

template <typename... types>
constexpr auto one_of() -> detail::one_of_types<types...> {
    return detail::one_of_types<types...>{};
}

// TODO: `one_of()` overload taking values instead of types.

template <typename T>
constexpr auto is_a() -> detail::one_of_types<T> {
    return detail::one_of_types<T>{};
}

template <typename T>
constexpr auto is_a(T&& value) -> detail::is_a_value_type<T> {
    return detail::is_a_value_type<T>{forward<T>(value)};
}

namespace detail {
    // TODO: This should not be in `detail::`.
    template <typename T>
    struct match_patterns {
        // This isn't needed in C++20, but it prevents a clangd false
        // diagnostic.
        match_patterns(T& input) : matching(input) {
        }

        // Base case.
        template <typename U>
        constexpr void call_pattern(U&& pattern) {
            (void)!forward<U>(pattern)(this->matching);
        }

        // Call every pattern in order.
        template <typename U, typename... remaining>
        requires(sizeof...(remaining) >
                 0) constexpr void call_pattern(U&& pattern,
                                                remaining&&... remaining_args) {
            if (forward<U>(pattern)(this->matching)) {
                // Short circuit the remaining patterns if this one returns
                // true.
                return;
            }
            return call_pattern(forward<remaining>(remaining_args)...);
        }

        // Every pattern must be either an `is_a` or `one_of`.
        template <typename... patterns>
        requires(is_specialization<
                 patterns, detail::pattern_invocable>&&...) constexpr void
        operator()(patterns&&... pattern_args) {
            // Recurse through `pattern_args` in order. Invoke the call operator
            // on each of them with `this->matching` as an argument. When one
            // pattern holds true, invoke its invocable and stop recursing.
            this->call_pattern(forward<patterns>(pattern_args)...);
        }

        T& matching;
    };
}  // namespace detail

template <typename T>
constexpr auto match(T& matching) -> detail::match_patterns<T> {
    return detail::match_patterns(matching);
}

}  // namespace cat

using cat::is_a;
using cat::one_of;

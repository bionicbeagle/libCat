// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

// TODO: Down with `typename`! clangd 14 emits false positive diagnostics if
// `typename` is not used for these type aliases. When that is solved, they
// should be streamlined out.

namespace cat {

// Forward declare numeric types. These are implemented in `<numeral>`.
enum class OverflowPolicies;

template <typename T, OverflowPolicies>
struct Arithmetic;

struct bool2;
struct bool4;

template <typename T, typename Storage, auto>
class ArithmeticPtr;

// TODO: `MakeSigned` and `MakeUnsigned` must handle cvref qualifiers.

template <typename T>
struct MakeSignedTrait;

template <>
struct MakeSignedTrait<char> {
    using Type = signed char;
};
template <>
struct MakeSignedTrait<signed char> {
    using Type = signed char;
};
template <>
struct MakeSignedTrait<unsigned char> {
    using Type = signed char;
};
template <>
struct MakeSignedTrait<signed short> {
    using Type = signed short;
};
template <>
struct MakeSignedTrait<unsigned short> {
    using Type = signed short;
};
template <>
struct MakeSignedTrait<signed int> {
    using Type = signed int;
};
template <>
struct MakeSignedTrait<unsigned int> {
    using Type = signed int;
};
template <>
struct MakeSignedTrait<signed long> {
    using Type = signed long;
};
template <>
struct MakeSignedTrait<unsigned long> {
    using Type = signed long;
};
template <>
struct MakeSignedTrait<signed long long> {
    using Type = signed long long;
};
template <>
struct MakeSignedTrait<unsigned long long> {
    using Type = signed long long;
};

template <typename T, auto policy>
struct MakeSignedTrait<Arithmetic<T, policy>> {
    using Type = Arithmetic<typename MakeSignedTrait<T>::Type, policy>;
};

template <typename T>
using MakeSigned = typename MakeSignedTrait<T>::Type;

template <typename T>
struct MakeUnsignedTrait;

template <>
struct MakeUnsignedTrait<char> {
    using Type = unsigned char;
};
template <>
struct MakeUnsignedTrait<signed char> {
    using Type = unsigned char;
};
template <>
struct MakeUnsignedTrait<unsigned char> {
    using Type = unsigned char;
};
template <>
struct MakeUnsignedTrait<signed short> {
    using Type = unsigned short;
};
template <>
struct MakeUnsignedTrait<unsigned short> {
    using Type = unsigned short;
};
template <>
struct MakeUnsignedTrait<signed int> {
    using Type = unsigned int;
};
template <>
struct MakeUnsignedTrait<unsigned int> {
    using Type = unsigned int;
};
template <>
struct MakeUnsignedTrait<signed long> {
    using Type = unsigned long;
};
template <>
struct MakeUnsignedTrait<unsigned long> {
    using Type = unsigned long;
};
template <>
struct MakeUnsignedTrait<signed long long> {
    using Type = unsigned long long;
};
template <>
struct MakeUnsignedTrait<unsigned long long> {
    using Type = unsigned long long;
};

template <typename T>
using MakeUnsigned = typename MakeUnsignedTrait<T>::Type;

template <typename T, auto policy>
struct MakeUnsignedTrait<Arithmetic<T, policy>> {
    using Type = Arithmetic<typename MakeUnsignedTrait<T>::Type, policy>;
};

namespace detail {
    template <typename T, typename U = T&&>
    constexpr auto declval_detail(signed int) -> U;

    template <typename T>
    constexpr auto declval_detail(signed long) -> T;
}  // namespace detail

template <typename T>
auto declval() -> decltype(detail::declval_detail<T>(0));

template <typename T>
using Identity = T;

namespace detail {
    template <typename...>
    using Void = void;
}

template <typename>
struct AddConstTrait;

template <typename T>
struct AddConstTrait {
    using Type = T const;
};

template <typename T>
struct AddConstTrait<T&> {
    using Type = T const&;
};

template <typename T>
struct AddConstTrait<T volatile> {
    using Type = T const volatile;
};

template <typename T>
struct AddConstTrait<T&&> {
    using Type = T const&&;
};

template <typename T>
struct AddConstTrait<T volatile&> {
    using Type = T const volatile&;
};

template <typename T>
struct AddConstTrait<T volatile&&> {
    using Type = T const volatile&&;
};

template <typename T>
using AddConst = typename AddConstTrait<T>::Type;

template <typename>
struct AddVolatileTrait;

template <typename T>
struct AddVolatileTrait {
    using Type = T volatile;
};

template <typename T>
struct AddVolatileTrait<T&> {
    using Type = T volatile&;
};

template <typename T>
struct AddVolatileTrait<T&&> {
    using Type = T volatile&&;
};

template <typename T>
struct AddVolatileTrait<T const> {
    using Type = T const volatile;
};

template <typename T>
struct AddVolatileTrait<T const&> {
    using Type = T const volatile&;
};

template <typename T>
struct AddVolatileTrait<T const&&> {
    using Type = T const volatile&&;
};

template <typename T>
using AddVolatile = typename AddVolatileTrait<T>::Type;

template <typename T>
using AddCv = T const volatile;

template <typename T>
struct RemoveConstTrait {
    using Type = T;
};
template <typename T>
struct RemoveConstTrait<T const> {
    using Type = T;
};
template <typename T>
using RemoveConst = typename RemoveConstTrait<T>::Type;

template <typename T>
struct RemoveVolatileTrait {
    using Type = T;
};
template <typename T>
struct RemoveVolatileTrait<T volatile> {
    using Type = T;
};
template <typename T>
using RemoveVolatile = typename RemoveVolatileTrait<T>::Type;

template <typename T>
struct RemoveCvTrait {
    using Type = T;
};
template <typename T>
struct RemoveCvTrait<T const> {
    using Type = T;
};
template <typename T>
struct RemoveCvTrait<T volatile> {
    using Type = T;
};
template <typename T>
struct RemoveCvTrait<T const volatile> {
    using Type = T;
};

// TODO: Use GCC 13's `__remove_cv()`.
template <typename T>
using RemoveCv = typename RemoveCvTrait<T>::Type;

template <typename T>
struct RemoveReferenceTrait {
    using Type = T;
};
template <typename T>
struct RemoveReferenceTrait<T&> {
    using Type = T;
};
template <typename T>
struct RemoveReferenceTrait<T&&> {
    using Type = T;
};

// TODO: Use GCC 13's `__remove_reference()`.
template <typename T>
using RemoveReference = typename RemoveReferenceTrait<T>::Type;

template <typename T>
struct RemoveCvRefTrait {
    using Type = RemoveCvTrait<RemoveReferenceTrait<T>>;
};
// TODO: Use GCC 13's `__remove_cvref()`.
template <typename T>
using RemoveCvRef = typename RemoveCvRefTrait<T>::Type::Type::Type;

namespace detail {
    template <typename T>
    struct RemovePointerTraitDetail {
        using Type = T;
    };
    template <typename T>
    struct RemovePointerTraitDetail<T*> {
        using Type = T;
    };
    template <typename T>
    struct RemovePointerTraitDetail<T* const> {
        using Type = T;
    };
    template <typename T>
    struct RemovePointerTraitDetail<T* volatile> {
        using Type = T;
    };
    template <typename T>
    struct RemovePointerTraitDetail<T* const volatile> {
        using Type = T;
    };
}  // namespace detail

template <typename T>
struct RemovePointerTrait : detail::RemovePointerTraitDetail<T> {};
template <typename T>
using RemovePointer = typename RemovePointerTrait<T>::Type;

template <auto constant_value>
struct Constant {
    static constexpr auto value = constant_value;
    using Type = decltype(constant_value);
};

template <auto value>
inline constexpr auto constval = value;

// Rename to `TrueTrait` and `FalseTrait`.
using TrueTypeTrait = Constant<true>;
using FalseTypeTrait = Constant<false>;

template <bool, typename T, typename U>
struct ConditionalTrait {
    using Type = T;
};
template <typename T, typename U>
struct ConditionalTrait<false, T, U> {
    using Type = U;
};
template <bool condition, typename T, typename U>
using Conditional = typename ConditionalTrait<condition, T, U>::Type;

template <typename T, typename U>
using Larger = Conditional<(sizeof(T) >= sizeof(U)), T, U>;

template <typename T, typename U>
using Smaller = Conditional<(sizeof(T) <= sizeof(U)), T, U>;

// `__is_enum()` is a GNU builtin.
template <typename T>
concept is_enum = __is_enum(T);

// `__is_same()` is a GNU builtin.
template <typename T, typename U>
concept is_same = __is_same(T, U);

// `__is_base_of()` is a GNU builtin.
template <typename T, typename U>
concept is_base_of = __is_base_of(T, U);

// `__is_union()` is a GNU builtin.
template <typename T>
concept is_union = __is_union(T);

// `__is_class()` is a GNU builtin.
template <typename T>
concept is_class = __is_class(T);

template <typename T>
concept is_referenceable = requires {
    // Try to substitute a `T&`. If that is well-formed, this always holds true.
    __is_same(T&, T&);
};

namespace detail {
    template <typename...>
    inline constexpr bool is_reference_detail = false;
    template <is_referenceable T>
    inline constexpr bool is_reference_detail<T> =
        __is_same(T, RemoveReference<T>&) || __is_same(T, RemoveReference<T>&&);
}  // namespace detail

template <typename T>
concept is_reference = detail::is_reference_detail<T>;

template <typename, template <typename...> typename>
inline constexpr bool is_specialization = false;

template <template <typename...> typename Template, typename... Args>
inline constexpr bool is_specialization<Template<Args...>, Template> = true;

namespace detail {
    // TODO: Ignore reference in value categories here.
    // TODO: Include halfs, `_Float16`, `__fp16`, `__bf16`, etc.
    template <typename T>
    inline constexpr bool is_floating_point_detail =
        __is_same(RemoveCv<T>, float) || __is_same(RemoveCv<T>, double) ||
        __is_same(RemoveCv<T>, long double) ||
        __is_same(RemoveCv<T>, __float128);
    template <typename T, auto policy>
    inline constexpr bool is_floating_point_detail<Arithmetic<T, policy>> =
        is_floating_point_detail<T>;
}  // namespace detail

template <typename T>
concept is_floating_point = detail::is_floating_point_detail<T>;

template <is_floating_point T>
struct MakeSignedTrait<T> {
    using Type = T;
};

namespace detail {
    // TODO: Remove references as well. That breaks some traits for some reason.
    // TODO: Support 16-byte integers.
    template <typename T>
    inline constexpr bool is_integral_detail =
        __is_same(RemoveCv<T>, char) ||  //
        __is_same(RemoveCv<T>, signed char) ||
        __is_same(RemoveCv<T>, unsigned char) ||
        __is_same(RemoveCv<T>, signed short) ||
        __is_same(RemoveCv<T>, unsigned short) ||
        __is_same(RemoveCv<T>, signed int) ||
        __is_same(RemoveCv<T>, unsigned int) ||
        __is_same(RemoveCv<T>, signed long) ||
        __is_same(RemoveCv<T>, unsigned long) ||
        __is_same(RemoveCv<T>, signed long long) ||
        __is_same(RemoveCv<T>, unsigned long long);

    template <typename T, auto policy>
    inline constexpr bool is_integral_detail<Arithmetic<T, policy>> =
        is_integral_detail<T>;

    template <typename T, typename Storage, auto policy>
    inline constexpr bool
        is_integral_detail<ArithmeticPtr<T, Storage, policy>> = true;
}  // namespace detail

template <typename T>
concept is_integral = detail::is_integral_detail<T>;

template <typename T>
concept is_bool = __is_same(T, RemoveCvRef<bool>) ||
                  __is_same(T, RemoveCvRef<bool2>) ||
                  __is_same(T, RemoveCvRef<bool4>);

template <typename T>
concept is_arithmetic = is_integral<T> || is_floating_point<T>;

namespace detail {
    template <typename T>
    concept has_less_than_operator = requires(T t) {
        t < static_cast<T>(0);
    };

    template <typename...>
    inline constexpr bool is_signed_detail = false;

    // This expression only holds true if `T` can be constant-evaluated.
    template <detail::has_less_than_operator T>
        requires(requires { T(-1); })
    inline constexpr bool is_signed_detail<T> = constval<(T(-1) < T(0))>;
}  // namespace detail

template <typename T>
concept is_signed = detail::is_signed_detail<T>;

template <typename T>
concept is_unsigned = !is_signed<T>;

template <typename T>
concept is_signed_integral = is_signed<T> && is_integral<T>;

template <typename T>
concept is_unsigned_integral = (!is_signed<T>)&&is_integral<T>;

template <is_integral Sign, is_integral T>
using CopySignFrom =
    Conditional<is_signed<Sign>, MakeSigned<Sign>, MakeUnsignedTrait<Sign>>;

template <typename T>
concept is_void = __is_same(T, void);

namespace detail {
    // TODO: For some reason, `__is_same(T, T const)` does not work.
    template <typename>
    inline constexpr bool is_const_detail = false;
    template <typename T>
    inline constexpr bool is_const_detail<T const> = true;
    template <typename T>
    inline constexpr bool is_const_detail<T const&> = true;
    template <typename T>
    inline constexpr bool is_const_detail<T const&&> = true;

    template <typename T>
    inline constexpr bool is_volatile_detail = __is_same(T, T volatile);

    template <typename T>
    inline constexpr bool is_pointer_detail = !__is_same(T, RemovePointer<T>);

    template <typename T>
    inline constexpr bool is_array_detail =
        !is_pointer_detail<T> && requires(T t) {
        t[0];
    };
}  // namespace detail

template <typename T>
concept is_const = detail::is_const_detail<T>;

template <typename T>
concept is_volatile = detail::is_volatile_detail<T>;

template <typename T>
concept is_pointer = detail::is_pointer_detail<T>;

template <typename T>
concept is_array = detail::is_array_detail<T>;

template <typename T>
struct RemoveExtentTrait {
    using Type = T;
};
template <typename T, int size>
struct RemoveExtentTrait<T[size]> {
    using Type = T;
};
template <typename T>
struct RemoveExtentTrait<T[]> {
    using Type = T;
};
template <typename T>
using RemoveExtent = typename RemoveExtentTrait<T>::Type;

namespace detail {
    template <typename T>
    struct IsMemberPointerTrait : FalseTypeTrait {};

    template <typename T, typename U>
    struct IsMemberPointerTrait<T U::*> : TrueTypeTrait {};
}  // namespace detail

template <typename T>
concept is_member_pointer = detail::IsMemberPointerTrait<RemoveCv<T>>::value;

template <typename T>
struct IsMemberFunctionPointerHelperTrait : FalseTypeTrait {};

// Forward declare this trait, so that it can be organized better later on.
template <typename T>
struct IsFunctionTrait;

template <typename T, typename U>
struct IsMemberFunctionPointerHelperTrait<T U::*> : IsFunctionTrait<T> {};

template <typename T>
struct IsMemberFunctionPointerTrait
    : IsMemberFunctionPointerHelperTrait<RemoveCv<T>> {};

template <typename T>
concept is_member_function_pointer = IsMemberFunctionPointerTrait<T>::value;

template <typename T>
concept is_member_object_pointer =
    is_member_pointer<T> && !is_member_function_pointer<T>;

template <typename T>
concept is_null_pointer = __is_same(RemoveCv<T>, decltype(nullptr));

template <typename T>
concept is_scalar = is_arithmetic<T> || is_enum<T> || is_pointer<T> ||
    is_member_pointer<T> || is_null_pointer<T>;

template <typename T>
using AddPointer = Conditional<is_referenceable<T>, RemoveReference<T>*, T*>;

template <typename T>
using AddLvalueReference = T&;

template <typename T>
using AddRvalueReference = T&&;

template <typename T>
concept is_lvalue_reference = __is_same(T, RemoveReference<T>&);

template <typename T>
concept is_rvalue_reference = __is_same(T, RemoveReference<T>&&);

template <typename From, typename To>
using CopyConstFrom = Conditional<is_const<From>,
                                  // From is const.
                                  AddConst<To>,
                                  // From is not const.
                                  RemoveConst<To>>;

template <typename From, typename To>
using CopyVolatileFrom = Conditional<is_volatile<RemoveReference<From>>,
                                     // From is volatile.
                                     AddVolatile<To>,
                                     // From is not volatile.
                                     RemoveVolatile<To>>;

template <typename From, typename To>
using CopyRefFrom =
    Conditional<is_lvalue_reference<From>,
                // From is an l-value reference.
                AddLvalueReference<RemoveReference<To>>,
                Conditional<is_rvalue_reference<From>,
                            // From is an r-value reference.
                            AddRvalueReference<RemoveReference<To>>,
                            // From is not a reference.
                            RemoveReference<To>>>;

template <typename From, typename To>
using CopyCvFrom = CopyVolatileFrom<From, CopyConstFrom<From, To>>;

template <typename From, typename To>
using CopyCvRefFrom = CopyRefFrom<From, CopyCvFrom<From, To>>;

// `__underlying_type` is a GNU builtin.
template <typename T>
struct UnderlyingTypeTrait {
    using Type = __underlying_type(T);
};

// GCC 12 doesn't seem to compile this correctly if `__underlying_type()` is
// used directly.
template <typename T>
using UnderlyingType = typename UnderlyingTypeTrait<T>::Type;

template <typename From, typename To>
concept is_convertible = __is_convertible(From, To);

template <typename From, typename To>
concept is_implicitly_convertible =
    __is_assignable(To, From) ||
    __is_constructible(To, From) || is_convertible<From, To> ||
    __is_same(To, From);

// TODO: Add `__is_nothrow_convertible()` from GCC 13.

template <typename T>
concept is_sizable = requires {
    sizeof(T);
};

template <typename T>
concept is_scoped_enum = __is_enum(T) && is_sizable<T> &&
                         !is_implicitly_convertible<T, int>;
//     !requires(T t, void (*p_f)(int)) {
//     p_f(t);
// };

template <typename T>
inline constexpr bool is_object =
    is_scalar<T> || is_array<T> || is_union<T> || is_class<T>;

template <typename T>
concept is_function = !is_object<T>;

template <typename T>
struct IsFunctionTrait : Constant<is_function<T>> {};

// Remove `const`/`volatile`-qualifiers, references, and pointers from a type.
template <typename T>
using Decay = Conditional<
    // Decay arrays to pointers.
    is_array<RemoveReference<T>>, RemoveExtent<RemoveReference<T>>*,
    Conditional<
        // Decay functions into function pointers.
        is_function<RemoveReference<T>>, AddPointer<RemoveReference<T>>,
        // Otherwise, remove cv-qualifiers.
        RemoveCv<RemoveReference<T>>>>;

template <typename, unsigned = 0>
struct ExtentTrait;

template <typename>
struct RemoveAllExtentsTrait;

template <typename T>
struct RemoveAllExtentsTrait {
    using Type = T;
};

template <typename T>
struct RemoveAllExtentsTrait<T[]> {
    using Type = typename RemoveAllExtentsTrait<T>::Type;
};

template <typename T, unsigned long long N>
struct RemoveAllExtentsTrait<T[N]> {
    using Type = typename RemoveAllExtentsTrait<T>::Type;
};

// TODO: Figure out how to implement this with concepts.
/*
template <typename T>
struct IsBoundedArrayTrait : FalseTypeTrait {};
template <typename T, signed long long N>
struct IsBoundedArrayTrait<T[N]> : TrueTypeTrait {};
template <typename T>
inline constexpr bool is_bounded_array = IsBoundedArrayTrait<T>::value;

template <typename T>
struct IsUnboundedArrayTrait : TrueTypeTrait {};
template <typename T, signed long long N>
struct IsUnboundedArrayTrait<T[N]> : FalseTypeTrait {};
template <typename T>
inline constexpr bool is_unbounded_array = IsUnBoundedArrayTrait<T>::value;
*/

// `__is_constructible` is a GNU builtin.
template <typename T, typename... Args>
concept is_constructible = __is_constructible(T, Args...);

// `__is_trivially_constructible` is a GNU builtin.
template <typename T, typename... Args>
concept is_trivially_constructible = __is_trivially_constructible(T, Args...);

template <typename T>
concept is_default_constructible = requires {
    T();
};

template <typename T>
concept is_trivially_default_constructible = is_default_constructible<T> &&
    __is_trivially_constructible(T);

template <typename T>
concept is_copy_constructible = __is_constructible(T, T const&);

template <typename T>
concept is_trivially_copy_constructible =
    __is_trivially_constructible(T, T const&);

template <typename T>
concept is_move_constructible = __is_constructible(T, T&&);

template <typename T>
concept is_trivially_move_constructible = __is_trivially_constructible(T, T&&);

// There is no `__has_destructor()` GCC builtin.
template <typename T>
concept is_destructible = requires {
    ~T();
};

// `__has_trivial_destructor()` is a GNU builtin.
template <typename T>
concept is_trivially_destructible = is_destructible<T> &&
    __has_trivial_destructor(T);

// `__is_assingable` is a GNU builtin.
template <typename T, typename U>
concept is_assignable = __is_assignable(T, U);

// `__is_trivially_assignable` is a GNU builtin.
template <typename T, typename U>
concept is_trivially_assignable = __is_trivially_assignable(T, U);

template <typename T>
concept is_copy_assignable = __is_assignable(T, T const&);

template <typename T>
concept is_trivially_copy_assignable = __is_trivially_assignable(T, T const&);

template <typename T>
concept is_move_assignable = __is_assignable(T, T&&);

template <typename T>
concept is_trivially_move_assignable = __is_trivially_assignable(T, T&&);

// `__is_trivially_copyable()` is a GNU builtin.
template <typename T>
concept is_trivially_copyable = __is_trivially_copyable(T);

template <typename T>
concept is_trivial =
    is_trivially_copyable<T> && is_trivially_default_constructible<T>;

// TODO: Add `reference_constructs_from_temporary<>` and
// `reference_converts_from_temporary<>`.

}  // namespace cat

// Forward declare these from `<cat/utility>`.
namespace std {

template <typename T>
constexpr auto move(T&& input) -> cat::RemoveReference<T>&&;

template <typename T>
constexpr auto forward(cat::RemoveReference<T>& input) -> T&&;
template <typename T>
    requires(!cat::is_lvalue_reference<T>)
constexpr auto forward(cat::RemoveReference<T>&& input) -> T&&;

}  // namespace std

namespace cat {

using std::forward;
using std::move;

// `rvalue` binds r-value references and excludes any other references. This is
// useful for perfect-forwarding parameter functions which could otherwise hide
// `const&` or `&&` overloads.
template <typename T>
concept rvalue = is_rvalue_reference<T&&> && !is_const<T>;

template <typename Function, typename... Args>
concept is_invocable = requires(Function func, Args&&... args) {
    func(forward<Args>(args)...);
};

// https://quuxplusone.github.io/blog/2019/02/06/arrow-proxy/
template <typename Reference>
struct ArrowProxy {
    Reference reference;
    auto operator->() -> Reference* {
        return &reference;
    }
};

template <is_invocable Function>
consteval auto constant_evaluate(auto value) -> decltype(auto);

consteval auto constant_evaluate(auto value) -> decltype(auto);

namespace detail {
    template <typename T>
    concept is_boolean_testable_detail = is_convertible<T, bool>;
}

// boolean_testable is adapted from the exposition-only concept
// boolean-testable.
template <typename T>
concept is_boolean_testable = detail::is_boolean_testable_detail<T> &&
    requires(T&& b) {
    { !forward<T>(b) } -> detail::is_boolean_testable_detail;
};

// `weakly_equality_comparable_with` is adapted from the exposition-only
// concept `__weakly_equality_comparable_with`.
namespace detail {
    template <typename T, typename U>
    concept is_weakly_equality_comparable_with =
        requires(RemoveReference<T> const& t, RemoveReference<U> const& u) {
        { t == u } -> is_boolean_testable_detail;
        { t != u } -> is_boolean_testable_detail;
        { u == t } -> is_boolean_testable_detail;
        { u != t } -> is_boolean_testable_detail;
    };
}  // namespace detail

template <typename T>
concept is_equality_comparable =
    detail::is_weakly_equality_comparable_with<T, T>;

namespace detail {
    template <typename T, typename U>
    concept is_partially_ordered_with = requires(RemoveReference<T> const& t,
                                                 RemoveReference<U> const& u) {
        { t < u } -> is_boolean_testable;
        { t > u } -> is_boolean_testable;
        { t <= u } -> is_boolean_testable;
        { t >= u } -> is_boolean_testable;
        { u < t } -> is_boolean_testable;
        { u > t } -> is_boolean_testable;
        { u <= t } -> is_boolean_testable;
        { u >= t } -> is_boolean_testable;
    };
}  // namespace detail

template <typename T, typename U>
concept is_narrow_convertible = requires() {
    U({declval<T>()});
};

// `is_trivially_relocatable` can be overrided by partial template
// specializations, such as:
//
// template <>
// constexpr bool is_trivially_relocatable<MyClass> = true;
//
// Trivially relocatable types can enable algorithms to make optimizations, such
// as relocating objects with `cat::copy_memory()` instead of `cat::move()`.
// By default, trivial types are trivially relocatable.
template <typename T>
inline constexpr bool is_trivially_relocatable = is_trivial<T>;

// Remove `const` qualifier from types for the purposes of querying
// relocatability.
template <typename T>
inline constexpr bool is_trivially_relocatable<T const> =
    is_trivially_relocatable<T>;

}  // namespace cat

// clang-format 12 sorts `CommonReference` before `CommonType` for some reason.
// clang-format off
#include "implementations/CommonType.tpp"
#include "implementations/CommonReference.tpp"
#include "implementations/constant_evaluate.tpp"
// clang-format on

namespace cat {

template <typename T, typename U>
concept has_common_reference_with =
    is_same<CommonReference<T, U>, CommonReference<U, T>> &&
    is_convertible<T, CommonReference<T, U>> &&
    is_convertible<U, CommonReference<T, U>>;

template <typename T, typename U>
concept has_common_with =
    is_same<CommonType<T, U>, CommonType<U, T>> && requires {
    static_cast<CommonType<T, U>>(declval<T>());
    static_cast<CommonType<T, U>>(declval<U>());
} && has_common_reference_with<AddLvalueReference<T const>,
                               AddLvalueReference<const U>> &&
    has_common_reference_with<AddLvalueReference<CommonType<T, U>>,
                              CommonReference<AddLvalueReference<const T>,
                                              AddLvalueReference<const U>>>;

}  // namespace cat

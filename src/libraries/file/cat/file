// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/linux>

// TODO: Get this basically working.

namespace cat {

enum class Fileopen_mode {
    read,
    write,
    append
};

enum class FileSeekMode {
    set,
    current,
    end
};

class raw_typeFile {
  public:
    constexpr raw_typeFile() = default;
    constexpr raw_typeFile(raw_typeFile const&) = default;
    constexpr raw_typeFile(raw_typeFile&&) = default;

    auto open(string const path, Fileopen_mode mode = Fileopen_mode::read)
        -> scaredy<void, nix::linux_error> {
        nix::open_mode open_mode = nix::open_mode::read_write;
        nix::open_flags open_flags = nix::open_flags::path;

        // Try to open a file from a path.
        scaredy open_result =
            nix::sys_open(path.data(), open_flags, open_mode);
        if (!open_result.has_value()) {
            return open_result.error();
        }

        this->file_descriptor = open_result.value();

        // TODO: Is this failable?
        // Get the status of that opened file.
        scaredy fstat_result = nix::sys_fstat(file_descriptor);
        nix::file_status status = fstat_result.value();
        this->file_size = status.file_size;
        this->block_size = status.block_size;
    }

    void close() {
    }

    constexpr auto is_closed() const -> bool {
        // When closed, `file_descriptor` is set to -1.
        return this->file_descriptor != -1;
    }

    constexpr auto is_readable() -> bool {
        // If `open_mode` has either read bitflags set:
        return (to_underlying(this->open_mode) &
                (to_underlying(nix::open_mode::read_only) |
                 to_underlying(nix::open_mode::read_write))) != 0;
    }

    constexpr auto is_writeable() -> bool {
        // If `open_mode` has either write bitflags set:
        return (to_underlying(this->open_mode) &
                (to_underlying(nix::open_mode::write_only) |
                 to_underlying(nix::open_mode::read_write))) != 0;
    }

  private:
    nix::file_descriptor file_descriptor = -1;
    nix::open_mode open_mode;
    int8 file_size;
    int8 block_size;
};

}  // namespace cat

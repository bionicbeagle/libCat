// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/math>

namespace cat {

template <typename T>
struct HigherType {
    using Type = T;

    consteval HigherType() = default;

    template <typename U>
    consteval auto operator==(HigherType<U> const) -> bool {
        return is_same<U, T>;
    }
};

template <typename... Ts>
class TypeList {
    template <typename>
    struct GetFirstElement;

    template <typename Head, typename... Tail>
    struct GetFirstElement<TypeList<Head, Tail...>> {
        using Result = Head;
    };

    // Overload for the end of the type list.
    template <typename, ssize>
    struct RecurseForTypeAtIndex;

    // Shortcut for accessing the 0th element.
    template <typename Head, typename... Tail>
    struct RecurseForTypeAtIndex<TypeList<Head, Tail...>, 0> {
        using Result = Head;
    };

    // Recurse from the tail down to the index in this list.
    template <typename Head, typename... Tail, ssize index>
    struct RecurseForTypeAtIndex<TypeList<Head, Tail...>, index> {
        using Result = typename RecurseForTypeAtIndex<TypeList<Tail...>,
                                                      index - 1>::Result;
    };

    // If the last element in this type list is `T`.
    template <typename T, typename U>
    static consteval auto recurse_for_type() -> bool {
        return is_same<T, U>;
    }

    // If the any element in this type list is `T`.
    template <typename T, typename U, typename... Us>
    static consteval auto recurse_for_type()
        -> bool requires(sizeof...(Us) > 0) {
        return is_same<T, U> ? true : recurse_for_type<T, Us...>();
    }

    // Propagate the final count of occurences of `T` in this type list.
    template <typename T, ssize count>
    static consteval auto recurse_for_count() -> ssize {
        return count;
    }

    // Sum the number of occurences of `T` in this type list.
    template <typename T, ssize count, typename U, typename... Us>
    static consteval auto recurse_for_count() -> ssize
        requires(sizeof...(Us) >= 0) {
        return is_same<T, U> ? recurse_for_count<T, count + 1, Us...>()
                             : recurse_for_count<T, count, Us...>();
    }

    template <typename U>
    static consteval auto recurse_for_unique() -> bool {
        return true;
    }

    template <typename U, typename... Us>
    static consteval auto recurse_for_unique()
        -> bool requires(sizeof...(Us) > 0) {
        return is_unique<U> ? recurse_for_unique<Us...>() : false;
    }

  public:
    // Produce an alias to the type stored at an index in this type list.
    template <ssize index>
    using Get = typename RecurseForTypeAtIndex<TypeList<Ts...>, index>::Result;

    // Append one parameter pack to this `TypeList`.
    template <typename... Us>
    using Merge = TypeList<Ts..., Us...>;

    template <typename... Us>
    static consteval auto concat(TypeList<Us...>) {
        return TypeList<Ts..., Us...>{};
    }

    // Concatenate one `TypeList` to this `TypeList`.
    template <typename OtherTypeList>
    using Concat = decltype(concat(OtherTypeList{}));

    // A `+` is required instead of `Concat` to use this inside of fold
    // expressions.
    template <typename... Us>
    friend constexpr auto operator+(TypeList<Ts...>, TypeList<Us...>) {
        return TypeList<Ts..., Us...>{};
    }

    // Evaluate `true` iff this type list holds a type `T`.
    template <typename T>
    static constexpr bool has_type = recurse_for_type<T, Ts...>();

    // The number of types in this list.
    static constexpr ssize size = ssize{sizeof...(Ts)};

    // The size of the largest type in this list.
    static constexpr ssize largest_size = max(ssizeof<Ts>()...);

    // The size of the smallest type in this list.
    static constexpr ssize smallest_size = min(ssizeof<Ts>()...);

    // The smallest alignment of a type in this list.
    static constexpr usize smallest_alignment = min(alignof(Ts)...);

    // The largest alignment of a type in this list.
    static constexpr usize largest_alignment = max(alignof(Ts)...);

    // Sum the number of times that a type is in this type list.
    template <typename T>
    static constexpr ssize count_type = recurse_for_count<T, 0, Ts...>();

    // Evaluate `true` iff the type `T` only appears exactly once in this
    // type list.
    template <typename T>
    static constexpr bool is_unique = (count_type<T> == 1);

    // Evaluate `true` if every type in this type list is unique.
    static constexpr bool is_unique_list = recurse_for_unique<Ts...>();
};

namespace detail {
    template <typename T, ssize count, ssize index, typename... Ts>
    consteval auto type_list_fill(TypeList<Ts...> type_list) {
        if constexpr (index == count) {
            return type_list;
        } else {
            return type_list_fill<T, count, index + 1>(
                typename decltype(type_list)::template Merge<T>());
        }
    }
}  // namespace detail

// Produce a TypeList filled with `count` of `T`.
template <typename T, ssize count>
using TypeListFilled = decltype(detail::type_list_fill<T, count, 0>({}));

}  // namespace cat

// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/collection>
#include <cat/iterator>

namespace cat {

template <typename T>
struct CollectionTraits;

// Copy-assign the elements of one collection into another.
template <typename InputIterator, typename OutputIterator>
auto copy(InputIterator source_begin, InputIterator source_end,
          OutputIterator destination_begin) -> OutputIterator {
    using DestinationElement = decltype(*destination_begin);

    while (source_begin != source_end) {
        // Copy assignment.
        *destination_begin = static_cast<DestinationElement>(*source_begin);
        ++source_begin;
        ++destination_begin;
    }
    return destination_begin;
}

// Move-assign the elements of one collection into another.
template <typename InputIterator, typename OutputIterator>
auto move(InputIterator source_begin, InputIterator source_end,
          OutputIterator destination_begin) -> OutputIterator {
    using DestinationElement = decltype(*destination_begin);

    while (source_begin != source_end) {
        // Move assignment.
        *destination_begin =
            move(static_cast<DestinationElement>(*source_begin));
        ++source_begin;
        ++destination_begin;
    }
    return destination_begin;
}

// Optimally relocate the elements of one collection into another.
template <typename InputIterator, typename OutputIterator>
auto relocate(InputIterator source_begin, InputIterator source_end,
              OutputIterator destination_begin) -> OutputIterator {
    using SourceCollection = typename decltype(source_begin)::Collection;
    using SourceElement = decltype(*source_begin);

    using DestinationCollection =
        typename decltype(destination_begin)::Collection;
    using DestinationElement = decltype(*destination_begin);

    // If the source and destination containers are contiguous, and they hold
    // the same element type, and that type is trivially relocatable, copy them
    // fast.
    if constexpr (CollectionTraits<SourceCollection>::is_array_like &&
                  CollectionTraits<DestinationCollection>::is_array_like &&
                  is_same<SourceElement, DestinationElement> &&
                  is_trivially_relocatable<SourceElement>) {
        copy_memory(addressof(*source_begin), addressof(*destination_begin),
                    (source_end - source_begin) * ssizeof(*source_begin));
        return destination_begin;
    } else {
        // Otherwise, if the destination can be moved to, do so.
        if constexpr (is_move_assignable<DestinationElement>) {
            return move(source_begin, source_end, destination_begin);
        } else {
            // Otherwise, copy to the destination.
            return copy(source_begin, source_end, destination_begin);
        }
    }
}

template <is_forward_iterator ItLhs, is_forward_iterator ItRhs>
constexpr auto lexicographical_compare(ItLhs lhs_start, ItLhs lhs_end,
                                       ItRhs rhs_start, ItRhs rhs_end) -> bool {
    while (lhs_start != lhs_end) {
        if (rhs_start == rhs_end || *rhs_start < *lhs_start) {
            return false;
        }
        if (*lhs_start < *rhs_start) {
            return true;
        }

        ++lhs_start;
        ++rhs_start;
    }

    return (rhs_start != rhs_end);
}

template <is_forward_iterator ItLhs, is_forward_iterator ItRhs>
constexpr auto lexicographical_compare_three_way(ItLhs lhs_start, ItLhs lhs_end,
                                                 ItRhs rhs_start,
                                                 ItRhs rhs_end)  // Formatting.
    requires(is_common_comparison_category<decltype((*lhs_start) <=>
                                                    (*rhs_start))>) {
    bool exhaust_left = (lhs_start == lhs_end);
    bool exhaust_right = (rhs_start == rhs_end);

    while (!exhaust_left && !exhaust_right) {
        auto comparison = (*lhs_start) <=> (*rhs_start);

        if (comparison != 0) {
            return comparison;
        }

        exhaust_left = (++lhs_start == lhs_end);
        exhaust_right = (++rhs_start == rhs_end);
    }

    using Category = decltype((*lhs_start) <=> (*rhs_start));
    return Category(!exhaust_left    ? std::strong_ordering::greater
                    : !exhaust_right ? std::strong_ordering::less
                                     : std::strong_ordering::equal);
}

}  // namespace cat

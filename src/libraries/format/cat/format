// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/detail/ftoa_dragonbox.hpp>
#include <cat/detail/itoa_jeaiii.hpp>

#include <cat/insert_iterators>
#include <cat/scaredy>
#include <cat/string>

namespace cat {

// TODO: Support formatting 1 and 2 byte integers.

// Erase the type of `cat::Numeral` for redundant template instantiations.
template <is_integral T, OverflowPolicies policy>
[[nodiscard]] auto to_chars(is_allocator auto& allocator,
                            Numeral<T, policy> numeral) -> Maybe<String> {
    return to_chars(allocator, to_raw_numeral(numeral));
}

// Dynamically allocate an is_integral value converted to `String`.
template <is_integral T>
[[nodiscard]] auto to_chars(is_allocator auto& allocator, T integer)
    -> Maybe<String> {
    Maybe result = allocator.template alloc_multi<char>(Limits<T>::digits10);
    if (!result.has_value()) {
        return nullopt;
    }
    char* p_string = result.value().data();

    if constexpr (is_same<T, int4::Raw>) {
        detail::i32toa_jeaiii(integer, p_string);
    } else if constexpr (is_same<T, uint4::Raw>) {
        detail::u32toa_jeaiii(integer, p_string);
    } else if constexpr (is_same<T, int8::Raw>) {
        detail::i64toa_jeaiii(integer, p_string);
    } else if constexpr (is_same<T, uint8::Raw>) {
        detail::u64toa_jeaiii(integer, p_string);
    } else {
        // TODO: Format 1 and 2 byte integers.
        __builtin_unreachable();
    }
    return String{p_string};
}

// Dynamically allocate a floating point value converted to `String`.
template <typename T>
    requires(is_floating_point<T>)
[[nodiscard]] auto to_chars(is_allocator auto& alloc, T value)
    -> Maybe<String> {
    Maybe result = alloc.template alloc_multi<char>(Limits<T>::digits10);
    if (!result.has_value()) {
        return nullopt;
    }
    char* p_string = result.value().data();
    detail::dragonbox::to_chars(value, p_string);
    return String{p_string};
}

namespace detail {
    template <ssize::Raw length, auto value>
    consteval auto make_const_string(StaticString<length> const& string) {
        // Copy over the string into new, larger, storage.
        StaticString<length + 1> new_string;
        for (ssize i = 0; i < length; ++i) {
            new_string[i + 1] = string[i];
        }

        // Add a null terminator to the end of the new string.
        new_string[length] = '\0';

        // Fill in the next digit.
        constexpr auto remainder = value % 10;
        new_string[0] =
            (remainder > 9) ? (remainder - 10) + 'a' : remainder + '0';
        constexpr auto new_value = value / 10;

        // Recurse through the rest of this integer.
        if constexpr (new_value == 0) {
            return new_string;
        } else {
            return make_const_string<length + 1, new_value>(new_string);
        }
    }
}  // namespace detail

// Convert a `constexpr` is_integral to `StaticString`.
template <auto value>
    requires(is_integral<decltype(value)>)
[[nodiscard]] consteval auto to_chars() {
    if constexpr (value == 0) {
        return StaticString{"0"};
    } else {
        constexpr StaticString string =
            detail::make_const_string<1, abs(value)>(StaticString{""});

        // Handle a negative sign.
        if constexpr (is_signed<decltype(value)> && value < 0) {
            StaticString<string.size().raw + 1> new_string;
            for (ssize i = 0; i < string.size(); ++i) {
                new_string[i + 1] = string[i];
            }
            new_string[0] = '-';
            return new_string;
        } else {
            return string;
        }
    }
}

template <is_integral T>
[[nodiscard]] constexpr auto to_string_at(Numeral<T> value,
                                          Span<char> output_buffer)
    -> Maybe<String> {
    // Add 1 for a negative sign `-` character.
    constexpr ssize max_length = to_chars<Numeral<T>::max()>().size() + 1;
    char buffer[max_length.raw];
    if (is_constant_evaluated()) {
        ssize i = 0;
        if (is_signed<T> && value < 0) {
            buffer[0] = '-';
            i = 1;
        }
        for (; i < max_length; ++i) {
            if (value > 0) {
                Numeral<T> const remainder = value % 10;
                buffer[i.raw] = remainder.raw + '0';
                value /= 10;
            } else {
                buffer[i.raw] = '\0';
            }
        }
    } else {
        detail::i32toa_jeaiii(value.raw, buffer);
    }

    // TODO: Get the length of this integer faster.
    ssize length = string_length(buffer);
    if (length > output_buffer.size()) {
        return nullopt;
    }

    if (is_constant_evaluated()) {
        for (ssize i = 0; i < length; ++i) {
            output_buffer[i] = buffer[i.raw];
        }
    } else {
        copy_memory(buffer, output_buffer.data(), length);
    }

    return String{output_buffer.data(), length};
}

// Formatting
enum class FormatErrors {
    out_of_memory,
    cannot_format_argument,
    argument_type_mismatch,
    inconsistent_argument_indexing,
    unknown_format_specifier,
    unmatched_open_brace
    // TODO: This list is incomplete.
};

// TODO: Union this with allocator `Scaredy`.
template <typename T = void>
using ScaredyFormat = Scaredy<T, FormatErrors>;

namespace detail {
    // This represents precisely 16 alternatives to fill 4 bits in
    // `FormatArgumentCompactIndex`.
    enum class FormatDiscriminant : unsigned char {
        automatic_type = 0,  // This type is deduced from a variadic argument.
        // These types are sorted for fast alternative checking.
        int1_type,
        uint1_type,
        int2_type,
        uint2_type,
        int4_type,
        uint4_type,
        int8_type,
        uint8_type,
        bool_type,
        integer_sentinel = bool_type,  // Types less than this are integers.
        float_type,
        double_type,
        float_sentinel = double_type,  // Types less than this are floats.
        raw_string_type,
        cat_string_type,
        pointer_type,
        other_type,
    };

    // Specializations of `TypeConstant` map a type to a
    // `FormatDiscriminant`.
    struct FormatTypeConstant {
        FormatDiscriminant discriminant;

        // Get the discriminant value that represents `T`.
        template <typename T>
        static consteval auto alternative() -> FormatDiscriminant {
            FormatTypeConstant type;
            type.template set_alternative<T>();
            return type.discriminant;
        }

        // Set this variant to represent `T`.
        template <typename T>
        constexpr void set_alternative() {
            using U = RemoveCvRef<T>;
            if constexpr (is_same<U, int1>) {
                this->discriminant = FormatDiscriminant::int1_type;
            } else if constexpr (is_same<U, int1::Raw>) {
                this->discriminant = FormatDiscriminant::int1_type;
            } else if constexpr (is_same<U, int2>) {
                this->discriminant = FormatDiscriminant::int2_type;
            } else if constexpr (is_same<U, int2::Raw>) {
                this->discriminant = FormatDiscriminant::int2_type;
            } else if constexpr (is_same<U, int4>) {
                this->discriminant = FormatDiscriminant::int4_type;
            } else if constexpr (is_same<U, int4::Raw>) {
                this->discriminant = FormatDiscriminant::int4_type;
            } else if constexpr (is_same<U, int8>) {
                this->discriminant = FormatDiscriminant::int8_type;
            } else if constexpr (is_same<U, int8::Raw>) {
                this->discriminant = FormatDiscriminant::int8_type;
            } else if constexpr (is_same<U, uint1>) {
                this->discriminant = FormatDiscriminant::uint1_type;
            } else if constexpr (is_same<U, uint1::Raw>) {
                this->discriminant = FormatDiscriminant::uint1_type;
            } else if constexpr (is_same<U, uint2>) {
                this->discriminant = FormatDiscriminant::uint2_type;
            } else if constexpr (is_same<U, uint2::Raw>) {
                this->discriminant = FormatDiscriminant::uint2_type;
            } else if constexpr (is_same<U, uint4>) {
                this->discriminant = FormatDiscriminant::uint4_type;
            } else if constexpr (is_same<U, uint4::Raw>) {
                this->discriminant = FormatDiscriminant::uint4_type;
            } else if constexpr (is_same<U, uint8>) {
                this->discriminant = FormatDiscriminant::uint8_type;
            } else if constexpr (is_same<U, uint8::Raw>) {
                this->discriminant = FormatDiscriminant::uint8_type;
            } else if constexpr (is_same<U, bool>) {
                this->discriminant = FormatDiscriminant::bool_type;
            } else if constexpr (is_same<U, float4>) {
                this->discriminant = FormatDiscriminant::float_type;
            } else if constexpr (is_same<U, float4::Raw>) {
                this->discriminant = FormatDiscriminant::float_type;
            } else if constexpr (is_same<U, float8>) {
                this->discriminant = FormatDiscriminant::double_type;
            } else if constexpr (is_same<U, float8::Raw>) {
                this->discriminant = FormatDiscriminant::double_type;
            } else if constexpr (is_same<U, char const*>) {
                this->discriminant = FormatDiscriminant::raw_string_type;
            } else if constexpr (is_same<U, String>) {
                this->discriminant = FormatDiscriminant::cat_string_type;
            } else if constexpr (is_pointer<U>) {
                this->discriminant = FormatDiscriminant::pointer_type;
            } else {
                this->discriminant = FormatDiscriminant::other_type;
            }
        }
    };

    // A buffer that can grow through `.push_back()` and reallocate when its
    // storage is exceeded. This container is used in `vformat()` calls as the
    // default container for `vformat_to()`.
    struct FormatStringVector : CollectionFacade<FormatStringVector, char> {
        FormatStringVector(char* p_in_storage, ssize in_length,
                           ssize in_max_length)
            : p_storage(p_in_storage),
              length(in_length),
              max_length(in_max_length){};

        auto data() const -> char* {
            return this->p_storage;
        }

        auto size() const -> ssize {
            return this->length;
        }

        auto capacity() const -> ssize {
            return this->max_length;
        }

        auto push_back(is_stable_allocator auto& allocator, char character)
            -> Maybe<void> {
            if (this->length + 1 > this->max_length) {
                // Reallocate double the memory if its capacity is exceeded.
                Maybe result = allocator.template realloc_multi<char>(
                    this->p_storage, this->max_length, this->max_length * 2);
                if (!result.has_value()) {
                    return nullopt;
                }
                this->p_storage = result.value().data();
            }

            this->p_storage[this->length.raw] = character;
            ++(this->length);
            return monostate;
        }

        char* p_storage;
        ssize length;
        ssize max_length;
    };

    // An index into the packed `FormatArgumentstorage`.
    struct FormatArgumentCompactIndex {
        ssize::Raw byte_index                   : 60;
        detail::FormatDiscriminant discriminant : 4;
    };

    // This only exists to be passed into the constructor of `FormatArguments`.
    template <typename... Ts>
    class FormatArgumentsCompactStorage {
      private:
        // For every type passed into the constructor, pack it into the arrays
        // in-order.
        template <typename T>
        void store_argument(ssize& argument_index, T&& value) {
            // Pack `value` into `packed_arguments_storage`.
            ssize const storage_index =
                this->arguments_indices[argument_index.raw].byte_index;

            copy_memory_small(
                addressof(value),
                &(this->packed_arguments_storage[0]) + storage_index,
                ssizeof<T>());

            // Assign `T` to that storage.
            this->arguments_indices[argument_index.raw].discriminant =
                detail::FormatTypeConstant::alternative<T>();

            // Set the byte offset for the next argument if there is another.
            if (argument_index + 1 <
                ssizeof_pack<Ts...>()) {  // TODO: Explore whether `[[likely]]`
                                          // improves performance here.
                this->arguments_indices[argument_index.raw + 1].byte_index =
                    storage_index.raw + sizeof(T);
            }

            ++argument_index;
        }

      public:
        FormatArgumentsCompactStorage(Ts&&... types) {
            this->packed_arguments_storage[0] = {};
            this->arguments_indices[0] = {};
            this->arguments_indices[0].byte_index = 0;
            ssize argument_index = 0;
            // TODO: Erase the type of `Ts`.
            // `store_argument()` increments `argument_index`.
            (this->store_argument(argument_index, forward<Ts>(types)), ...);
        }

        static constexpr ssize::Raw argument_count = sizeof...(Ts);
        FormatArgumentCompactIndex arguments_indices[argument_count];

        // TODO: This array length might need to be larger if the argument's
        // type is `FormatDiscriminant::other_type`.
        Byte packed_arguments_storage[argument_count * 8];  // Needs work.
    };

    // Formatting arguments are packed into a small type-erased array to
    // conserve storage.
    struct FormatArguments {
        template <typename... Ts>
        explicit constexpr FormatArguments(
            FormatArgumentsCompactStorage<Ts...> const& storage)
            : p_arguments_indices(&(storage.arguments_indices[0])),
              argument_count(storage.argument_count){};

        // Unpack a formatting argument from the type-erased storage.
        template <typename T>
        // This function loads unaligned data.
        [[gnu::no_sanitize("alignment")]] auto get(ssize argument_index) const
            -> T {
            // Get the storage index out from the indices array.
            ssize const storage_index =
                (this->p_arguments_indices + argument_index)->byte_index;

            // TODO: Make this type punning with `bit_cast`, because
            // this `reinterpret_cast` is undefined behavior. Offset the
            // pointer to the array of indices by the length of that
            // array. That produces a pointer to the next struct member,
            // which happens to be the raw storage array.
            Byte const* const p_storage = reinterpret_cast<Byte const* const>(
                this->p_arguments_indices + argument_count);

            Byte const* p_data = p_storage + storage_index;
            return *bit_cast<T const*>(p_data);
        }

        FormatArgumentCompactIndex const* p_arguments_indices;
        ssize const argument_count;
    };

    // To prevent redundant template specializations for a contiguous
    // container's `BackInsertIterator`, it is wrapped by virtual function
    // dispatch in this container.
    template <is_stable_allocator Allocator>
    struct FormatBufferBase
        : public CollectionFacade<FormatBufferBase<Allocator>, char> {
        FormatBufferBase(char* p_in_string, ssize in_length,
                         ssize in_max_length)
            : p_string(p_in_string),
              length(in_length),
              max_length(in_max_length){};

        auto data() const -> char* {
            return this->p_string;
        }

        auto size() const -> ssize {
            return this->length;
        }

        auto capacity() const -> ssize {
            return this->max_length;
        }

        virtual auto grow(ssize new_size) -> Maybe<void> = 0;

        void clear() {
            this->length = 0;
        }

        auto push_back(Allocator&, char character) -> Maybe<void> {
            // If the new length would exceed the current capacity, call
            // `.grow()` to extend the capacity, first.
            if (this->length + 1 > this->max_length) {
                Maybe<void> result = this->grow(this->length + 1);
                if (!result.has_value()) {
                    return nullopt;
                }
            }

            this->p_string[this->length.raw] = character;
            ++(this->length);
            return monostate;
        }

        char* p_string;
        ssize length;
        ssize max_length;
    };

    template <typename...>
    struct FormatBufferIterator {};

    // Temporarily store formatted string data on the stack before pushing it to
    // an output-iterator it `.flush()`.
    template <is_stable_allocator Allocator, typename Outputter>
    struct FormatBufferIterator<Allocator, Outputter>
        : FormatBufferBase<Allocator> {
        using Container = typename Outputter::Container;
        Allocator& allocator;
        Outputter output_iterator;

        // To optimize common usage, `256` bytes of storage is reserved on
        // stack.
        char storage[256];

        FormatBufferIterator(Allocator& in_allocator, Outputter iterator)
            : FormatBufferBase<Allocator>(storage, 0, 256),
              allocator(in_allocator),
              output_iterator(iterator){};

        // Flush `storage` when formatting is completed.
        ~FormatBufferIterator() {
            // `size()` is derived from `FormatBufferBase`.
            if (this->size() > 0) {
                this->flush();
            }
        }

        // Overload the pure virtual `FormatBufferBase::grow()` function.
        // Instead of expanding its own memory, this buffer is flushed itself to
        // make more room.
        auto grow(ssize) -> Maybe<void> {
            // `size()` is derived from `FormatBufferBase`.
            if (this->size() == 256) {
                this->flush();
            }
            return monostate;
        }

        auto flush() -> Maybe<void> {
            // `size()` is derived from `FormatBufferBase`.
            ssize size = this->size();
            // char const* p_end = storage + size;

            // TODO: Use a multiple `.insert()` overload.
            for (ssize::Raw i = 0; i < size; ++i) {
                Maybe result = output_iterator.insert(allocator, storage[i]);
                if (!result.has_value()) {
                    return nullopt;
                }
            }

            this->length = 0;
            return monostate;
        }
    };

    // If only a pointer is provided, then assume the buffer can never overflow
    // and skip bounds-checking and buffer growing.
    template <is_stable_allocator Allocator, typename T>
    struct FormatBufferIterator<Allocator, T*> : FormatBufferBase<Allocator> {
        // `.grow()` for a `T[]` is no-op.
        auto grow() -> Maybe<void> {
            return monostate;
        }
    };

    // One back-insert iterator type should be used, to ensure type-erasure.
    template <is_stable_allocator Allocator>
    using FormatContiguousOutputIterator =
        BackInsertIterator<FormatBufferBase<Allocator>>;

    // Holds the format string parsing state consisting of the string's range
    // and a counter for which arguments have previously been parsed.
    class FormatParseContext {
        String format;

        // Iff `argument_index` is less than `0`, the format string has
        // manually indexed an argument. Otherwise, all arguments are
        // automatically indexed.
        ssize argument_index = 0;

      public:
        ssize const arguments_count;

        using Iterator = decltype(format.begin());
        using ConstIterator = decltype(format.cbegin());

        constexpr FormatParseContext(String const in_format,
                                     ssize in_arguments_count = 0)
            : format(in_format), arguments_count(in_arguments_count){};

        constexpr auto begin() const -> Iterator {
            return this->format.cbegin();
        }

        constexpr auto end() const -> Iterator {
            return this->format.cend();
        }

        constexpr void advance_to(Iterator position) {
            // this->format.begin().advance(position - this->format.begin());
            this->format.begin().advance(
                position.distance_to(this->format.begin()));
        }

        constexpr auto next_argument_index() -> ssize {
            return ++(this->argument_index);
        }

        // Check if a manually indexed argument is within reasonable bounds, and
        // check that this context is not using automatic indexing.
        constexpr auto check_argument_index(ssize index) -> Maybe<void> {
            if (is_constant_evaluated()) {
                if (index >= this->arguments_count) {
                    // This index is of range.
                    return nullopt;
                }
            }

            if (this->argument_index > 0) {
                // This argument is manually indexed in a context where
                // automatic indexing has been used.
                return nullopt;
            }

            // Enable manual indexing in this context.
            this->argument_index = -1;
        }
    };

    // TODO: Store callback functions for different kind of arguments.
    template <is_stable_allocator Allocator>
    struct FormatHandler {
        Allocator& allocator;
        // This holds a reference to a `FormatBufferIterator`.
        detail::FormatContiguousOutputIterator<Allocator> output_iterator;
        String const format;
        // char* const p_tempory_buffer;
        // TODO: A more complex contex object will be needed to support locale
        // and wide chars:
        FormatArguments const arguments;

        FormatHandler(
            Allocator& in_allocator,
            detail::FormatContiguousOutputIterator<Allocator> iterator,
            String const in_format, FormatArguments in_arguments)
            : allocator(in_allocator),
              output_iterator(iterator),
              format(in_format),
              // p_tempory_buffer(iterator.iterable.data()),
              arguments(std::move(in_arguments)){};
    };

    template <is_stable_allocator Allocator>
    constexpr auto parse_format_string(String const format,
                                       FormatHandler<Allocator>&& handler)
        -> ScaredyFormat<void> {
        // char const* p_first = format.data();
        // char const* p_last = format.data() + format.size();
        String remainder = format;
        ssize current_argument = 0;

        // Parse the entire string:
        while (true) {
            ssize const to_open_brace = remainder.find('{').value();
            ssize const to_close_brace = remainder.find('}').value();

            // This is true iff both are `-1`, or in other words, neither braces
            // were found. This is the escape condition.
            if (to_open_brace == to_close_brace) {
                for (char const& character : remainder) {
                    // TODO: Optimize this with a multiple-insert overload.
                    Maybe result = handler.output_iterator.insert(
                        handler.allocator, character);
                    if (!result.has_value()) {
                        return FormatErrors::out_of_memory;
                    }
                }
                break;
            }

            // If there is an argument, then copy over all text leading up to
            // the next argument.
            for (ssize i = 0; i < to_open_brace; ++i) {
                // TODO: Optimize this with a multiple-insert overload.
                Maybe result = handler.output_iterator.insert(handler.allocator,
                                                              remainder[i]);
                if (!result.has_value()) {
                    return FormatErrors::out_of_memory;
                }
            }

            // Parse an argument:
            FormatArguments const& arguments = handler.arguments;

            auto parse = [&]<typename ArgType>(ArgType) -> ScaredyFormat<void> {
                Maybe const result =
                    to_chars(handler.allocator,
                             arguments.template get<ArgType>(current_argument));
                if (!result.has_value()) {
                    return FormatErrors::out_of_memory;
                }
                String const int_string = result.value();

                // TODO: Optimize this with a multiple-insert
                // overload.
                for (ssize i = 0; i < int_string.size() - 1; ++i) {
                    _ = handler.output_iterator.insert(handler.allocator,
                                                       int_string[i]);
                }
                return monostate;
            };

            ScaredyFormat<void> parse_result;

            // TODO: Parse all argument types:
            switch (handler.arguments.p_arguments_indices[current_argument.raw]
                        .discriminant) {
                case FormatDiscriminant::int4_type:
                    parse_result = parse(int4{});
                    break;
                case FormatDiscriminant::int8_type:
                    parse_result = parse(int8{});
                    break;
                case FormatDiscriminant::uint4_type:
                    parse_result = parse(uint4{});
                    break;
                case FormatDiscriminant::uint8_type:
                    parse_result = parse(uint8{});
                    break;
                case FormatDiscriminant::float_type:
                    parse_result = parse(float{});
                    break;
                case FormatDiscriminant::double_type:
                    parse_result = parse(double{});
                    break;
                default:
                    __builtin_unreachable();
            };

            if (!parse_result.has_value()) {
                return FormatErrors::out_of_memory;
            }

            ++current_argument;

            // Slice the string past the text that's just been parsed.
            remainder = remainder.remove_prefix(to_close_brace + 1);
        }

        // No errors occurred.
        return monostate;
    }

    // Format a collection of `char` and push it into some container.
    template <is_stable_allocator Allocator, typename Outputter>
    auto vformat_to(Allocator& allocator, Outputter output_iterator,
                    String const format, FormatArguments arguments)
        -> ScaredyFormat<Outputter> {
        if constexpr (is_same<Outputter,
                              FormatContiguousOutputIterator<Allocator>>) {
            // If the type-erased contiguous format buffer is used, then
            // this routine can be slightly streamlined.
            FormatHandler<Allocator> handler = {allocator, output_iterator,
                                                format, arguments};
            return parse_format_string(format, move(handler));
        } else {
            // Otherwise, create a type-erased contiguous format buffer to
            // optimize pushing to this output iterator.
            FormatBufferIterator<Allocator, Outputter> buffer = {
                allocator, output_iterator};
            FormatHandler<Allocator> handler = {
                allocator, FormatContiguousOutputIterator<Allocator>{buffer},
                format, arguments};
            ScaredyFormat<void> result =
                parse_format_string(format, move(handler));
            if (!result.has_value()) {
                return result.error<FormatErrors>();
            }
            return buffer.output_iterator;
        }
    }

    template <is_stable_allocator Allocator>
    auto vformat(Allocator& allocator, String const format,
                 FormatArguments arguments) -> ScaredyFormat<String> {
        // TODO: Estimate the size of the final formatted string, and
        // allocate that much up-front for `output`.
        ssize const initial_size = format.size() + 10;

        Maybe maybe_memory = allocator.template alloc_multi<char>(initial_size);
        if (!maybe_memory.has_value()) {
            return FormatErrors::out_of_memory;
        }

        char* p_memory = maybe_memory.value().data();
        String output{p_memory, initial_size};

        // `FormatStringVector` is a container that satisfies the `Iterable`
        // `concept` and has a `.push_back()` method for a
        // `BackInsertIterator`. It is used to store the formatted string
        // and reallocates when that string grows beyond `initial_size`.
        FormatStringVector into_buffer = {p_memory, 0, initial_size};

        // TODO: Specify which kind of `ScaredyFormat` this is.
        auto result = vformat_to(
            allocator, BackInsertIterator<FormatStringVector>{into_buffer},
            format, arguments);
        if (!result.has_value()) {
            return result.template error<FormatErrors>();
        }

        ssize const length = string_length(into_buffer.data());
        return String{into_buffer.p_storage, length};
    }
}  // namespace detail

// Store `arguments` in a compacted variant object. Then format a collection
// of `char` with those arguments, and push the result into some container.
template <is_stable_allocator Allocator, is_output_iterator<String> Outputter,
          typename... Args>
[[nodiscard]] auto format_to(Allocator& allocator, Outputter output_iterator,
                             String const format, Args&&... arguments)
    -> ScaredyFormat<Outputter> {
    return detail::vformat_to(
        allocator, output_iterator, format,
        detail::FormatArguments{
            detail::FormatArgumentsCompactStorage{move(arguments)...}});
}

template <is_stable_allocator Allocator, typename... Args>
[[nodiscard]] auto format(Allocator& allocator, String const format,
                          Args&&... arguments) -> ScaredyFormat<String> {
    return detail::vformat(
        allocator, format,
        detail::FormatArguments{
            detail::FormatArgumentsCompactStorage{move(arguments)...}});
}

}  // namespace cat

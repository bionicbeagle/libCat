// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/meta>

namespace cat {

// TODO: See if moving `bit_cast()` into `std::` improves debuggability without
// breaking anything.

template <typename T, typename U>
[[gnu::warning("This function is intended to be inlined and constant-folded \
out."),
  gnu::always_inline]] constexpr inline auto
bit_cast(U& from_value) -> T;

template <typename T>
constexpr auto unconst(T const& value) -> T& {
    return const_cast<T&>(value);
}

template <typename T>
constexpr auto unconst(T const* p_value) -> T* {
    return const_cast<T*>(p_value);
}

constexpr auto is_constant_evaluated() -> bool;

constexpr auto ssizeof(auto const& anything) -> ssize;

template <typename T>
constexpr auto ssizeof() -> ssize;

// Infer the length of a parameter pack from a function argument.
template <typename... Ts>
constexpr auto ssizeof_pack(Ts...) -> ssize {
    return ssize{sizeof...(Ts)};
}

// Specify the length of a parameter pack in a template argument.
template <typename... Ts>
constexpr auto ssizeof_pack() -> ssize {
    return ssize{sizeof...(Ts)};
}

constexpr auto salignof(auto const& anything) -> ssize {
    // `alignof` cannot be given an expression `anything` in ISO C++, so it must
    // take the type `decltype(anything)`.
    return ssize{alignof(decltype(anything))};
}

template <typename T>
constexpr auto salignof() -> ssize {
    return ssize{alignof(T)};
}

namespace detail {
    template <typename T, ssize index, ssize current, T value, T... values>
    constexpr auto get_value_list_at() -> T {
        if constexpr (current == index) {
            return value;
        } else {
            return get_value_list_at<T, index, current + 1, values...>();
        }
    }
}  // namespace detail

template <typename T, T... values>
    requires(is_integral<T>)
struct ValueList {
    using Value = T;

    static constexpr ssize size = ssizeof_pack(values...);

    template <ssize index>
    static constexpr auto get() -> T {
        return detail::get_value_list_at<T, index, 0, values...>();
    }
};

namespace detail {
    template <ssize count, typename T, T value, T... integers>
    constexpr auto make_value_list() {
        if constexpr (count > 0) {
            // Recurse, appending `value` to `integers`.
            return make_value_list<count - 1, T, value, value, integers...>();
        } else {
            return ValueList<T, integers...>();
        }
    }

    // TODO: Look into `__integer_pack()`.
    template <ssize count, typename T, T value, T... integers>
    constexpr auto make_integer_sequence() {
        if constexpr (count > 0) {
            // Recurse, appending `count - 1` to `integers`.
            return make_integer_sequence<count - 1, T, T{count.raw - 1},
                                         T{count.raw - 1}, integers...>();
        } else {
            return ValueList<T, integers...>();
        }
    }
}  // namespace detail

template <typename T, T value, ssize count>
constexpr auto value_list = detail::make_value_list<count, T, value>();

template <typename T, T value, ssize count>
using MakeValueList = decltype(value_list<T, value, count>);

template <is_integral T, ssize count>
constexpr auto integer_sequence =
    detail::make_integer_sequence<count, T, T{count.raw}>();

template <is_integral T, ssize count>
constexpr auto zeros_list = value_list<T, T{0}, count>;

template <is_integral T, ssize count>
constexpr auto ones_list = value_list<T, T{1}, count>;

template <is_integral T, ssize count>
using MakeIntegerSequence = RemoveCv<decltype(integer_sequence<ssize, count>)>;

template <ssize... indices>
using IndexList = ValueList<ssize, indices...>;

template <ssize value, ssize count>
constexpr auto index_list = value_list<ssize, value, count>;

template <ssize value, ssize count>
using MakeIndexList = MakeValueList<ssize, value, count>;

template <ssize count>
constexpr auto index_sequence = integer_sequence<ssize, count>;

template <ssize count>
using MakeIndexSequence = MakeIntegerSequence<ssize, count>;

template <typename... Ts>
// `ssizeof_pack()` here produces an internal compiler error in GCC 12.
using IndexSequenceFor = MakeIndexSequence<ssize{sizeof...(Ts)}>;

template <typename T>
    requires(is_enum<T>)
constexpr auto to_underlying(T any_enum) {
    return static_cast<UnderlyingType<T>>(any_enum);
}

namespace detail {
    template <typename Closure>
    struct DeferWrapper {
        Closure callback;
        DeferWrapper(Closure&& closure) : callback(closure) {
        }
        ~DeferWrapper() {
            this->callback();
        }
    };
}  // namespace detail

// This must be split into two macros, because the `##` is otherwise evaluated
// at the wrong time.
#define LIBCAT_CONCAT2(x, y) x##y
#define LIBCAT_CONCAT(x, y) LIBCAT_CONCAT2(x, y)

// `DEFER()` is a macro that instantiates a scoped object which executes some
// arbitrary closure in its destructor.
// For example:
//     void* p_mem1 = allocator.alloc();
//     void* p_mem2 = allocator.alloc();
//     DEFER(allocator.free(p_mem1);
//           allocator.free(p_mem2);)

// `__COUNTER__` is defined by GCC, and it expands to a monotonically increasing
// digit every time it is expanded. This guarantees that every instance of
// `DeferWrapper` has a unique name.

#define DEFER(deferred_code)                    \
    auto LIBCAT_CONCAT(_defer__, __COUNTER__) = \
        cat::detail::DeferWrapper([&]() {       \
            deferred_code                       \
        });

// TODO: Support `cat::ref`, to enable `Variant` and `Tuple` to hold references
// more easily.

}  // namespace cat

using cat::ssizeof;

// These symbols must be declared in `std::` to enable some useful GCC
// features, such as move-semantics warnings, and preventing GDB from stepping
// into the functions.
namespace std {

template <typename T>
[[nodiscard]] constexpr auto as_const(T& value) -> cat::AddConst<T>& {
    return value;
}

template <typename T>
void as_const(const T&&) = delete;

// NOLINTBEGIN(readability-redundant-declaration)
// The following functions are forward-declared in `<cat/meta>`, but they
// belong to the `<cat/utility>` library.

/*
template <typename T>
constexpr auto move(T&& input) -> cat::RemoveReference<T>&&;

template <typename T>
constexpr auto forward(cat::RemoveReference<T>& input) -> T&&;

template <typename T>
requires(!cat::is_lvalue_reference<T>)
constexpr auto std::forward(cat::RemoveReference<T>&& input) -> T&&;
*/

// NOLINTEND(readability-redundant-declaration)

}  // namespace std

// `forward()` and `move()` should be usable from within a libCat namespace.
// This apparently does not prevent the aformentioned GCC features from working.
namespace cat {
using std::as_const;
using std::forward;
using std::move;
}  // namespace cat

#include "./implementations/bit_cast.tpp"
#include "./implementations/forward.tpp"
#include "./implementations/is_constant_evaluated.tpp"
#include "./implementations/move.tpp"
#include "./implementations/ssizeof.tpp"

// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/array>
#include <cat/bit>
#include <cat/math>
#include <cat/meta>

namespace cat {

template <ssize bits_count>
    requires(bits_count > 0)
class Bitset {
  private:

  public:
    // Store the smallest number of bytes needed for `bits_count`. If that is 8
    // bytes or fewer, use that many bytes. If it is larger, use an array of
    // 8-byte integers.
    static constexpr ssize bytes = (bits_count + 8 - 1) / 8;

    using Value = Conditional<
        bytes <= 8,
        // `UintFixed` will not compile here if it is larger than 8 or it is not
        // a power of 2. This is an `Array` of one element to make it iterable.
        Array<UintFixed<min(
                  // TODO: Signed int `round_to_pow2()`.
                  make_signed(round_to_pow2(make_unsigned(bytes.raw))), 8)>,
              1>,
        Array<uint8, (bytes.raw + 8 - 1) / 8>>;

    static constexpr ssize storage_array_size = Value::size();

    static constexpr ssize storage_element_size =
        ssizeof<typename Value::Value>();

    constexpr Bitset() = default;

    template <typename... Ts>
        requires(is_same<Ts, typename Value::Value>&&...)
    static constexpr auto from(Ts... values) -> Bitset
        requires(ssizeof_pack<Ts...>() == Value::size()) {
        // `Value::Value` is some unsigned integer.
        Bitset<bits_count> bitset;
        bitset.storage = {values...};
        return bitset;
    }

    constexpr auto operator==(Bitset<bits_count> const&) const
        -> bool = default;

    friend constexpr auto operator&(Bitset<bits_count> lhs,
                                    Bitset<bits_count> rhs) -> Bitset {
        Bitset<bits_count> bitset;
        for (ssize::Raw i = 0; i < lhs.storage_array_size; ++i) {
            bitset.storage[i] = lhs.storage[i] & rhs.storage[i];
        }
        return bitset;
    }

  private:
    Value storage;
};

}  // namespace cat

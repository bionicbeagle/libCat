// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/allocator>

namespace cat {

class null_allocator : public allocator_interface<null_allocator> {
  private:
    template <typename T>
    struct null_memory_handle : detail::base_memory_handle<T> {
        // TODO: Simplify with CRTP or deducing-this.
        auto get() -> decltype(auto) {
            return *this;
        }

        auto get() const -> decltype(auto) {
            return *this;
        }
    };

  public:
    // This allocation always fails.
    auto allocate(ssize) -> maybePtr<void> {
        return nullptr;
    }

    // Deallocation is no-op.
    void deallocate(void const*, ssize) {
    }

    // Produce a handle to allocated memory.
    template <typename T>
    auto make_handle(T* p_handle_storage) -> null_memory_handle<T> {
        return null_memory_handle<T>{{}, p_handle_storage};
    }

    // Access a page(s) of virtual memory.
    template <typename T>
    auto access(null_memory_handle<T>& memory) -> T* {
        return memory.p_storage;
    }

    template <typename T>
    auto access(NullMemoryHandle<T> const&) const -> T const* {
        return nullptr;
    }

  private:
    friend allocator_interface<null_allocator>;
    static constexpr bool has_pointer_stability = true;
};

}  // namespace cat

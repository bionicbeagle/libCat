// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/allocator>
#include <cat/linux>

namespace cat {

class PageAllocator : public AllocatorFacade<PageAllocator> {
  private:
    template <typename T>
    struct PageMemoryHandle : detail::BaseMemoryHandle<T> {
        T* p_storage;

        // TODO: Simplify with CRTP or deducing-this.
        auto get() -> decltype(auto) {
            return *this;
        }

        auto get() const -> decltype(auto) {
            return *this;
        }
    };

    auto allocation_bytes(usize alignment, ssize allocation_bytes)
        -> MaybeNonZero<ssize> {
        // Pages cannot be aligned by greater than 4 kibibytes.
        cat::assert(alignment <= 4_uki);
        // Round `allocation_bytes` up to the nearest 4 kibibytes.
        return ((allocation_bytes / 4_ki) + 1) * 4_ki;
    }

    // Allocate memory in multiples of a page-size. A page is `4_ki` large
    // on x86-64. If fewer than 4096 bytes are allocated, that amount will
    // be rounded up to 4096.
    auto allocate(ssize allocation_bytes) -> MaybePtr<void> {
        Scaredy result = nix::sys_mmap(
            0u, allocation_bytes,
            // TODO: Fix bit flags operators.
            static_cast<nix::MemoryProtectionFlags>(
                static_cast<unsigned int>(nix::MemoryProtectionFlags::read) |
                static_cast<unsigned int>(nix::MemoryProtectionFlags::write)),
            static_cast<nix::MemoryFlags>(
                static_cast<unsigned int>(nix::MemoryFlags::privately) |
                static_cast<unsigned int>(nix::MemoryFlags::populate) |
                static_cast<unsigned int>(nix::MemoryFlags::anonymous)),
            // Anonymous pages (non-files) must have `-1`.
            nix::FileDescriptor{-1},
            // Anonymous pages (non-files) must have `0`.
            0);
        if (result.has_value()) {
            return result.value();
        }
        return nullptr;
    }

    // Allocate a page(s) of virtual memory that is guaranteed to align to
    // any power of 2, but less than `4_uki`.
    auto aligned_allocate(usize alignment, ssize allocation_bytes)
        -> MaybePtr<void> {
        // Pages cannot be aligned by greater than 4 kibibytes.
        cat::assert(alignment <= 4_uki);
        // A normal page allocation already has strong alignment guarantees.
        return this->allocate(allocation_bytes);
    }

    // Unmap a pointer handle to page(s) of virtual memory.
    void deallocate(void const* p_storage, ssize allocation_bytes) {
        // There are some cases where `munmap` might fail even with private
        // anonymous pages. These currently cannot be handled, because `.free()`
        // does not propagate errors.
        _ = nix::sys_munmap(p_storage, allocation_bytes);
    }

    // Produce a handle to allocated memory.
    template <typename T>
    auto make_handle(T* p_handle_storage) -> PageMemoryHandle<T> {
        return PageMemoryHandle<T>{{}, p_handle_storage};
    }

    // Access a page(s) of virtual memory.
    template <typename T>
    auto access(PageMemoryHandle<T>& memory) -> T* {
        return memory.p_storage;
    }

    template <typename T>
    auto access(PageMemoryHandle<T> const& memory) const -> T const* {
        return memory.p_storage;
    }

  public:
    static constexpr bool has_pointer_stability = true;
  private:
    friend AllocatorFacade<PageAllocator>;
};

}  // namespace cat

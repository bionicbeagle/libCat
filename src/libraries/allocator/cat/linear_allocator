// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/allocator>

namespace cat {

class linear_allocator : public allocator_interface<linear_allocator> {
  private:
    template <typename T>
    struct linear_memory_handle : detail::base_memory_handle<T> {
        T* p_storage;

        // TODO: Simplify with CRTP or deducing-this.
        auto get() -> decltype(auto) {
            return *this;
        }

        auto get() const -> decltype(auto) {
            return *this;
        }
    };

    linear_allocator(uintptr<void> p_address, iword arena_bytes)
        : p_arena_begin(p_address + static_cast<uword>(arena_bytes)),
          p_arena_end(p_address) {
        this->reset();
    }

  public:
    // Allocate a `linear_allocator` from another allocator.
    static auto backed(is_stable_allocator auto& backing, iword arena_bytes)
        -> maybe<linear_allocator> {
        span memory = TRY(backing.template alloc_multi<byte>(arena_bytes));
        return linear_allocator(memory.data(), arena_bytes);
    }

    // Allocate a `linear_allocator` from another allocator, given a handle to
    // it.
    // TODO: Can this return a tuple of the allocator and handle?
    static auto backed_handle(is_stable_allocator auto& backing,
                              mem auto& handle) -> linear_allocator {
        return linear_allocator(backing.template p_get(handle),
                                handle.raw_size());
    }

    // TODO: Can this return a tuple of the allocator and handle?
    static auto backed_handle_sized(is_stable_allocator auto& backing,
                                    mem auto& handle, iword arena_size)
        -> linear_allocator {
        cat::assert(arena_size <= handle.raw_size());
        return linear_allocator(backing.template p_get(handle), arena_size);
    }

    // Reset the bumped pointer to the beginning of this arena.
    void reset() {
#ifdef __SANITIZE_ADDRESS__
        __asan_poison_memory_region(
            static_cast<void const*>(this->p_arena_end),
            make_unsigned((this->p_arena_begin - this->p_arena_end).raw));
#endif
        this->p_arena_current = p_arena_begin;
    }

  private:
    auto allocation_bytes(uword alignment, iword allocation_bytes)
        -> maybe_non_zero<iword> {
        uintptr<void> allocation = align_down(
            this->p_arena_current - uword{allocation_bytes}, alignment);

        // The allocation size is the difference between the current pointer
        // and the new pointer.
        if (allocation >= p_arena_end) {
            return static_cast<iword>((this->p_arena_current - allocation).raw);
        }
        return nullopt;
    }

    // Try to allocate memory and bump the pointer down.
    auto allocate(iword allocation_bytes) -> maybe_ptr<void> {
        if (this->p_arena_current - allocation_bytes >= p_arena_end) {
            this->p_arena_current -= allocation_bytes;
            // Return a pointer that is then used to in-place construct a `T`.
            return this->p_arena_current;
        }
        return nullptr;
    }

    // Try to allocate memory aligned to some boundary and bump the pointer
    // down.
    auto aligned_allocate(uword alignment, iword allocation_bytes)
        -> maybe_ptr<void> {
        uintptr<void> allocation =
            align_down(this->p_arena_current - allocation_bytes, alignment);

        if (allocation >= p_arena_end) {
            this->p_arena_current = allocation;
            // Return a pointer that is then used for in-place construction.
            return static_cast<void*>(allocation);
        }
        return nullptr;
    }

    // Try to allocate memory and bump the pointer down, and return the memory
    // with size allocated.
    auto aligned_allocate_feedback(uword alignment, iword allocation_bytes)
        -> maybe_sized_allocation<void*> {
        uintptr<void> allocation =
            align_down(this->p_arena_current - allocation_bytes, alignment);

        if (allocation >= p_arena_end) {
            iword bytes_allocated =
                static_cast<iword>(this->p_arena_current - allocation);
            this->p_arena_current = allocation;

            return maybe_sized_allocation<void*>(tuple{
                // Return a pointer that is then used for in-place construction.
                static_cast<void*>(this->p_arena_current), bytes_allocated});
        }
        return nullopt;
    }

    // In general, memory cannot be deallocated in a linear allocator, so
    // this function is no-op.
    void deallocate(void const*, iword) {
    }

    // Produce a handle to allocated memory.
    template <typename T>
    auto make_handle(T* p_handle_storage) -> linear_memory_handle<T> {
        return linear_memory_handle<T>{{}, p_handle_storage};
    }

    // Access some memory.
    template <typename T>
    auto access(linear_memory_handle<T>& memory) -> T* {
        return memory.p_storage;
    }

    template <typename T>
    auto access(linear_memory_handle<T> const& memory) const -> T const* {
        return memory.p_storage;
    }

  public:
    static constexpr bool has_pointer_stability = true;

  private:
    friend allocator_interface<linear_allocator>;

    uintptr<void> const p_arena_begin;
    uintptr<void> const p_arena_end;
    uintptr<void> p_arena_current = p_arena_begin;
};

}  // namespace cat

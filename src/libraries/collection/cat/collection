// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/algorithm>
#include <cat/iterator>
#include <cat/math>

namespace cat {

// Forward declarations for containers and algorithms needed by
// `collection_interface`.
template <typename T>
class span;

template <typename T>
concept is_collection = requires(T container) {
                            container.begin();
                            container.end();
                            container.cbegin();
                            container.cend();
                            container.size();
                        };

namespace detail {
    template <typename T>
    concept is_contiguous_collection =  // is_collection<T> &&
        requires(T collection) { collection.data(); };

    // clang-format off
    template <typename T>
    // Parentheses are required here to satisfy cppcheck.
    concept is_bounded_collection = (requires(T collection) {
        collection.size();
    }) || (requires(T collection) {
        collection.capacity();
    });
    // clang-format on

    // If `.size()` is provided.
    template <typename T>
    concept has_size = requires(T t) { t.size(); };

    // If `.capacity()` is provided.
    template <typename T>
    concept has_capacity = requires(T t) { t.capacity(); };

    // If `.begin()` is provided.
    template <typename T>
    concept has_begin = requires(T t) { t.begin(); };

    // If `.end()` is provided.
    template <typename T>
    concept has_end = requires(T t) { t.end(); };

    // If `.rbegin()` is provided.
    template <typename T>
    concept has_rbegin = requires(T t) { t.rbegin(); };

    // If `.rend()` is provided.
    template <typename T>
    concept has_rend = requires(T t) { t.rend(); };

    // If `.cbegin()` is provided.
    template <typename T>
    concept has_cbegin = requires(T t) { t.cbegin(); };

    // If `.cend()` is provided.
    template <typename T>
    concept has_cend = requires(T t) { t.cend(); };

    template <typename derived_type, typename T, bool>
    struct collection_iterator;

    template <typename derived_type, typename T>
    struct collection_iterator<derived_type, T, false> {
      private:
        constexpr auto self() -> derived_type& {
            return static_cast<derived_type&>(*this);
        }

        constexpr auto self() const -> derived_type const& {
            return static_cast<derived_type const&>(*this);
        }

      public:
        [[nodiscard]]
        constexpr auto begin() const
            requires(has_begin<derived_type>)
        {
            return unconst(this)->self().begin();
        }

        // Generate `const` overload from non-`const` method `end()`.
        [[nodiscard]]
        constexpr auto end() const
            requires(has_end<derived_type>)
        {
            return unconst(this)->self().end();
        }

        // Generate `cbegin()` from `begin()`.
        [[nodiscard]]
        constexpr auto cbegin() const
            requires(has_begin<derived_type>)
        {
            return this->begin();
        }

        // Generate `cend()` from `end()`.
        [[nodiscard]]
        constexpr auto cend() const
            requires(has_end<derived_type>)
        {
            return this->end();
        }

        [[nodiscard]]
        constexpr auto rbegin()
            requires(has_end<derived_type>)
        {
            return as_reverse(unconst(this)->self()).begin();
        }

        [[nodiscard]]
        constexpr auto rend()
            requires(has_begin<derived_type>)
        {
            return as_reverse(unconst(this)->self()).end();
        }

        [[nodiscard]]
        constexpr auto rbegin() const
            requires(has_end<derived_type>)
        {
            return as_reverse(unconst(this)->self()).begin();
        }

        [[nodiscard]]
        constexpr auto rend() const
            requires(has_begin<derived_type>)
        {
            return as_reverse(unconst(this)->self()).end();
        }

        [[nodiscard]]
        constexpr auto crbegin() const
            requires(has_end<derived_type>)
        {
            // TODO: This should return a `const_iterator`.
            return (as_reverse(unconst(this)->self())).begin();
        }

        [[nodiscard]]
        constexpr auto crend() const
            requires(has_begin<derived_type>)
        {
            // TODO: This should return a `const_iterator`.
            return (as_reverse(unconst(this)->self())).end();
        }
    };

    template <typename derived_type, typename T>
    struct collection_iterator<derived_type, T, true> {
      private:
        constexpr auto self_mut() -> derived_type& {
            return static_cast<derived_type&>(*this);
        }

        constexpr auto self() -> derived_type& {
            return static_cast<derived_type&>(*this);
        }

        constexpr auto self() const -> derived_type const& {
            return static_cast<derived_type const&>(*this);
        }

      public:
        // Contiguous collections can produce non-`const` bidirectional
        // iterators.
        // This type can be accessed as, `cat::vector<int>::iterator`.
        class iterator : public iterator_interface<iterator, T> {
          public:
            constexpr iterator(iterator const&) = default;
            constexpr iterator(iterator&&) = default;

            constexpr iterator(iword index, T* p_in_array)
                : current_index(index), p_array(p_in_array) {
            }

            constexpr auto dereference() const -> T& {
                return this->p_array[current_index.raw];
            }

            constexpr void advance(iword offset) {
                this->current_index += offset;
            }

            constexpr auto distance_to(iterator const& other) const -> iword {
                return other.current_index - current_index;
            }

          private:
            iword current_index;
            T* p_array;
        };

        // Contiguous collections can produce `const` bidirectional
        // iterators.
        // This type can be accessed as, `cat::vector<int>::const_iterator`.
        class const_iterator
            : public iterator_interface<const_iterator, T const> {
          public:
            constexpr const_iterator(const_iterator const&) = default;
            constexpr const_iterator(const_iterator&&) = default;

            constexpr const_iterator(iterator const& other)
                : current_index(other.current_index), p_array(other.p_array) {
            }

            constexpr const_iterator(iword index, T const* p_in_array)
                : current_index(index), p_array(p_in_array) {
            }

            constexpr auto dereference() const -> T const& {
                return this->p_array[current_index.raw];
            }

            constexpr void advance(iword offset) {
                this->current_index += offset;
            }

            constexpr auto distance_to(const_iterator const& other) const
                -> iword {
                return other.current_index - current_index;
            }

          private:
            iword current_index;
            T const* p_array;
        };

        using reverse_iterator = reverse_iterator_adaptor<iterator, T>;
        // TODO: Generate `const_iterator`.
        using const_reverse_iterator =
            reverse_iterator_adaptor<const_iterator, T const>;

        // `.begin()` and `.end()` can be automatically generated for
        // contiguous collections.
        [[nodiscard]]
        constexpr auto begin() {
            return iterator(0, this->self_mut().data());
        }

        [[nodiscard]]
        constexpr auto begin() const {
            return const_iterator(0, this->self().data());
        }

        [[nodiscard]]
        constexpr auto end() {
            return iterator(this->self_mut().size(), this->self_mut().data());
        }

        [[nodiscard]]
        constexpr auto end() const {
            return const_iterator(this->self().size(), this->self().data());
        }

        [[nodiscard]]
        constexpr auto cbegin() const {
            return this->begin();
        }

        [[nodiscard]]
        constexpr auto cend() const {
            return this->end();
        }

        [[nodiscard]]
        constexpr auto rbegin() {
            return reverse_iterator(this->self().size() - 1,
                                    this->self().data());
        }

        [[nodiscard]]
        constexpr auto rbegin() const {
            return const_reverse_iterator(this->self().size() - 1,
                                          this->self().data());
        }

        [[nodiscard]]
        constexpr auto rend() {
            return reverse_iterator(0, this->self().data());
        }

        [[nodiscard]]
        constexpr auto rend() const {
            return const_reverse_iterator(0, this->self().data());
        }

        [[nodiscard]]
        constexpr auto crbegin() const {
            return this->rbegin();
        }

        [[nodiscard]]
        constexpr auto crend() const {
            return this->rend();
        }
    };
}  // namespace detail

template <typename derived_type, typename T,
          bool generate_bidi_iterator = false>
class collection_interface
    : public detail::collection_iterator<derived_type, T,
                                         generate_bidi_iterator> {
  private:
    // `is_array_like` at the top of this class instead of the bottom prevents
    // clangd false diagnostics.
    static constexpr bool is_array_like =
        detail::is_contiguous_collection<derived_type> &&
        detail::is_bounded_collection<derived_type>;

  public:
    // If `.size()` is not, provided and `.capacity()` is, generate
    // `.size()`.
    [[nodiscard]]
    constexpr auto size() const -> iword
        requires(detail::has_capacity<derived_type> &&
                 !detail::has_size<derived_type>)
    {
        return this->self().capacity();
    }

    // If `.size()` is provided and `.capacity()` is not, generate
    // `.capacity()`.
    [[nodiscard]]
    constexpr auto capacity() const -> iword
        requires(detail::has_size<derived_type>)
    {
        return this->self().size();
    }

    // This evaluates true if there are one or more elements currently in this
    // collection.
    [[nodiscard]]
    constexpr auto is_empty() const -> bool
        requires(detail::has_size<derived_type>)
    {
        return this->self().size() == 0;
    }

    // This evaluates true if there are one or more elements currently in this
    // collection.
    [[nodiscard]]
    constexpr auto is_full() const -> bool
        requires(detail::has_size<derived_type>)
    {
        return this->self().size() == this->self().capacity();
    }

    // Index into this collection with bounds-checking.
    [[nodiscard]]
    constexpr auto at(iword index) -> maybe<T&>
        requires(is_array_like)
    {
        if !consteval {
            cat::assert(index >= 0);
        }
        if (index < this->self().capacity()) {
            return this->self_mut().data()[index.raw];
        }
        return nullopt;
    }

    // Index into this collection with bounds-checking.
    [[nodiscard]]
    constexpr auto at(iword index) const -> maybe<T&> {
        // `unconst()` allows `.at()` to be safely called in a `const` context.
        return unconst(this)->at(index);
    }

    [[nodiscard]]
    constexpr auto front() -> T&
        requires(is_array_like)
    {
        cat::assert(this->self().size() > 0);
        return this->self_mut().data()[0];
    }

    [[nodiscard]]
    constexpr auto front() const -> T const& {
        cat::assert(this->self().size() > 0);
        return unconst(this)->front();
    }

    [[nodiscard]]
    constexpr auto back() -> T&
        requires(is_array_like)
    {
        cat::assert(this->self().size() > 0);
        return this->self_mut().data()[this->self().size().raw - 1];
    }

    [[nodiscard]]
    constexpr auto back() const -> T const& {
        cat::assert(this->self().size() > 0);
        return unconst(this)->back();
    }

    [[nodiscard]]
    constexpr auto subspan(iword start_index, iword end_index) -> span<T>
        requires(is_array_like)
    {
        if !consteval {
            cat::assert(start_index >= 0);
            cat::assert(end_index <= this->self().capacity());
        }

        return span<T>(this->self().data() + start_index,
                       end_index - start_index);
    }

    [[nodiscard]]
    constexpr auto subspan(iword start_index, iword end_index) const
        -> span<T const>
        requires(is_array_like)
    {
        if !consteval {
            cat::assert(start_index >= 0);
            cat::assert(end_index <= this->self().capacity());
        }

        return span<T const>(this->self().data() + start_index,
                             end_index - start_index);
    }

    [[nodiscard]]
    constexpr auto first(iword count) -> span<T>
        requires(is_array_like)
    {
        return this->subspan(0, count);
    }

    [[nodiscard]]
    constexpr auto first(iword count) const -> span<T const>
        requires(is_array_like)
    {
        return this->subspan(0, count);
    }

    [[nodiscard]]
    constexpr auto last(iword count) -> span<T>
        requires(is_array_like)
    {
        return this->subspan(this->self().size() - count, this->self().size());
    }

    [[nodiscard]]
    constexpr auto last(iword count) const -> span<T const>
        requires(is_array_like)
    {
        return this->subspan(this->self().size() - count, this->self().size());
    }

    template <is_integral U>
        requires(is_array_like)
    [[nodiscard]]
    constexpr auto
    operator[](U index) -> T& {
        if !consteval {
            assert(index >= 0);
            assert(index < this->self().size());
        }

        return this->self_mut().data()[make_raw_arithmetic(index)];
    }

    template <is_integral U>
        requires(is_array_like)
    [[nodiscard]]
    constexpr auto
    operator[](U index) const -> T const& {
        if !consteval {
            assert(index >= 0);
            assert(index < this->self().size());
        }

        return this->self().data()[make_raw_arithmetic(index)];
    }

    // Member-access syntax algorithms.

    template <is_collection Other>
    auto copy_to(Other& destination) const {
        assert(destination.capacity() >= this->capacity());
        return cat::copy(this->begin(), this->end(), destination.begin());
    }

    template <is_collection Other>
    auto move_to(Other& destination) const {
        assert(destination.capacity() >= this->capacity());
        return cat::move(this->begin(), this->end(), destination.begin());
    }

    template <is_collection Other>
    auto relocate_to(Other& destination) const {
        assert(destination.capacity() >= this->capacity());
        return cat::relocate(this->begin(), this->end(), destination.begin());
    }

    // Implementation details for type reflection.

  private:
    constexpr auto self_mut() -> derived_type& {
        return static_cast<derived_type&>(*this);
    }

    constexpr auto self() -> derived_type& {
        return static_cast<derived_type&>(*this);
    }

    constexpr auto self() const -> derived_type const& {
        return static_cast<derived_type const&>(*this);
    }
};

}  // namespace cat

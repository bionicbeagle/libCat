// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/collection>
#include <cat/memory>
#include <cat/meta>

// TODO: Add tests.

namespace cat {

// A `span` is represents an array of `T` with runtime-known length. It stores
// an address and a length. It is random-access iterable.
template <typename T>
class span : public collection_interface<span<T>, T, true> {
  public:
    constexpr span() = default;
    constexpr span(span<T> const&) = default;
    constexpr span(span<T>&&) = default;

    // Construct a `span` as `{address, length}`.
    template <typename U>
        requires(is_implicitly_convertible<U*, T*>)
    constexpr span(U* p_in_data, iword in_length)
        : p_storage(static_cast<T*>(p_in_data)), length(in_length) {
    }

    // Construct a `span` with `nullptr`.
    constexpr span(decltype(nullptr), iword in_length)
        : p_storage(nullptr), length(in_length) {
    }

    // Implicitly convert a contiguous container into a span.
    template <typename U>
        requires(is_random_access<U>)
    constexpr span(U& collection)
        : p_storage(collection.data()), length(collection.size()) {
    }

    // If `T` is non-const, conversion to a `const` contiguous container is
    // explicit.
    template <typename U>
        requires(is_random_access<U>)
    explicit constexpr span(U const& collection)
        : p_storage(unconst(collection.data())), length(collection.size()) {
    }

    // Construct a `span` between two addresses.
    template <typename U, typename V>
        requires(is_implicitly_convertible<U, T> &&
                 is_implicitly_convertible<V, T>)
    static constexpr auto between(U* p_start, V* p_end) {
        return span<T>{static_cast<T*>(p_start), iword{p_end - p_start}};
    }

    constexpr auto operator=(span<T> const&) -> span<T>& = default;
    constexpr auto operator=(span<T>&&) -> span<T>& = default;

    // Get the non-`const` address that this `span` starts at.
    [[nodiscard]]
    constexpr auto data() -> T* {
        return this->p_storage;
    }

    // Get the `const` address that this `span` starts at.
    [[nodiscard]]
    constexpr auto data() const -> T* {
        return this->p_storage;
    }

    // Get the number of elements owned by this `span`.
    [[nodiscard]]
    constexpr auto size() const -> iword {
        return this->length;
    }

    // The capacity is simply the number of elements owned.

    // These are `protected` instead of `private` so that `cat::string` can
    // access them.

  protected:
    // This is arranged as pointer, then size, to follow the ABI of Linux
    // standard `iovec`s. Unfortunately, that is opposite of Windws' standard
    // `WSABUF`.
    T* p_storage;
    iword length;
};

}  // namespace cat

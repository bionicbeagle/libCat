// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/meta>

// `Unique` wrappers are curiously-recurring-template-pattern types that cannot
// be copy-constructed. They must be moved to pass into functions. Their
// destructor will call an `raii()` method on the type they wrap iff that type
// has an `raii()` method.

// `UniqueWeak` is a similar wrapper that can release ownership of its data, and
// will only invoke that data's destructor if it currently holds ownership.

namespace cat {

template <typename T>
concept has_raii = requires(T it) {
    it.raii();
};

template <typename T>
class UniqueWeak;

namespace detail {
    template <typename T>
    concept is_non_unique_weak = requires {
        is_specialization<T, UniqueWeak>;
    };
}  // namespace detail

template <typename T>
class Unique {
  public:
    // Delete non-moving constructors.
    template <typename U>
    constexpr Unique(Unique<U> const&) = delete;

    // Allow default-construction and move-construction.
    constexpr Unique() = default;

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    constexpr Unique(Unique<U>&& raii)
        : storage(static_cast<T>(raii.borrow())){};

    // Copy-construct from any type convertible into `T`.
    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    constexpr Unique(U const& value) : storage(static_cast<T>(value)){};

    // Move-construct from any type convertible into `T`.
    template <rvalue U>
        requires(is_implicitly_convertible<U, T>)
    constexpr Unique(U&& value) : storage(forward<U>(value)){};  // NOLINT

    // Forward any possible constructor into `storage`.
    template <typename... Args>
        requires(sizeof...(Args) > 1)
    Unique(Args&&... args) : storage(forward<Args>(args)...){};

    // Allow move-assignment.
    template <rvalue U>
        requires(is_implicitly_convertible<U, T>)
    auto operator=(U&& value) -> Unique& {
        this->storage_destructor();
        this->storage = static_cast<T>(forward<U>(value));
        return *this;
    }

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    auto operator=(Unique<U>&& raii) -> Unique& {
        this->storage_destructor();
        this->storage = static_cast<T>(move(raii).borrow());
        return *this;
    }

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    auto operator=(UniqueWeak<U>&& raii) -> Unique& {
        this->storage_destructor();
        this->storage = static_cast<T>(move(raii).borrow());
        return *this;
    }

    ~Unique() {
        if constexpr (has_raii<T>) {
            this->storage.raii();
        }
    }

    constexpr auto borrow() -> T&& {
        return forward<T>(this->storage);
    }

  private:
    void storage_destructor() {
        // If `T` holds a `.raii()` method, it will be called before `T`'s
        // destructor.
        if constexpr (has_raii<T>) {
            this->storage.raii();
        }
        if constexpr (!is_trivially_destructible<T>) {
            this->storage.~T();
        }
    }

    T storage;
};

// TODO: Why is this needed?
template <detail::is_non_unique_weak T>
Unique(T) -> Unique<T>;

template <typename T>
class UniqueWeak {
  public:
    // Delete non-moving constructors.
    template <typename U>
    constexpr UniqueWeak(UniqueWeak<U> const&) = delete;

    // Allow default-construction and move-construction.
    constexpr UniqueWeak() = default;

    // Consume any type convertible into `T`.
    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    constexpr UniqueWeak(U const& value) : storage(static_cast<T>(value)){};

    template <rvalue U>
        requires(is_implicitly_convertible<U, T>)
    constexpr UniqueWeak(U&& value)  // NOLINT
        : storage(static_cast<T>(forward<U>(value))){};

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    constexpr UniqueWeak(UniqueWeak<U>&& raii)
        : storage(static_cast<T>(raii.borrow())) {
        raii.owns_data = false;
    };

    template <typename... Args>
    UniqueWeak(Args&&... args) : storage(forward<Args>(args)...){};

    // Allow move-assignment.
    template <rvalue U>
        requires(is_implicitly_convertible<U, T>)
    auto operator=(U&& value) -> UniqueWeak<T>& {
        this->storage_destructor();
        this->storage = forward<U>(value);
        this->owns_data = true;
        return *this;
    }

    template <typename U>
        requires(is_implicitly_convertible<U, T>)
    auto operator=(UniqueWeak<U>&& raii) -> UniqueWeak<T>& {
        raii.owns_data = false;
        this->storage_destructor();
        this->storage = static_cast<T>(move(raii).borrow());
        this->owns_data = true;
        return *this;
    }

    constexpr auto has_ownership() -> bool {
        return this->owns_data;
    }

    constexpr auto borrow() -> T&& {
        this->owns_data = false;
        return forward<T>(this->storage);
    }

    ~UniqueWeak() {
        if constexpr (has_raii<T>) {
            this->storage.raii();
        }
    }

  private:
    // If this `UniqueWeak` owns the data it stores, it will be destroyed.
    void storage_destructor() {
        if (this->owns_data) {
            // If `T` holds a `.raii()` method, it will be called before `T`'s
            // destructor if this object holds ownership of the data.
            if constexpr (has_raii<T>) {
                this->storage.raii();
            }
            // If a destructor is non-trivial, it must be invoked manually.
            if constexpr (!is_trivially_destructible<T>) {
                this->storage.~T();
            }
        }
    }

    T storage;
    bool owns_data = true;
};

template <typename T>
UniqueWeak(T) -> UniqueWeak<T>;

}  // namespace cat
